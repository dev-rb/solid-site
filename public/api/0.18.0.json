{
  "version": "v0.18.0",
  "isLatest": false,
  "html": "https://github.com/solidjs/solid/releases/tag/v0.18.0",
  "date": "2020-05-02T06:18:59Z",
  "tar": "https://api.github.com/repos/solidjs/solid/tarball/v0.18.0",
  "zip": "https://api.github.com/repos/solidjs/solid/zipball/v0.18.0",
  "sections": [
    {
      "slug": "core-api",
      "title": "Core API",
      "level": 1,
      "children": []
    },
    {
      "slug": "additional-api",
      "title": "Additional API",
      "level": 1,
      "children": []
    },
    {
      "slug": "comparison-with-other-libraries",
      "title": "Comparison with other Libraries",
      "level": 1,
      "children": [
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": []
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": []
        },
        {
          "slug": "lit-html-%26-lighterhtml",
          "title": "lit-html & LighterHTML",
          "level": 2,
          "children": []
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "others",
          "title": "Others",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "components",
      "title": "Components",
      "level": 1,
      "children": [
        {
          "slug": "children",
          "title": "Children",
          "level": 2,
          "children": []
        },
        {
          "slug": "lifecycle",
          "title": "Lifecycle",
          "level": 2,
          "children": []
        },
        {
          "slug": "web-components",
          "title": "Web Components",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "context",
      "title": "Context",
      "level": 1,
      "children": []
    },
    {
      "slug": "reactivity",
      "title": "Reactivity",
      "level": 1,
      "children": [
        {
          "slug": "signals",
          "title": "Signals",
          "level": 2,
          "children": []
        },
        {
          "slug": "accessors-reactive-scope",
          "title": "Accessors Reactive Scope",
          "level": 2,
          "children": []
        },
        {
          "slug": "computations",
          "title": "Computations",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendering-with-reactivity",
          "title": "Rendering with Reactivity",
          "level": 2,
          "children": []
        },
        {
          "slug": "cleanup",
          "title": "Cleanup",
          "level": 2,
          "children": []
        },
        {
          "slug": "composition",
          "title": "Composition",
          "level": 2,
          "children": []
        },
        {
          "slug": "operators",
          "title": "Operators",
          "level": 2,
          "children": [
            {
              "slug": "maparray(()-%3D%3E-any%5B%5D%2C-iterator%3A-(item%2C-index)-%3D%3E-any%2C-options%3A-%7B-fallback%3A-()-%3D%3E-any-%7D)%3A-()-%3D%3E-any%5B%5D",
              "title": "mapArray(() => any[], iterator: (item, index) => any, options: { fallback: () => any }): () => any[]",
              "level": 3,
              "children": []
            },
            {
              "slug": "maparray(iterator%3A-(item%2C-index)-%3D%3E-any%2C-options%3A-%7B-fallback%3A-()-%3D%3E-any-%7D)%3A-(signal)-%3D%3E-()-%3D%3E-any%5B%5D",
              "title": "mapArray(iterator: (item, index) => any, options: { fallback: () => any }): (signal) => () => any[]",
              "level": 3,
              "children": []
            }
          ]
        }
      ]
    },
    {
      "slug": "rendering",
      "title": "Rendering",
      "level": 1,
      "children": [
        {
          "slug": "jsx-compilation",
          "title": "JSX Compilation",
          "level": 2,
          "children": [
            {
              "slug": "note-on-attribute-binding-order",
              "title": "Note on attribute binding order",
              "level": 3,
              "children": []
            },
            {
              "slug": "note-on-forms",
              "title": "Note on forms",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "entry",
          "title": "Entry",
          "level": 2,
          "children": []
        },
        {
          "slug": "events",
          "title": "Events",
          "level": 2,
          "children": []
        },
        {
          "slug": "control-flow",
          "title": "Control Flow",
          "level": 2,
          "children": [
            {
              "slug": "for",
              "title": "For",
              "level": 3,
              "children": []
            },
            {
              "slug": "show",
              "title": "Show",
              "level": 3,
              "children": []
            },
            {
              "slug": "switch%2Fmatch",
              "title": "Switch/Match",
              "level": 3,
              "children": []
            },
            {
              "slug": "portal",
              "title": "Portal",
              "level": 3,
              "children": []
            },
            {
              "slug": "suspense",
              "title": "Suspense",
              "level": 3,
              "children": []
            },
            {
              "slug": "suspenselist",
              "title": "SuspenseList",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "refs",
          "title": "Refs",
          "level": 2,
          "children": [
            {
              "slug": "ref",
              "title": "ref",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "server-side-rendering-(experimental)",
          "title": "Server Side Rendering (Experimental)",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "state",
      "title": "State",
      "level": 1,
      "children": [
        {
          "slug": "modifiers",
          "title": "Modifiers",
          "level": 2,
          "children": [
            {
              "slug": "reconcile(value%2C-options)",
              "title": "reconcile(value, options)",
              "level": 3,
              "children": []
            }
          ]
        }
      ]
    },
    {
      "slug": "storybook",
      "title": "Storybook",
      "level": 1,
      "children": []
    },
    {
      "slug": "styling",
      "title": "Styling",
      "level": 1,
      "children": [
        {
          "slug": "inline-styles",
          "title": "Inline Styles",
          "level": 2,
          "children": []
        },
        {
          "slug": "classes",
          "title": "Classes",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "suspense",
      "title": "Suspense",
      "level": 1,
      "children": [
        {
          "slug": "asynchronous-rendering",
          "title": "Asynchronous Rendering",
          "level": 2,
          "children": []
        },
        {
          "slug": "placeholders-%26-transitions",
          "title": "Placeholders & Transitions",
          "level": 2,
          "children": []
        },
        {
          "slug": "code-splitting",
          "title": "Code Splitting",
          "level": 2,
          "children": []
        },
        {
          "slug": "data-loading",
          "title": "Data Loading",
          "level": 2,
          "children": []
        },
        {
          "slug": "render-as-you-fetch",
          "title": "Render as you Fetch",
          "level": 2,
          "children": []
        },
        {
          "slug": "coordinating-suspense-components-with-suspenselist-(experimental)",
          "title": "Coordinating Suspense Components with SuspenseList (Experimental)",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "help!",
      "title": "Help!",
      "level": 1,
      "children": [
        {
          "slug": "reactivity-is-not-working",
          "title": "Reactivity is not working",
          "level": 2,
          "children": []
        }
      ]
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"core-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#core-api\">#</a> Core API</h1>\n<h3 id=\"createstate(initvalue)%3A-%5Bstate%2C-setstate%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstate(initvalue)%3A-%5Bstate%2C-setstate%5D\">#</a> <code>createState(initValue): [state, setState]</code></h3>\n<p>Creates a new State object and setState pair that can be used to maintain your componenents state. State only triggers update on values changing. Tracking is done by intercepting property access and automatically tracks deep nesting via proxy.</p>\n<h3 id=\"createsignal(initialvalue%2C-comparatorfn)%3A-%5Bgetvaluefn%2C-setvaluefn%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createsignal(initialvalue%2C-comparatorfn)%3A-%5Bgetvaluefn%2C-setvaluefn%5D\">#</a> <code>createSignal(initialValue, comparatorFn): [getValueFn, setValueFn]</code></h3>\n<p>This is the smallest and most primitive reactive atom used to track a single value. By default signals always notify on setting a value. However a comparator can be passed in to indicate whether the values should be considered equal and listeners not notified.</p>\n<h3 id=\"createeffect(prev-%3D%3E-%3Ccode%3E%2C-initialvalue)%3A-void\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createeffect(prev-%3D%3E-%3Ccode%3E%2C-initialvalue)%3A-void\">#</a> <code>createEffect(prev =&gt; &lt;code&gt;, initialValue): void</code></h3>\n<p>Creates a new effect that automatically tracks dependencies. 2nd argument is the initial value.</p>\n<h3 id=\"creatememo(prev-%3D%3E-%3Ccode%3E%2C-initialvalue%2C-comparatorfn)%3A-getvaluefn\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#creatememo(prev-%3D%3E-%3Ccode%3E%2C-initialvalue%2C-comparatorfn)%3A-getvaluefn\">#</a> <code>createMemo(prev =&gt; &lt;code&gt;, initialValue, comparatorFn): getValueFn</code></h3>\n<p>Creates a readonly signal that recalculates it's value whenever the executed codes dependencies update. Memos only notify dependents when returned value changes. You can also set a custom comparator.</p>\n<h3 id=\"oncleanup(()-%3D%3E-%3Ccode%3E)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#oncleanup(()-%3D%3E-%3Ccode%3E)\">#</a> <code>onCleanup(() =&gt; &lt;code&gt;)</code></h3>\n<p>Registers a cleanup methodthat executes on disposal or recalculation of the current context.</p>\n<h3 id=\"createcontext(defaultcontext)%3A-context\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcontext(defaultcontext)%3A-context\">#</a> <code>createContext(defaultContext): Context</code></h3>\n<p>Creates a new context object that can be used with useContext and the Provider control flow. Default Context is used when no Provider is found above in the hierarchy.</p>\n<h3 id=\"usecontext(context)%3A-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usecontext(context)%3A-any\">#</a> <code>useContext(Context): any</code></h3>\n<p>Hook to grab context to allow for deep passing of props with hierarchal resolution of dependencies without having to pass them through each Component function.</p>\n<h1 id=\"additional-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#additional-api\">#</a> Additional API</h1>\n<p>The following are not required to build simple applications but allow a lot more power and control.</p>\n<h3 id=\"createroot(disposer-%3D%3E-%3Ccode%3E)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createroot(disposer-%3D%3E-%3Ccode%3E)\">#</a> <code>createRoot(disposer =&gt; &lt;code&gt;)</code></h3>\n<p>Creates a new non-tracked context that doesn't auto-dispose. All Solid code should be wrapped in one of these top level as they ensure that all memory/computations are freed up.</p>\n<h3 id=\"sample(()-%3D%3E-%3Ccode%3E)%3A-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sample(()-%3D%3E-%3Ccode%3E)%3A-any\">#</a> <code>sample(() =&gt; &lt;code&gt;): any</code></h3>\n<p>Ignores tracking any of the dependencies in the executing code block and returns the value.</p>\n<h3 id=\"freeze(()-%3D%3E-%3Ccode%3E)%3A-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#freeze(()-%3D%3E-%3Ccode%3E)%3A-any\">#</a> <code>freeze(() =&gt; &lt;code&gt;): any</code></h3>\n<p>Ensures that all updates within the block happen at the same time to prevent unnecessary recalculation. Solid State's setState method and computations(useEffect, useMemo) automatically wrap their code in freeze blocks.</p>\n<h3 id=\"onerror((err%3A-any)-%3D%3E-%3Ccode%3E)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onerror((err%3A-any)-%3D%3E-%3Ccode%3E)\">#</a> <code>onError((err: any) =&gt; &lt;code&gt;)</code></h3>\n<p>Registers a error handler method that executes when child context errors. Only nearest context error handlers execute. Rethrow to trigger up the line.</p>\n<h3 id=\"createdeferred(prev-%3D%3E-%3Ccode%3E%2C-options%3A-%7B-timeoutms%3A-number-%7D)%3A-getvaluefn\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createdeferred(prev-%3D%3E-%3Ccode%3E%2C-options%3A-%7B-timeoutms%3A-number-%7D)%3A-getvaluefn\">#</a> <code>createDeferred(prev =&gt; &lt;code&gt;, options: { timeoutMs: number }): getValueFn</code></h3>\n<p>Creates memo that only notifies downstream changes when the browser is idle. <code>timeoutMS</code> is the maximum time to wait before forcing the update.</p>\n<h3 id=\"createdependenteffect(()-%3D%3E-%3Ccode%3E%2C-dependencies%2C-defer)%3A-void\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createdependenteffect(()-%3D%3E-%3Ccode%3E%2C-dependencies%2C-defer)%3A-void\">#</a> <code>createDependentEffect(() =&gt; &lt;code&gt;, dependencies, defer): void</code></h3>\n<p>Creates a new effect that explicitly tracks dependencies. The 2nd optional argument is an explicit array of dependencies. The 3rd optional argument is whether to defer initial execution of the effect until a value has changed (this only works with explicit dependencies).</p>\n<h3 id=\"createresource(initialvalue)%3A-%5Bgetvaluefn%2C-loadfn%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createresource(initialvalue)%3A-%5Bgetvaluefn%2C-loadfn%5D\">#</a> <code>createResource(initialValue): [getValueFn, loadFn]</code></h3>\n<p>Creates a new resource signal that can hold a async resource. Resources when read while loading trigger Suspense. The <code>loadFn</code> takes a promise whose resolved value is set in the resource.</p>\n<h3 id=\"createresourcestate(initialvalue)%3A-%5Bstate%2C-loadstate%2C-setstate%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createresourcestate(initialvalue)%3A-%5Bstate%2C-loadstate%2C-setstate%5D\">#</a> <code>createResourceState(initialValue): [state, loadState, setState]</code></h3>\n<p>Creates a new Resource State object. Similar to normal state except each immediate property is a resource.</p>\n<h3 id=\"aftereffects(()-%3D%3E-%3Ccode%3E)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#aftereffects(()-%3D%3E-%3Ccode%3E)\">#</a> <code>afterEffects(() =&gt; &lt;code&gt;)</code></h3>\n<p>Registers a method that will run after the current execution process is complete. These are useful when waiting on refs to resolves or child DOM nodes to render.</p>\n<h3 id=\"lazy(()-%3D%3E-%3Cpromise%3E)%3A-component\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lazy(()-%3D%3E-%3Cpromise%3E)%3A-component\">#</a> <code>lazy(() =&gt; &lt;Promise&gt;): Component</code></h3>\n<p>Used to lazy load components to allow for things like code splitting and Suspense.</p>\n<h3 id=\"setdefaults(props%2C-defaultprops)%3A-void\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setdefaults(props%2C-defaultprops)%3A-void\">#</a> <code>setDefaults(props, defaultProps): void</code></h3>\n<p>Sets default props for function components in case caller doesn't provide them.</p>\n<h3 id=\"cloneprops(props)%3A-newprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cloneprops(props)%3A-newprops\">#</a> <code>cloneProps(props): newProps</code></h3>\n<p>Clones the props object including reactive properties.</p>\n</section><section class=\"mt-10\"><h1 id=\"comparison-with-other-libraries\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#comparison-with-other-libraries\">#</a> Comparison with other Libraries</h1>\n<p>This section cannot escape some bias but I think it is important to understand where Solid's solution sits compared to other libraries. This is not about performance. For a definitive look at performance feel free to look at the <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a>.</p>\n<h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2>\n<p>This library owes its existence to Knockout. Modernizing its model for fine grained dependency detection was the motivation for this project. Knockout was released in 2010 and supports back to IE6 while much of Solid doesn't support IE at all(although you can use Signals in Solid without using the Proxy State object).</p>\n<p>Knockout's bindings are just strings in HTML which are walked over at runtime. They depend on cloning context($parent etc...). Whereas Solid uses JSX or Tagged Template Literals for templating opting for an in JavaScript API.</p>\n<p>The biggest difference might be that Solid's approach to batching changes which ensures synchronicity whereas Knockout has deferUpdates which uses a deferred microtask queue.</p>\n<h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2>\n<p>React is also has had a big influence on Solid. Its unidirectional flow and explicit segregation of read and write in its Hooks API informed Solid's API. More so the objective of being just a &quot;Render Library&quot; rather than a framework. Solid has strong opinions on how to approach managing data in application development but doesn't seek to constrain its execution.</p>\n<p>However, as much as Solid aligns with React's design philosophy, it works significantly different fundamentally. React uses a Virtual DOM, and Solid does not. React's abstraction is top down component partition where render methods are called repeatedly and diffed. Whereas Solid renders each Template once in entirety constructing its reactive graph and afterwords only executes instructions related to fine-grained changes.</p>\n<h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2>\n<p>Svelte pioneered the precompiled disappearing framework that Solid also employs to a certain degree. Both libraries are truly reactive and can produce really small execution code bundles although Svelte is the winner here for small demos. Solid requires a bit more explicitness in its declarations and relying less on implicit analysis from the compiler, but that is part of what gives Solid superior performance. Solid also keeps more in the runtime which scales better in larger apps. Solid's RealWorld demo implementation is 25% smaller than Svelte's.</p>\n<p>Both libraries aim to help their developers write less code but approach it completely differently. Svelte 3 focuses on the optimization of the ease of dealing with localized change focusing on plain object interaction and 2 way binding. In constrast Solid focuses on the data flow by deliberately embraces CQRS and immutable interface. With functional template composition, in many cases Solid allows developers to write even less code than Svelte.</p>\n<p>Svelte still represents pushing the boundaries of precompilation where Solid is a bit more conservative offering HyperScript and Tagged Template Literal options in addition to the compiled JSX. But we feel Solid really takes the best of both worlds.</p>\n<h2 id=\"lit-html-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-html-%26-lighterhtml\">#</a> lit-html &amp; LighterHTML</h2>\n<p>These libraries are incredibly similar and have had some influence on Solid. Mostly that Solid's compiled code uses a very similar method to performantly initially render the DOM. Cloning Template elements and using comment placeholders are something that Solid and these libraries share in common.</p>\n<p>The biggest difference is that while these libraries do not use the Virtual DOM they treat rendering the same way, top down and requiring component partitioning to keep things sane. By contrast Solid uses its fine grained Reactive Graph to only update what has changed and in so only shares this technique for its initial render. This allows for it benefit from the initial speed only available from native DOM and also have the most performant approach to updates.</p>\n<h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2>\n<p>Solid is not particularly influenced by Vue, but they are relatable. They both use Proxies in their Reactive system, but that is where the similarities end. Vue's fine grained dependency detection just feeds into a less fine-grained Virtual DOM and Component system whereas Solid keeps its granularity right down to its direct DOM updates.</p>\n<p>Vue values easiness where Solid values transparency. Although Vue's new direction with Vue 3 aligns more with the approach Solid takes. These libraries might align more over time depending on how they continue to evolve.</p>\n<h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2>\n<p>RxJS is the Reactive library. While Solid has a similar idea of Observable data it uses a much different application of the observer pattern. While Signals are like a simple version of an Observable (only the next), the pattern of auto dependency detection surplant's RxJS' hundred or so operators. Solid could be handled this way and earlier versions of the library included similar operators, but in most cases it is more straightforward to write your own transformation logic in a computation. Where Observables are cold starting, unicast, and push-based many problems on the client lend to hot startup and being multicast which is Solid's default behavior.</p>\n<h2 id=\"others\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#others\">#</a> Others</h2>\n<p>Angular and a few other popular libraries are notably missing from this comparison and it is mostly lack of experience with them to give an adequate comparison. Mostly larger Frameworks do not share much in common with Solid and it is much harder to compare them head on.</p>\n</section><section class=\"mt-10\"><h1 id=\"components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#components\">#</a> Components</h1>\n<p>Components in Solid are just Pascal(Capital) cased functions. Their first argument is an props object and return real DOM nodes.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Parent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">section</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Label</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">greeting</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&quot;Hello&quot;</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;John&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">Label</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">section</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Label</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> ({ </span><span style=\"color: #E36209\">greeting</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">children</span><span style=\"color: #24292E\"> }) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{greeting}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {children}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Since the all nodes from JSX are actual DOM nodes the only responsibility of top level Templates/Components is appending to the DOM.</p>\n<p>Components also support dynamic bindings which allow you to pass values that will change. However you need to be careful to access your props inside bindings or effects it you want them to track change.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A737D\">// Name will never update as it is destructured outside</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">StaticComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> ({ </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> }) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{ name }&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Updates like you&#39;d expect</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">props</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{ props.name }&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Update on state.name change</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{ state.name }/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// will not update on name change and pass by value</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> { </span><span style=\"color: #005CC5\">name</span><span style=\"color: #24292E\"> } </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> state;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{ name }/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Still won&#39;t update even with the dynamic binding</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">StaticComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{ state.name }/&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you are very performance oriented you can also pass accessor functions instead of using Dynamic syntax on Function components. This will reduce overhead a little bit but requires that a function is always passed.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> ({ </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> }) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{ </span><span style=\"color: #6F42C1\">name</span><span style=\"color: #24292E\">() }&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> state.name}/&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"children\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#children\">#</a> Children</h2>\n<p>Solid handles JSX Children similar to React. A single child is a single value on <code>props.children</code> and multiple is an array.</p>\n<h2 id=\"lifecycle\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lifecycle\">#</a> Lifecycle</h2>\n<p>Solid's Components are the key part of its performance. Solid's approach is &quot;Vanishing&quot; Components made possible by lazy prop evaluation. Instead of evaluating prop expressions immediately and passing in values, execution is deferred until the prop is accessed in the child. In so we defer execution until the last moment typically right in the DOM bindings maximizing performance. This flattens the hierarchy and removes the need to maintain a tree of Components. Instead of lifecycles in Solid are tied to the lifecycle of the reactive system.</p>\n<h2 id=\"web-components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#web-components\">#</a> Web Components</h2>\n<p>Since change management is independent of code modularization, Solid Templates are sufficient as is to act as Components, or Solid fits easily into other Component structures like Web Components.</p>\n<p><a href=\"https://github.com/ryansolid/solid/tree/master/packages/solid-element\">Solid Element</a> Provides an out of the box solution for wrapping your Solid Components as Custom Elements.</p>\n</section><section class=\"mt-10\"><h1 id=\"context\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#context\">#</a> Context</h1>\n<p>Solid has Context API for dependency injection which comprises of <code>createContext</code>, <code>Provider</code> control flow, and <code>useContext</code>. <code>createContext</code> lets you create the Context Object. When Solid renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree. If there is not provider above it will use the default value.</p>\n<p>Example below using Solid's own state mechanism to create a global store that wraps the whole app. Notice that the <code>Nested</code> component can access the counter without it being passed down via Props. While you could arguably use a singleton, this pattern gives clear ownership and allows hierarchical store contexts. You could use stores in this case for common data concerns that could appear multiple times on the same page like pagination, scrolling, etc, and have child components that know how to interact with their associated stores. This is a very powerful pattern as you compose patterns that wrap Solid's primitives and Context to create reusable injectable multi component driving modules.</p>\n<blockquote>\n<p><strong>For React Users:</strong> Although the API surface is the same, Solid's Context API can house just about anything. The reactivity comes from the primitives not from the top down hierarchy. This means that it isn't the parent components driving reactivity, so there aren't any performance concerns, but context only updates when the primitives you use update.</p>\n</blockquote>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A737D\">// counter-context.js</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createState, createContext } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">CounterContext</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createContext</span><span style=\"color: #24292E\">([{ count: </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\"> }, {}]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">CounterProvider</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">props</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ count: props.count </span><span style=\"color: #D73A49\">||</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\"> }),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">store</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      state,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6F42C1\">increment</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;count&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> c </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        </span><span style=\"color: #6F42C1\">decrement</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;count&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> c </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">CounterContext.Provider</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">value</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{store}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      {props.children}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">CounterContext.Provider</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// index.js</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { render } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js/dom&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { CounterProvider } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;./counter-context&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> App </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;./app&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">render</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// start counter at 2</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">CounterProvider</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">count</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">App</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">CounterProvider</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  ),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  document.</span><span style=\"color: #6F42C1\">getElementById</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;app&quot;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// app.js</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> Nested </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;./nested&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">default</span><span style=\"color: #E36209\"> </span><span style=\"color: #24292E\">const</span><span style=\"color: #E36209\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #E36209\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #E36209\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E36209\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;Welcome to Counter App&lt;/</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Nested</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #E36209\">&lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #E36209\">)</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// nested.js</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { useContext } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { CounterContext } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;./counter-context&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">default</span><span style=\"color: #E36209\"> </span><span style=\"color: #24292E\">const</span><span style=\"color: #E36209\"> </span><span style=\"color: #6F42C1\">Nested</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #E36209\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #E36209\"> </span><span style=\"color: #24292E\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">counter</span><span style=\"color: #24292E\">, { </span><span style=\"color: #005CC5\">increment</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">decrement</span><span style=\"color: #24292E\"> }] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useContext</span><span style=\"color: #24292E\">(CounterContext);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{counter.count}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onclick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{increment}&gt;+&lt;/</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onclick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{decrement}&gt;-&lt;/</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span></code></pre>\n</section><section class=\"mt-10\"><h1 id=\"reactivity\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reactivity\">#</a> Reactivity</h1>\n<h2 id=\"signals\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#signals\">#</a> Signals</h2>\n<p>Signals are the glue that hold the library together. They often are invisible but interact in very powerful ways that you get more familiar with Solid they unlock a lot of potential.</p>\n<p>Signals are a simple primitive that contain values that change over time. With Signals you can track sorts of changes from various sources in your applications. Solid's State object is built from a Proxy over a tree of Signals. You can update a Signal manually or from any Async source.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createSignal, onCleanup } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useTick</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">delay</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">getCount</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setCount</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">handle</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">setInterval</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setCount</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">getCount</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">), delay);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">onCleanup</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">clearInterval</span><span style=\"color: #24292E\">(handle));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> getCount;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"accessors-reactive-scope\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#accessors-reactive-scope\">#</a> Accessors Reactive Scope</h2>\n<p>Signals are special functions that when executed return their value. In addition they are trackable when executed under a reactive scope. This means that when their value read (executed) the currently executing reactive scope is now subscribed to the Signal and will re-execute whenever the Signal is updated.</p>\n<p>This mechanism is based on executing function scope so Signals reads can be composed and nested as many levels as desired. By wrapping a Signal read in a thunk <code>() =&gt; signal()</code> you have effectively created a higher-order signal that can be tracked as well. These accessors are just functions that can be tracked and return a value. No additional primitive or method is needed for them to work as Signals in their own right. However, you need another primitive to make Signals reactive:</p>\n<h2 id=\"computations\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#computations\">#</a> Computations</h2>\n<p>An computation is calculation over a function execution that automatically dynamically tracks any child signals. A computation goes through a cycle on execution where it releases its previous execution's dependencies, then executes grabbing the current dependencies.</p>\n<p>There are 2 main computations used by Solid: Effects which produce side effects, and Memos which are pure and designed to cache values until their reactivity forces re-evaluation.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createSignal, createEffect, createMemo } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">count</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setCount</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">doubleCount</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createMemo</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">count</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">createEffect</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">doubleCount</span><span style=\"color: #24292E\">()));</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setCount</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">count</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// 2</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// 4</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Keep in mind memos are only necessary if you wish to prevent re-evaluation when the value is pulled. Useful for expensive operations like DOM Node creation. Any example with a memo could also just be a function and effectively be the same without caching.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createSignal, createEffect } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">count</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setCount</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">doubleCount</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">count</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">/</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// No memo still works</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">createEffect</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">doubleCount</span><span style=\"color: #24292E\">()));</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setCount</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">count</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// 2</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// 4</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Memos also pass the previous value on each execution. This is useful for reducing operations (obligatory Redux in a couple lines example):</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">reducer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">action</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {}) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">switch</span><span style=\"color: #24292E\"> (action.type) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">case</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;LIST/ADD&quot;</span><span style=\"color: #24292E\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> { </span><span style=\"color: #D73A49\">...</span><span style=\"color: #24292E\">state, list: [</span><span style=\"color: #D73A49\">...</span><span style=\"color: #24292E\">state.list, action.payload] };</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">default</span><span style=\"color: #24292E\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> state;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// redux</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">getAction</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">dispatch</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">getStore</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createMemo</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">state</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">reducer</span><span style=\"color: #24292E\">(state, </span><span style=\"color: #6F42C1\">getAction</span><span style=\"color: #24292E\">()), { list: [] });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// subscribe and dispatch</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">createEffect</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">getStore</span><span style=\"color: #24292E\">().list));</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">dispatch</span><span style=\"color: #24292E\">({ type: </span><span style=\"color: #032F62\">&quot;LIST/ADD&quot;</span><span style=\"color: #24292E\">, payload: { id: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&quot;New Value&quot;</span><span style=\"color: #24292E\"> } });</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That being said there are plenty of reasons to use actual Redux.</p>\n<h2 id=\"rendering-with-reactivity\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering-with-reactivity\">#</a> Rendering with Reactivity</h2>\n<p>Solid makes use of it's reactive lifecycle to render the DOM. Creating and updating the DOM are seen as side effects of the reactive system and the tree is constructed by nesting Computations wrapping each binding and dynamic insert with one. You can view its execution like a stack where only the top-most computation is tracking at a given time, and so is the only one tracking the reactive change. Since attributes and inserts are tracked separately from the parent scope responsible for rendering a Component in the first place, updates to attributes or downstream nodes do not require the parent to re-evaluate. If the parent ever were it would wipe out all the children and start again. However the only thing that would make that happen is if something upstream changed, like the condition that made it render in the first place. In so when in the synchronous execution path you are always under a reactive context even if it is not tracking (like a <code>root</code>).</p>\n<h2 id=\"cleanup\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cleanup\">#</a> Cleanup</h2>\n<p>While Solid does not have Component lifecyles in the traditional sense, it still needs to handle cleaning up subscriptions. The way Solid works is that each nested computation is owned by it's parent reactive scope. In so all commputations must be created as part of a root. This detail is generally taken care of for you as the <code>render</code> method contains a <code>createRoot</code> call. But it can be called directly for cases where it makes sense.</p>\n<p>Once inside a scope whenever the scope is re-evaluated or disposed of itself, all children computations will be disposed. In addition you can register a <code>onCleanup</code> method that will execute as part of this disposal cycle.</p>\n<p>Note: _Solid's graph is synchronously executed so any starting point that isn't caused by a reactive update (perhaps an asynchronous entry) should start from its own root. There are other ways to handle asynchronicity as shown in the <a href=\"./supense.md\">Suspense Docs</a></p>\n<h2 id=\"composition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#composition\">#</a> Composition</h2>\n<p>State and Signals combine wonderfully as wrapping a state selector in a function instantly makes it reactive accessor. They encourage composing more sophisticated patterns to fit developer need.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A737D\">// deep reconciled immutable reducer</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useReducer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">reducer</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">init</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">(init),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    [</span><span style=\"color: #005CC5\">getAction</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">dispatch</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">createDependentEffect</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    (</span><span style=\"color: #E36209\">prevState</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> init) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> action, next;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">(action </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">getAction</span><span style=\"color: #24292E\">())) </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> prevState;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      next </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">reducer</span><span style=\"color: #24292E\">(prevState, action);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">reconcile</span><span style=\"color: #24292E\">(next));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> next;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    },</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    [getAction]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> [state, dispatch];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"operators\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#operators\">#</a> Operators</h2>\n<p>Solid provides a couple simple operators to help construct more complicated behaviors. They work both as standalone and curried Functional Programming form, where they return a function that takes the input accessor. They are not computations themselves and are designed to be passed into a computation. The possibilities of operators are endless. Solid only ships with a base array mapping one:</p>\n<h3 id=\"maparray(()-%3D%3E-any%5B%5D%2C-iterator%3A-(item%2C-index)-%3D%3E-any%2C-options%3A-%7B-fallback%3A-()-%3D%3E-any-%7D)%3A-()-%3D%3E-any%5B%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#maparray(()-%3D%3E-any%5B%5D%2C-iterator%3A-(item%2C-index)-%3D%3E-any%2C-options%3A-%7B-fallback%3A-()-%3D%3E-any-%7D)%3A-()-%3D%3E-any%5B%5D\">#</a> <code>mapArray(() =&gt; any[], iterator: (item, index) =&gt; any, options: { fallback: () =&gt; any }): () =&gt; any[]</code></h3>\n<h3 id=\"maparray(iterator%3A-(item%2C-index)-%3D%3E-any%2C-options%3A-%7B-fallback%3A-()-%3D%3E-any-%7D)%3A-(signal)-%3D%3E-()-%3D%3E-any%5B%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#maparray(iterator%3A-(item%2C-index)-%3D%3E-any%2C-options%3A-%7B-fallback%3A-()-%3D%3E-any-%7D)%3A-(signal)-%3D%3E-()-%3D%3E-any%5B%5D\">#</a> <code>mapArray(iterator: (item, index) =&gt; any, options: { fallback: () =&gt; any }): (signal) =&gt; () =&gt; any[]</code></h3>\n<p>The <code>solid-rx</code> package contains more operators that can be used with Solid.</p>\n</section><section class=\"mt-10\"><h1 id=\"rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h1>\n<p>Solid supports templating in 3 forms JSX, Tagged Template Literals, and Solid's HyperScript variant. Although JSX is the predominate form. Why? JSX is a great DSL made for compilation. It has clear syntax, supports TypeScript, works with Babel, supports other tooling like Code Syntax Highlighting and Prettier. It was only pragmatic to use a tool that basically gives you that all for free. As a compiled solution it provides great DX. Why struggle with custom Syntax DSLs when you can use one so widely supported?</p>\n<p>Still there is some confusion as to what JSX is and is not. JSX is an XML-like syntax extension to EcmaScript (<a href=\"https://facebook.github.io/jsx/\">https://facebook.github.io/jsx/</a>). It is not a language or runtime. Those can be refered to as HyperScript. So while Solid's JSX and might resemble React it by no means works like React and there should be no illusions that a JSX library will just work with Solid. Afterall, there are no JSX libraries, as they all work without JSX, only HyperScript or React ones.</p>\n<h2 id=\"jsx-compilation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#jsx-compilation\">#</a> JSX Compilation</h2>\n<p>Rendering involves precompilation of JSX templates into optimized native js code. The JSX code constructs:</p>\n<ul>\n<li>Template DOM elements which are cloned on each instantiation</li>\n<li>A series of reference declarations using only firstChild and nextSibling</li>\n<li>Fine grained computations to update the created elements.</li>\n</ul>\n<p>This approach both is more performant and produces less code then creating each element one by one with document.createElement.</p>\n<p>More documentation is available at: <a href=\"https://github.com/ryansolid/dom-expressions/tree/master/packages/babel-plugin-jsx-dom-expressions\">babel-plugin-jsx-dom-expressions</a></p>\n<h3 id=\"note-on-attribute-binding-order\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#note-on-attribute-binding-order\">#</a> Note on attribute binding order</h3>\n<p>Static attributes are created as part of the html template together. Expressions fixed and dynamic are applied afterwards in JSX binding order. While this is fine for most DOM elements there are some like input elements with <code>type='range'</code> where order matters. Keep this in mind when binding elements.</p>\n<h3 id=\"note-on-forms\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#note-on-forms\">#</a> Note on forms</h3>\n<p>Solid expects the UI to reflect its state. This means updating state on form actions. Failing to do so can cause unexpected behavior as setting state to the same value will not trigger an update even if the DOM value has diverged. In general it is recommended you handle forms in this &quot;controlled&quot; manner.</p>\n<p>In some cases it might make sense to manage the form state outside of Solid via refs. These &quot;uncontrolled&quot; forms can also work. Just be conscious of the difference as mixing approaches can lead to unexpected results.</p>\n<h2 id=\"entry\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#entry\">#</a> Entry</h2>\n<p>The easiest way to mount Solid is to import render from 'solid-js/dom'. <code>render</code> takes a function as the first argument and the mounting container for the second and returns a disposal method. This <code>render</code> automatically creates the reactive root and handles rendering into the mount container. Solid assumes full control of the mount container so use an element with no children.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { render } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js/dom&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">render</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">App</span><span style=\"color: #24292E\"> /&gt;, document.</span><span style=\"color: #6F42C1\">getElementById</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;main&quot;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"events\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#events\">#</a> Events</h2>\n<p><code>on_____</code> handlers are event handlers expecting a function. The compiler will delegate events where possible (Events that can be composed and bubble) else it will fall back to Level 1 spec &quot;on_____&quot; events.</p>\n<p>If you wish to bind a value to events pass an array handler instead and the second argument will be passed to your event handler as the first argument (the event will be second). This can improve performance in large lists when the event is delegated.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">handler</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">itemId</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">e</span><span style=\"color: #24292E\">) {</span><span style=\"color: #6A737D\">/*...*/</span><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">each</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.list}&gt;{</span><span style=\"color: #E36209\">item</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{[handler, item.id]} /&gt;}&lt;/</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This delegation solution works with Web Components and the Shadow DOM as well if the events are composed. That limits the list to custom events and most UA UI events like onClick, onKeyUp, onKeyDown, onDblClick, onInput, onMouseDown, onMouseUp, etc..</p>\n<p>To allow for casing to work all custom events should follow the all lowercase convention of native events. If you want to use different event convention (or use Level 3 Events &quot;addEventListener&quot;) use the &quot;on&quot; or &quot;onCapture&quot; binding.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">on</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{{ </span><span style=\"color: #032F62\">&quot;Weird-Event&quot;</span><span style=\"color: #24292E\">: </span><span style=\"color: #E36209\">e</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">alert</span><span style=\"color: #24292E\">(e.detail) }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"control-flow\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#control-flow\">#</a> Control Flow</h2>\n<p>While you could use a map function for loops they aren't optimized. While perhaps not as big of a deal in the VDOM since Solid is designed to not execute all the code from top down repeatedly we rely on techniques like isolated contexts and memoization. This is complicated and requires special methods.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">each</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.users} </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;No Users&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {</span><span style=\"color: #E36209\">user</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{user.firstName}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{user.stars </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Verified&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    )}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Control flows can be imported from <code>solid-js/dom</code> but as a convenience the compiler will automatically import them.</p>\n<h3 id=\"for\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#for\">#</a> For</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">each</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.list} </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Loading...&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  {</span><span style=\"color: #E36209\">item</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{item}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"show\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#show\">#</a> Show</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.count </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">} </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Loading...&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;My Content&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"switch%2Fmatch\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#switch%2Fmatch\">#</a> Switch/Match</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Not Found&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.route </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;home&quot;</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Home</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.route </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;settings&quot;</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Settings</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"portal\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#portal\">#</a> Portal</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">Portal</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">mount</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{document.</span><span style=\"color: #6F42C1\">getElementById</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;modal&quot;</span><span style=\"color: #24292E\">)}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;My Content&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">Portal</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"suspense\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#suspense\">#</a> Suspense</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Loading...&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">AsyncComponent</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"suspenselist\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#suspenselist\">#</a> SuspenseList</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">SuspenseList</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">revealOrder</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&quot;forwards&quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">tail</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&quot;collapsed&quot;</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">ProfileDetails</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">user</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{resource.user} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;Loading posts...&lt;/</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">ProfileTimeline</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">posts</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{resource.posts} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;Loading fun facts...&lt;/</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">ProfileTrivia</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">trivia</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{resource.trivia} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">SuspenseList</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><em>Note these are designed to handle more complex scenarios like Component insertions. Child expressions are inert unless you return a function. For simple dynamic expressions use boolean or ternary operator.</em></p>\n<h2 id=\"refs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#refs\">#</a> Refs</h2>\n<p>Refs come in 2 flavours. <code>ref</code> which directly assigns the value, and which calls a callback <code>(ref) =&gt; void</code> with the reference.</p>\n<h3 id=\"ref\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ref\">#</a> <code>ref</code></h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">MyComp</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> myDiv;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">setTimeout</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(myDiv.clientWidth));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ref</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{myDiv} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>On a native intrinsic element as the element executes the provided variable will be assigned. This form usually is used in combination with <code>setTimeout</code> (same timing as React's <code>useEffect</code>) or <code>afterEffects</code>(same timing as React's <code>useLayoutEffect</code>) to do work after the component has mounted. Like do a DOM measurement or attach DOM plugins etc...</p>\n<p>When applied to a Component it acts similarly but also passes a prop in that is a function that is expected to be called with a ref to forward the ref (more on this in the next section):</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> myDiv;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">setTimeout</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(myDiv.clientWidth));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">MyComp</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ref</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{myDiv} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Callback form expects a function like React's callback refs. Original use case is like described above:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">MyComp</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">props</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ref</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{props.ref} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> myDiv;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">setTimeout</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(myDiv.clientWidth));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">MyComp</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ref</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{myDiv} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You can also apply <code>ref</code> on a Component:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">MyComp</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ref</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #E36209\">ref</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(ref.clientWidth)} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This just passes the function through as <code>props.ref</code> again and work similar to the example above except it would run synchronously during render. You can use this to chain as many <code>ref</code> up a Component chain as you wish.</p>\n<h2 id=\"server-side-rendering-(experimental)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#server-side-rendering-(experimental)\">#</a> Server Side Rendering (Experimental)</h2>\n<p>See <a href=\"https://github.com/ryansolid/solid/blob/master/packages/solid-ssr\">solid-ssr</a></p>\n</section><section class=\"mt-10\"><h1 id=\"state\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#state\">#</a> State</h1>\n<p>State is a core work horse of Solid. It is composed of many on demand reactive signals through a proxy object. The advantage is that it is automatically reactive and resembles data structures you may already have. It removes the classic issues with fine-grained reactivity around mapping reactive structures and serializing JSON. And as a structure itself it can be diffed allowing interaction with immutable data and snapshots.</p>\n<p>While this state concept is heavily borrowed from React and it's API from ImmutableJS, there is a key difference in the role it plays here. In React you keep things simple in your state and the whole library is about reconciling DOM rendering. Here you can almost view the State object as the target, the thing that is diffed and maintained. The DOM rendering is actually quite simple to the point the compiled source exposes the vast majority of the DOM manipulations, where you can easily drop a breakpoint.</p>\n<h3 id=\"createstate(object)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstate(object)\">#</a> <code>createState(object)</code></h3>\n<p>Initializes with object value and returns an array where the first index is the state object and the second is the setState method.</p>\n<h3 id=\"setstate(changes)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setstate(changes)\">#</a> <code>setState(changes)</code></h3>\n<h3 id=\"setstate(...path%2C-changes)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setstate(...path%2C-changes)\">#</a> <code>setState(...path, changes)</code></h3>\n<p>This merges the changes into the path on the state object. All changes made in a single setState command are applied syncronously (ie all changes see each other at the same time). Changes can take the form of function that passes previous state and returns new state or a value. Objects are always merged.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ firstName: </span><span style=\"color: #032F62\">&#39;John&#39;</span><span style=\"color: #24292E\">, lastName: </span><span style=\"color: #032F62\">&#39;Miller&#39;</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ firstName: </span><span style=\"color: #032F62\">&#39;Johnny&#39;</span><span style=\"color: #24292E\">, middleName: </span><span style=\"color: #032F62\">&#39;Lee&#39;</span><span style=\"color: #24292E\"> })</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// ({ firstName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Miller&#39; })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">state</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> ({ preferredName: state.firstName, lastName: </span><span style=\"color: #032F62\">&#39;Milner&#39;</span><span style=\"color: #24292E\"> }));</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// ({ firstName: &#39;Johnny&#39;, preferredName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Milner&#39; })</span></span>\n<span class=\"line\"></span></code></pre>\n<p>setState also supports nested setting where you can indicate the path to the change. When nested the state you are updating may be other non Object values. Objects are still merged but other values (including Arrays) are replaced.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  counter: </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  list: [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">23</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Birds&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">27</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Fish&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;counter&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> c </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;list&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">l</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> [</span><span style=\"color: #D73A49\">...</span><span style=\"color: #24292E\">l, {id: </span><span style=\"color: #005CC5\">43</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Marsupials&#39;</span><span style=\"color: #24292E\">}]);</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;list&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&#39;read&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   counter: 3,</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 27, title: &#39;Fish&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 43, title: &#39;Marsupials&#39;, read: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Path can be string keys, array of keys, iterating objects ({from, to, by}), or filter functions. This gives incredible expressive power to describe state changes.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  todos: [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { task: </span><span style=\"color: #032F62\">&#39;Finish work&#39;</span><span style=\"color: #24292E\">, completed: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { task: </span><span style=\"color: #032F62\">&#39;Go grocery shopping&#39;</span><span style=\"color: #24292E\">, completed: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { task: </span><span style=\"color: #032F62\">&#39;Make dinner&#39;</span><span style=\"color: #24292E\">, completed: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, [</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">], </span><span style=\"color: #032F62\">&#39;completed&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, { from: </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, to: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> }, </span><span style=\"color: #032F62\">&#39;completed&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">c);</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">todo</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> todo.completed, </span><span style=\"color: #032F62\">&#39;task&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">t</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> t </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;!&#39;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, {}, </span><span style=\"color: #E36209\">todo</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> ({ marked: </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">, completed: </span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">todo.completed }))</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: true, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Additionally supports a batched mutable form when the setter does not return a value..</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  counter: </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  list: [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">23</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Birds&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">27</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Fish&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">s</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  s.counter </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> s.counter </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  s.list[</span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">].title </span><span style=\"color: #D73A49\">+=</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;!&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   counter: 6,</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 27, title: &#39;Fish!&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"modifiers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#modifiers\">#</a> Modifiers</h2>\n<p>This library also provides a state setter modifiers which can optionally be included to provide different behavior when setting state.</p>\n<h3 id=\"reconcile(value%2C-options)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reconcile(value%2C-options)\">#</a> <code>reconcile(value, options)</code></h3>\n<p>This can be used to do deep diffs by applying the changes from a new State value. This is useful when pulling in immutable data trees from stores to ensure the least amount of mutations to your state. It can also be used to replace the all keys on the base state object if no path is provided as it does both positive and negative diff.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;users&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #6F42C1\">reconcile</span><span style=\"color: #24292E\">(store.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;users&quot;</span><span style=\"color: #24292E\">)));</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you pass as array you can configure the diff algorithm with an options object:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;users&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #6F42C1\">reconcile</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  store.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;users&#39;</span><span style=\"color: #24292E\">),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    key: </span><span style=\"color: #032F62\">&#39;_id&#39;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6A737D\">// does a keyed comparison - default: &#39;id&#39;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    merge: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> </span><span style=\"color: #6A737D\">//  overwrites rather than detects array position changes when not keyed - default: false</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">))</span></span>\n<span class=\"line\"></span></code></pre>\n</section><section class=\"mt-10\"><h1 id=\"storybook\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#storybook\">#</a> Storybook</h1>\n<p>This is the guide for setting up <a href=\"https://storybook.js.org/\">storybook</a> for solid components.</p>\n<h3 id=\"step-1%3A-install-storybook%2Fhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#step-1%3A-install-storybook%2Fhtml\">#</a> Step 1: Install storybook/html</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> npx -p @storybook/cli sb init --type html</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"step-2%3A-add-babel-preset-solid-to-.babelrc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#step-2%3A-add-babel-preset-solid-to-.babelrc\">#</a> Step 2: Add babel-preset-solid to .babelrc</h3>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">&quot;presets&quot;</span><span style=\"color: #24292E\">: [</span><span style=\"color: #032F62\">&quot;solid&quot;</span><span style=\"color: #24292E\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"step-3%3A-update-.storybook%2Fconfig.js-to-setup-solid-root-for-each-story\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#step-3%3A-update-.storybook%2Fconfig.js-to-setup-solid-root-for-each-story\">#</a> Step 3: Update .storybook/config.js to setup solid Root for each story</h3>\n<p>Replace the auto generated config with this:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { addDecorator, configure } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;@storybook/html&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createRoot } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// automatically import all files ending in *.stories.js</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">configure</span><span style=\"color: #24292E\">(require.</span><span style=\"color: #6F42C1\">context</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;../stories&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">,</span><span style=\"color: #032F62\"> /</span><span style=\"color: #22863A; font-weight: bold\">\\.</span><span style=\"color: #032F62\">stories</span><span style=\"color: #22863A; font-weight: bold\">\\.</span><span style=\"color: #032F62\">js</span><span style=\"color: #D73A49\">$</span><span style=\"color: #032F62\">/</span><span style=\"color: #24292E\">), </span><span style=\"color: #005CC5\">module</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">addDecorator</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">story</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createRoot</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">story</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"step-4%3A-update-stories%2Findex.stories.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#step-4%3A-update-stories%2Findex.stories.js\">#</a> Step 4: Update stories/index.stories.js</h3>\n<p>Replace the auto generated html story with this:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { console } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;global&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createState, onCleanup } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">default</span><span style=\"color: #E36209\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E36209\">  </span><span style=\"color: #24292E\">title: </span><span style=\"color: #032F62\">&quot;Demo&quot;</span></span>\n<span class=\"line\"><span style=\"color: #E36209\">}</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">heading</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #E36209\">h1</span><span style=\"color: #24292E\">&gt;Hello World</span><span style=\"color: #D73A49\">&lt;/</span><span style=\"color: #24292E\">h1</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">button</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #E36209\">button</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">onClick</span><span style=\"color: #24292E\">={</span><span style=\"color: #E36209\">e</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(e)}&gt;Hello Button</span><span style=\"color: #D73A49\">&lt;/</span><span style=\"color: #24292E\">button</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Counter</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ count: </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">timer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">setInterval</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ count: state.count </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }, </span><span style=\"color: #005CC5\">1000</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">onCleanup</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">clearInterval</span><span style=\"color: #24292E\">(timer);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #E36209\">div</span><span style=\"color: #24292E\">&gt;{state.count}</span><span style=\"color: #D73A49\">&lt;/</span><span style=\"color: #24292E\">div</span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">counter</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #E36209\">Counter</span><span style=\"color: #24292E\"> /&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"step-5%3A-npm-run-storybook\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#step-5%3A-npm-run-storybook\">#</a> Step 5: npm run storybook</h3>\n<p>Storybook will be started at port 6006</p>\n</section><section class=\"mt-10\"><h1 id=\"styling\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#styling\">#</a> Styling</h1>\n<p>Styling is not any different in Solid than most libraries. You can use CSS inserted in the head of your document. Or you can use CSS Modules with your Webpack or Rollup config, you can use preprocessor like Sass or PostCSS. Libraries like Bootstrap or Tailwind are compatible. Solid also supports generic CSS in JS libraries like Emotion. In addition Solid has 2 libraries to support some more common CSS in JS patterns with <a href=\"https://github.com/ryansolid/solid/blob/master/packages/solid-styled-components\">solid-styled-components</a>, a Styled Component library that works with Solid's Component system and <a href=\"https://github.com/ryansolid/solid/blob/master/packages/solid-styled-jsx\">solid-styled-jsx</a> a wrapper on Zeit's Styled JSX to work with Solid.</p>\n<p>Styled Components:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { styled } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-styled-components&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Btn</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">styled</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;button&quot;</span><span style=\"color: #24292E\">)</span><span style=\"color: #032F62\">`</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">  border-radius: ${</span><span style=\"color: #005CC5\">props</span><span style=\"color: #032F62\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #032F62\"> </span><span style=\"color: #24292E\">props</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">size</span><span style=\"color: #032F62\">}px;</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">`</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">Btn</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">size</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #005CC5\">20</span><span style=\"color: #24292E\">} /&gt;;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Styled JSX:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Button</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">isLoggedIn</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">login</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">className</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&quot;button&quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">login</span><span style=\"color: #24292E\">(</span><span style=\"color: #D73A49\">!</span><span style=\"color: #6F42C1\">isLoggedIn</span><span style=\"color: #24292E\">())}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        {</span><span style=\"color: #6F42C1\">isLoggedIn</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">?</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Log Out&quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">:</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;Log In&quot;</span><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">style</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">jsx</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">dynamic</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        {</span><span style=\"color: #032F62\">`</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">          .button {</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">            background-color: ${</span><span style=\"color: #6F42C1\">isLoggedIn</span><span style=\"color: #032F62\">() </span><span style=\"color: #D73A49\">?</span><span style=\"color: #032F62\"> </span><span style=\"color: #032F62\">&quot;blue&quot;</span><span style=\"color: #032F62\"> </span><span style=\"color: #D73A49\">:</span><span style=\"color: #032F62\"> </span><span style=\"color: #032F62\">&quot;green&quot;};</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">            color: white;</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">            padding: 20px;</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">            margin: 10px;</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">          }</span></span>\n<span class=\"line\"><span style=\"color: #032F62\">        `</span><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">style</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"inline-styles\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#inline-styles\">#</a> Inline Styles</h2>\n<p>Solid supports both string styles and style objects (using style property form .. ie hyphenated not camel cased).</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">style</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #032F62\">`color: green; background-color: ${</span><span style=\"color: #24292E\">state</span><span style=\"color: #032F62\">.</span><span style=\"color: #24292E\">color</span><span style=\"color: #032F62\">}`</span><span style=\"color: #24292E\">} /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">style</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{{ color: </span><span style=\"color: #032F62\">&quot;green&quot;</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&quot;background-color&quot;</span><span style=\"color: #24292E\">: state.color }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This also means it can support stuff like CSS variables:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">style</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{{ </span><span style=\"color: #032F62\">&quot;--my-custom-color&quot;</span><span style=\"color: #24292E\">: state.themeColor }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><em>Note: The compiler automatically optimizes object form when declared inline unrolling any iteration.</em></p>\n<h2 id=\"classes\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#classes\">#</a> Classes</h2>\n<p>Solid supports declaring classes with both <code>className</code> and <code>class</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">className</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #032F62\">&quot;col-sm-6 col-lg-2&quot;</span><span style=\"color: #24292E\">} /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">class</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #032F62\">&quot;col-sm-6 col-lg-2&quot;</span><span style=\"color: #24292E\">} /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Solid also provides an additional binding for toggling multiple classes <code>classList</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">classList</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{{ active: state.active, editting: state.currentId </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> row.id }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n</section><section class=\"mt-10\"><h1 id=\"suspense\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#suspense\">#</a> Suspense</h1>\n<p>Suspense is an API designed to seamlessly integrate asynchronous processes into Solid's synchronous reactive system.</p>\n<h2 id=\"asynchronous-rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#asynchronous-rendering\">#</a> Asynchronous Rendering</h2>\n<p>In Solid all reactive nodes must be created as part of execution of another reactive node starting at the root node that is created in the <code>render</code> method. Even though the graph must be created synchronously updates to a particular node can be triggered asynchronously. Once a node is running more reactive nodes can be created. In so, rendering can be achieved piecewise as long as the next node is created as part of the current execution. This is essentially asynchronous rendering.</p>\n<blockquote>\n<p><strong>For React Users:</strong> Time splitting is trivial for a library like Solid since the primitives are already finer grained. While it is true there is always the cost of initial rendering, unlike React doing part of the work and then triggering an update to do the rest of the work doesn't cause the whole tree to reconcile again.</p>\n</blockquote>\n<p>A simple example of this would be something like this:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Deferred</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">props</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">resume</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setResume</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">setTimeout</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setResume</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">), </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #6F42C1\">resume</span><span style=\"color: #24292E\">()}&gt;{props.children}&lt;/</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// somewhere in a view</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">ComponentA</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">Deferred</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {</span><span style=\"color: #6A737D\">/* doesn&#39;t render right away */</span><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">ComponentA</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">Deferred</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/&gt;;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Solid does include a scheduler similar to React's Concurrent Mode scheduler which allows work to be scheduled in idle frames. The easiest way to leverage it is to use <code>createDeferred</code> which creates a memo that will only be read as the cpu is available.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">text</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setText</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;hello&quot;</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">deferredText</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createDeferred</span><span style=\"color: #24292E\">(text, { timeoutMs: </span><span style=\"color: #005CC5\">2000</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">className</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&quot;App&quot;</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      {</span><span style=\"color: #6A737D\">/* Keep passing the current text to the input */</span><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">input</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">value</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #6F42C1\">text</span><span style=\"color: #24292E\">()} </span><span style=\"color: #005CC5\">onChange</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{handleChange} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      ...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      {</span><span style=\"color: #6A737D\">/* But the list is allowed to &quot;lag behind&quot; when necessary */</span><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">MySlowList</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">text</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #6F42C1\">deferredText</span><span style=\"color: #24292E\">()} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"placeholders-%26-transitions\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#placeholders-%26-transitions\">#</a> Placeholders &amp; Transitions</h2>\n<p>But what if we don't control when the asynchronous action returns and we need to deal with potentially multiple asynchronous actions. This is where Suspense comes in. It inverts the control, so that the child can manage its asynchronous needs and the parent just sets the rules of how to display the fallback content that is shown as these processes complete. Unlike conditional control flow (like the <code>Deferred</code> component above) the children are not blocked and get execute their asynchronous actions triggering Suspense rather than pushing the responsibility on the parent. Suspense consists of 3 states:</p>\n<ul>\n<li>normal - This is when no asynchronous actions are being processed and the system is working as normal.</li>\n<li>suspended - This state is entered once asynchronous actions have started but before a delay has run out to show fallback content. In this state the previous content will continue to be visible.</li>\n<li>fallback - This is the fallback content (like a loading spinner) to show in place of the loading if the asynchronous actions have not completed by the time the delay has run out.</li>\n</ul>\n<p>Consider the simple case of switching between 3 tabs which have asynchronous loaded tabs. To use Suspense you need to use the <code>Suspense</code> Component to wrap the asynchronous activity.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createState } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { Suspense } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js/dom&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> })}&gt;Tab1&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\"> })}&gt;Tab2&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\"> })}&gt;Tab3&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">LoadingSpinner</span><span style=\"color: #24292E\"> /&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">}&gt;...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">}&gt;...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">}&gt;...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In this case if the tab hasn't loaded you will see a <code>LoadingSpinner</code> and as you switch you will see another <code>LoadingSpinner</code> as it moves in and out of suspended state.</p>\n<p>The power of Suspense is that deferring loading states a small amount perceptually make things feel like they are loading faster and smoother even if the app is slightly less responsive. The key to handling these deferred updates is to define a transition with <code>useTransition</code>. It returns a method to wrap state updates that can be deferred and an method that tracks whether the transition is currently active. When control flow is suspended it continues to show the current branch while rendering the next off screen. It is important to note that once suspense has triggered the onscreen content within this flow will no longer update.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createState, useTransition } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { Suspense } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js/dom&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> }),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6A737D\">// delay showing fallback for up to 500ms</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    [</span><span style=\"color: #005CC5\">isPending</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">startTransition</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useTransition</span><span style=\"color: #24292E\">({ timeoutMs: </span><span style=\"color: #005CC5\">500</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">disabled</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #6F42C1\">isPending</span><span style=\"color: #24292E\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">startTransition</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> }))}&gt;Tab1&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">startTransition</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\"> }))}&gt;Tab2&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">startTransition</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\"> }))}&gt;Tab3&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">LoadingSpinner</span><span style=\"color: #24292E\"> /&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">}&gt;...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">}&gt;...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">}&gt;...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p><strong>For React Users:</strong> Given the nature of Solid's Reactive system, the throw a promise approach React uses doesn't make sense here. React just re-runs that part of the tree again, whereas Solid cannot pickup from where it left off. Instead Solid's Suspense mechanism ties into the Context API. Like React it is the closest Suspense Component that handles the Suspense state. However, unlike React when in transition there is no way to update control flow suspended blocks. Either the value updates immediately or it is a new branch being rendered offscreen. In practice this is hardly noticeable difference as the parts of the screen not inside are unaffected, and generally when something is exiting the page it is intentional the end user doesn't interact with it.</p>\n</blockquote>\n<h2 id=\"code-splitting\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#code-splitting\">#</a> Code Splitting</h2>\n<p>The first use for using Suspense is lazy loading components. This easily allows the browser or bundlers like Webpack to code split. That way the page can be loaded with part of the JavaScript code and the rest can be loaded separately as needed. Solid's <code>lazy</code> takes the dynamic import of Component that is the default export of a module and turns it into a Component you can define in your JSX view. You can pass props and interact with it as if it were the Component you were importing itself. However, this Component doesn't render until its code has been asynchronously loaded and doesn't trigger loading until it is to be rendered.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { lazy } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">OtherComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">lazy</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;./OtherComponent&quot;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">MyComponent</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Loading...&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">OtherComponent</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There are lots of potential patterns for code splitting, but routing is a good start. For instance taking the example from the previous section, we can defer loading our Component to when the corresponding tab becomes active:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { Suspense } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js/dom&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ComponentA</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">lazy</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;./ComponentA&quot;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ComponentB</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">lazy</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;./ComponentB&quot;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">ComponentC</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">lazy</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&quot;./ComponentC&quot;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">App</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ activeTab: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">LoadingSpinner</span><span style=\"color: #24292E\"> /&gt;} </span><span style=\"color: #005CC5\">maxDuration</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #005CC5\">300</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">ComponentA</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">ComponentB</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.activeTab </span><span style=\"color: #D73A49\">===</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">ComponentC</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"data-loading\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#data-loading\">#</a> Data Loading</h2>\n<p>Solid ships with two resource containers to handle async loading. One is a signal created by <code>createResource</code> and the other a state object created by <code>createResourceState</code>.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createResource } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">fetchUser</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">id</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">fetch</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">`https://swapi.co/api/people/${</span><span style=\"color: #24292E\">id</span><span style=\"color: #032F62\">}/`</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">then</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">r</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> r.</span><span style=\"color: #6F42C1\">json</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">default</span><span style=\"color: #E36209\"> </span><span style=\"color: #24292E\">const</span><span style=\"color: #E36209\"> </span><span style=\"color: #6F42C1\">UserPanel</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #E36209\"> props </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #E36209\"> </span><span style=\"color: #24292E\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> [user, load] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createResource</span><span style=\"color: #24292E\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    isLoading;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">createEffect</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    isLoading </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">load</span><span style=\"color: #24292E\">(props.userId </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">fetchUser</span><span style=\"color: #24292E\">(props.userId));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #032F62\">&quot;Failed to load User&quot;</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #6F42C1\">isLoading</span><span style=\"color: #24292E\">()}&gt;Loading...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #6F42C1\">user</span><span style=\"color: #24292E\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;{</span><span style=\"color: #6F42C1\">user</span><span style=\"color: #24292E\">().name}&lt;/</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;Height: {</span><span style=\"color: #6F42C1\">user</span><span style=\"color: #24292E\">().height}&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;Mass: {</span><span style=\"color: #6F42C1\">user</span><span style=\"color: #24292E\">().mass}&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;Birth Year: {</span><span style=\"color: #6F42C1\">user</span><span style=\"color: #24292E\">().birthYear}&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createResourceState } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&quot;solid-js&quot;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">fetchUser</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">id</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">fetch</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">`https://swapi.co/api/people/${</span><span style=\"color: #24292E\">id</span><span style=\"color: #032F62\">}/`</span><span style=\"color: #24292E\">).</span><span style=\"color: #6F42C1\">then</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">r</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> r.</span><span style=\"color: #6F42C1\">json</span><span style=\"color: #24292E\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">default</span><span style=\"color: #E36209\"> </span><span style=\"color: #24292E\">const</span><span style=\"color: #E36209\"> </span><span style=\"color: #6F42C1\">UserPanel</span><span style=\"color: #E36209\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #E36209\"> props </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #E36209\"> </span><span style=\"color: #24292E\">{</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> [user, load] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createResourceState</span><span style=\"color: #24292E\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    loading;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">createEffect</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    loading </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">load</span><span style=\"color: #24292E\">({ user: props.userId </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">fetchUser</span><span style=\"color: #24292E\">(props.userId) });</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #032F62\">&quot;Failed to load User&quot;</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{loading.user}&gt;Loading...&lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.user}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;{state.user.name}&lt;/</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;Height: {state.user.height}&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;Mass: {state.user.mass}&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">          &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;Birth Year: {state.user.birthYear}&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Match</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">Switch</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>These examples handle the different loading states. However, you can expand this example to use Suspense instead by wrapping with the <code>Suspense</code> Component.</p>\n<blockquote>\n<p><strong>For React Users:</strong> At the time of writing this React has not completely settled how their Data Fetching API will look. Solid ships with this feature today, and it might differ from what React ultimately lands on.</p>\n</blockquote>\n<h2 id=\"render-as-you-fetch\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#render-as-you-fetch\">#</a> Render as you Fetch</h2>\n<p>It is important to note that Suspense is tracked based on data requirements of the the reactive graph not the fact data is being fetched. Suspense is inacted when a child of a Suspense Component accesses a Resource not when the fetch occurs. In so, it is possible to start loading the Component data and lazy load the Component itself at the same time, instead of waiting for the Component to load to start loading the data.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A737D\">// start loading data before any part of the page is executed.</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">load</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createResourceState</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">load</span><span style=\"color: #24292E\">({ user: </span><span style=\"color: #6F42C1\">fetchUser</span><span style=\"color: #24292E\">(), posts: </span><span style=\"color: #6F42C1\">fetchPosts</span><span style=\"color: #24292E\">() });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ProfilePage</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;Loading profile...&lt;/</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">ProfileDetails</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;Loading posts...&lt;/</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">ProfileTimeline</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ProfileDetails</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6A737D\">// Try to read user info, although it might not have loaded yet</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;{state.user </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> state.user.name}&lt;/</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ProfileTimeline</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6A737D\">// Try to read posts, although they might not have loaded yet</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">each</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{state.posts}&gt;{</span><span style=\"color: #E36209\">post</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">key</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{post.id}&gt;{post.text}&lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;}&lt;/</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">render</span><span style=\"color: #24292E\">(ProfilePage, document.body);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"coordinating-suspense-components-with-suspenselist-(experimental)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#coordinating-suspense-components-with-suspenselist-(experimental)\">#</a> Coordinating Suspense Components with SuspenseList (Experimental)</h2>\n<p>Sometimes you have multiple <code>Suspense</code> Components you wish to coordinate. Sure you could put everything under a single <code>Suspense</code> but that limits us to a single loading behavior. A single fallback state and everything always needs to wait until the last thing is loaded. Instead we introduce the <code>SuspenseList</code> Component to coordinate. Consider:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">ProfilePage</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">props</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">ProfileDetails</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;Loading posts...&lt;/</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">ProfileTimeline</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">feed</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{props.feed} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;Loading fun facts...&lt;/</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">ProfileTrivia</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">facts</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{props.facts} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  );</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If we wrap this with a <code>SuspenseList</code> configured with <code>revealOrder</code> of <code>forwards</code> they will render in the order they appear in the tree regardless of the order they load. This reduces page jumping around. You can set <code>revealOrder</code> to <code>backwards</code> and <code>together</code> as well, which reverse this order, or wait for all Suspense Components to load respectively. In addition there is a <code>tail</code> option that can be set to <code>hidden</code> or <code>collapsed</code>. This overrides the default behavior of showing all fallbacks, with either showing none or showing the next one in the direction set by <code>revealOrder</code>.</p>\n<p>A <code>SuspenseList</code> can contain other <code>SuspenseList</code>'s to create flowing tables or grids etc.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">SuspenseList</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">revealOrder</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&quot;forwards&quot;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">tail</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&quot;collapsed&quot;</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">ProfileDetails</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;Loading posts...&lt;/</span><span style=\"color: #22863A\">h1</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">ProfileTimeline</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">feed</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{props.feed} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{&lt;</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;Loading fun facts...&lt;/</span><span style=\"color: #22863A\">h2</span><span style=\"color: #24292E\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">ProfileTrivia</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">facts</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{props.facts} /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">Suspense</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">SuspenseList</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p><strong>For React Users:</strong> Again this works a bit different than its React counterpart as it uses the Context API. In so nesting Suspense Components are perfectly fine. However, do not put them under dynamic areas like control flows as order is based on execution so conditional rendering can cause unpredictable behavior. Also unlike the current Suspense implication even if you are not seeing the &quot;next&quot; Suspense element they are all evaluated immediately on render. This unblocking behavior allows further downstream evaluation that currently does not happen in React.</p>\n</blockquote>\n</section><section class=\"mt-10\"><h1 id=\"help!\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#help!\">#</a> Help!</h1>\n<h2 id=\"reactivity-is-not-working\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reactivity-is-not-working\">#</a> Reactivity is not working</h2>\n<ul>\n<li>If you application has duplicate instances of the <code>solid-js</code> package inside <code>node_modules</code>, this can cause reactivity to break.\n<ul>\n<li>This can happen when you've <code>npm link</code>ed dependencies into your project.\n<ul>\n<li>If you're using Webpack with <code>babel-preset-solid</code>, you may have luck fixing the issue with using the  <a href=\"https://github.com/webpack/webpack/issues/985#issuecomment-260230782\"><code>RootMostResolvePlugin</code></a></li>\n<li>If you're using Node.js <code>require</code> in Electron (for example), you'll need to write a Require hook (see the <code>pirates</code> package, for example) to make it import the root-most version of <code>solid-js</code>. (I'm not sure if such a hook already exists).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</section>",
  "body": "A lot of bug fixes, and introduction of string based SSR.\r\nBreaking Changes:\r\n* Removal of `forwardRef`. Value and function handled by just `ref`.\r\n* Change to how TypeScript is managed. Brought all JSX types inside the repo, and improved Component typing.\r\n* Changed default renderer in `solid-ssr` to string renderer.\r\n* Change inline styles to use `setProperty` and hyphenated or camelCase.\r\n\r\nLots of small bug fixes."
}