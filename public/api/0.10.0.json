{
  "version": "v0.10.0",
  "isLatest": false,
  "html": "https://github.com/solidjs/solid/releases/tag/v0.10.0",
  "date": "2019-08-12T05:46:34Z",
  "tar": "https://api.github.com/repos/solidjs/solid/tarball/v0.10.0",
  "zip": "https://api.github.com/repos/solidjs/solid/zipball/v0.10.0",
  "sections": [
    {
      "slug": "api",
      "title": "API",
      "level": 1,
      "children": []
    },
    {
      "slug": "comparison-with-other-libraries",
      "title": "Comparison with other Libraries",
      "level": 1,
      "children": [
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": []
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": []
        },
        {
          "slug": "lithtml-%26-lighterhtml",
          "title": "LitHTML & LighterHTML",
          "level": 2,
          "children": []
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "others",
          "title": "Others",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "components",
      "title": "Components",
      "level": 1,
      "children": [
        {
          "slug": "children",
          "title": "Children",
          "level": 2,
          "children": []
        },
        {
          "slug": "web-components",
          "title": "Web Components",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "context",
      "title": "Context",
      "level": 1,
      "children": []
    },
    {
      "slug": "jsx-rendering",
      "title": "JSX Rendering",
      "level": 1,
      "children": [
        {
          "slug": "entry",
          "title": "Entry",
          "level": 2,
          "children": []
        },
        {
          "slug": "binding",
          "title": "Binding",
          "level": 2,
          "children": []
        },
        {
          "slug": "events",
          "title": "Events",
          "level": 2,
          "children": []
        },
        {
          "slug": "control-flow",
          "title": "Control Flow",
          "level": 2,
          "children": [
            {
              "slug": "selectwhen(signal%2C-handler)",
              "title": "selectWhen(signal, handler)",
              "level": 3,
              "children": []
            },
            {
              "slug": "selecteach(signal%2C-handler)",
              "title": "selectEach(signal, handler)",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "refs",
          "title": "Refs",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "signals",
      "title": "Signals",
      "level": 1,
      "children": [
        {
          "slug": "accessors-%26-context",
          "title": "Accessors & Context",
          "level": 2,
          "children": []
        },
        {
          "slug": "computations",
          "title": "Computations",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendering",
          "title": "Rendering",
          "level": 2,
          "children": []
        },
        {
          "slug": "composition",
          "title": "Composition",
          "level": 2,
          "children": []
        },
        {
          "slug": "operators",
          "title": "Operators",
          "level": 2,
          "children": [
            {
              "slug": "pipe(...operators)%3A-(signal)-%3D%3E-any",
              "title": "pipe(...operators): (signal) => any",
              "level": 3,
              "children": []
            },
            {
              "slug": "map(iterator%3A-(item%2C-index)-%3D%3E-any%2C-fallback%3A-()-%3D%3E-any)%3A-(signal)-%3D%3E-any%5B%5D",
              "title": "map(iterator: (item, index) => any, fallback: () => any): (signal) => any[]",
              "level": 3,
              "children": []
            },
            {
              "slug": "reduce(accumulator%3A-(memo%2C-item%2C-index)-%3D%3E-any%2C-seed)%3A-(signal)-%3D%3E-any",
              "title": "reduce(accumulator: (memo, item, index) => any, seed): (signal) => any",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "observables",
          "title": "Observables",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "state",
      "title": "State",
      "level": 1,
      "children": [
        {
          "slug": "modifiers",
          "title": "Modifiers",
          "level": 2,
          "children": [
            {
              "slug": "force(changes)",
              "title": "force(changes)",
              "level": 3,
              "children": []
            },
            {
              "slug": "force(...path%2C-changes)",
              "title": "force(...path, changes)",
              "level": 3,
              "children": []
            },
            {
              "slug": "force(%5B...path%2C-changes%5D%2C-%5B...path%2C-changes%5D)",
              "title": "force([...path, changes], [...path, changes])",
              "level": 3,
              "children": []
            },
            {
              "slug": "reconcile(...path%2C-value)",
              "title": "reconcile(...path, value)",
              "level": 3,
              "children": []
            }
          ]
        }
      ]
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#api\">#</a> API</h1>\n<h3 id=\"createroot(disposer-%3D%3E-%3Ccode%3E)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createroot(disposer-%3D%3E-%3Ccode%3E)\">#</a> <code>createRoot(disposer =&gt; &lt;code&gt;)</code></h3>\n<p>Creates a new non-tracked context that doesn't auto-dispose. All Solid code should be wrapped in one of these top level as they ensure that all memory/computations are freed up.</p>\n<h3 id=\"createstate(initvalue)%3A-%5Bstate%2C-setstate%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstate(initvalue)%3A-%5Bstate%2C-setstate%5D\">#</a> <code>createState(initValue): [state, setState]</code></h3>\n<p>Creates a new State object and setState pair that can be used to maintain your componenents state.</p>\n<h3 id=\"createeffect(prev-%3D%3E-%3Ccode%3E%2C-initialvalue)%3A-void\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createeffect(prev-%3D%3E-%3Ccode%3E%2C-initialvalue)%3A-void\">#</a> <code>createEffect(prev =&gt; &lt;code&gt;, initialValue): void</code></h3>\n<p>Creates a new effect that automatically tracks dependencies. 2nd argument is the initial value.</p>\n<h3 id=\"createsignal(initialvalue%2C-comparatorfn)%3A-%5Bgetvaluefn%2C-setvaluefn%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createsignal(initialvalue%2C-comparatorfn)%3A-%5Bgetvaluefn%2C-setvaluefn%5D\">#</a> <code>createSignal(initialValue, comparatorFn): [getValueFn, setValueFn]</code></h3>\n<p>Creates a new signal that can be used for reactive tracking. By default signals always notify on setting a value. However a comparator can be passed in to indicate whether the values should be considered equal and listeners not notified.</p>\n<h3 id=\"creatememo(prev-%3D%3E-%3Ccode%3E%2C-initialvalue%2C-comparatorfn)%3A-getvaluefn\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#creatememo(prev-%3D%3E-%3Ccode%3E%2C-initialvalue%2C-comparatorfn)%3A-getvaluefn\">#</a> <code>createMemo(prev =&gt; &lt;code&gt;, initialValue, comparatorFn): getValueFn</code></h3>\n<p>Creates a readonly signal that recalculates it's value whenever the executed codes dependencies update. Memos only notify dependents when returned value changes. You can also set a custom comparator.</p>\n<h3 id=\"createdependenteffect(()-%3D%3E-%3Ccode%3E%2C-dependencies%2C-defer)%3A-void\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createdependenteffect(()-%3D%3E-%3Ccode%3E%2C-dependencies%2C-defer)%3A-void\">#</a> <code>createDependentEffect(() =&gt; &lt;code&gt;, dependencies, defer): void</code></h3>\n<p>Creates a new effect that explicitly tracks dependencies. The 2nd optional argument is an explicit array of dependencies. The 3rd optional argument is whether to defer initial execution of the effect until a value has changed (this only works with explicit dependencies).</p>\n<h3 id=\"oncleanup((final%3A-boolean)-%3D%3E-%3Ccode%3E)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#oncleanup((final%3A-boolean)-%3D%3E-%3Ccode%3E)\">#</a> <code>onCleanup((final: boolean) =&gt; &lt;code&gt;)</code></h3>\n<p>Registers a cleanup method that performs that executes on disposal or recalculation of the current context.</p>\n<h3 id=\"aftereffects(()-%3D%3E-%3Ccode%3E)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#aftereffects(()-%3D%3E-%3Ccode%3E)\">#</a> <code>afterEffects(() =&gt; &lt;code&gt;)</code></h3>\n<p>Registers a method that will run after the current execution process is complete. These are useful when waiting on refs to resolves or child DOM nodes to render.</p>\n<h3 id=\"sample(()-%3D%3E-%3Ccode%3E)%3A-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sample(()-%3D%3E-%3Ccode%3E)%3A-any\">#</a> <code>sample(() =&gt; &lt;code&gt;): any</code></h3>\n<p>Ignores tracking any of the dependencies in the executing code block and returns the value.</p>\n<h3 id=\"freeze(()-%3D%3E-%3Ccode%3E)%3A-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#freeze(()-%3D%3E-%3Ccode%3E)%3A-any\">#</a> <code>freeze(() =&gt; &lt;code&gt;): any</code></h3>\n<p>Ensures that all updates within the block happen at the same time to prevent unnecessary recalculation. Solid State's setState method and computations(useEffect, useMemo) automatically wrap their code in freeze blocks.</p>\n<h3 id=\"createcontext(initfn)%3A-context\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcontext(initfn)%3A-context\">#</a> <code>createContext(initFn): Context</code></h3>\n<p>Creates a new context object that can be used with useContext and the Provider control flow.</p>\n<h3 id=\"usecontext(context)%3A-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usecontext(context)%3A-any\">#</a> <code>useContext(Context): any</code></h3>\n<p>Hook to grab context to allow for deep passing of props with hierarchal resolution of dependencies without having to pass them through each Component function.</p>\n<h3 id=\"lazy(()-%3D%3E-%3Cpromise%3E)%3A-component\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lazy(()-%3D%3E-%3Cpromise%3E)%3A-component\">#</a> <code>lazy(() =&gt; &lt;Promise&gt;): Component</code></h3>\n<p>Used to lazy load components to allow for things like code splitting and Suspense.</p>\n<h3 id=\"loadresource(%3Cpromise%3E-%7C-()-%3D%3E-%3Cpromise%3E)%3A-getvaluefn\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#loadresource(%3Cpromise%3E-%7C-()-%3D%3E-%3Cpromise%3E)%3A-getvaluefn\">#</a> <code>loadResource(&lt;Promise&gt; | () =&gt; &lt;Promise&gt;): getValueFn</code></h3>\n<p>Creates a memo that updates when promise is resolved. If a function is provided it tracks dependency changes to retrigger. This works with the Suspend control flow.</p>\n<h3 id=\"setdefaults(props%2C-defaultprops)%3A-void\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setdefaults(props%2C-defaultprops)%3A-void\">#</a> <code>setDefaults(props, defaultProps): void</code></h3>\n<p>Sets default props for function components in case caller doesn't provide them.</p>\n</section><section class=\"mt-10\"><h1 id=\"comparison-with-other-libraries\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#comparison-with-other-libraries\">#</a> Comparison with other Libraries</h1>\n<p>This section cannot escape some bias but I think it is important to understand where Solid's solution sits compared to other libraries. This is not about performance. For a definitive look at performance feel free to look at the <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a>.</p>\n<h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2>\n<p>This library owes its existence to Knockout. Modernizing its model for fine grained dependency detection was the motivation for this project. Knockout was released in 2010 and supports back to IE6 while much of Solid doesn't support IE at all(although you can use Signals in Solid without using the Proxy State object).</p>\n<p>Knockout's bindings are just strings in HTML which are walked over at runtime. They depend on cloning context($parent etc...). Whereas Solid uses JSX or Tagged Template Literals for templating opting for an in JavaScript API.</p>\n<p>The biggest difference might be that Solid uses SRP which ensures synchronicity of changes whereas Knockout has deferUpdates which uses a deferred microtask queue.</p>\n<h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2>\n<p>React is also has had a big influence on Solid. Its unidirectional flow and explicit segregation of read and write in its Hooks API informed Solid's API. More so the objective of being just a &quot;Render Library&quot; rather than a framework. Solid has strong opinions on how to approach managing data in application development but doesn't seek to constrain its execution.</p>\n<p>However, as much as Solid aligns with React's design philosophy, it works significantly different fundamentally. React uses a Virtual DOM, and Solid does not. React's abstraction is top down component partition where render methods are called repeatedly and diffed. Whereas Solid renders each Template once in entirety constructing its reactive graph and afterwords only executes instructions related to fine-grained changes.</p>\n<h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2>\n<p>Svelte pioneered the precompiled disappearing framework that Solid also employs to a certain degree. Both libraries are truly reactive and can produce really small execution code bundles although Svelte is the winner there. Solid requires a bit more explicitness in its declarations and relying less on implicit analysis from the compiler, but that is part of what gives Solid superior performance.</p>\n<p>Both libraries aim to help their developers write less code but approach it completely differently. Svelte 3 focuses on the optimization of the ease of dealing with localized change focusing on plain object interaction and 2 way binding. In constrast Solid deliberately embraces CQRS and immutable interface. Solid uses proxies to track dependencies but very consciously blocks setters, considering 2 way binding and direct mutation a dangerous anti-pattern in terms of large scale solutions. Instead Solid has adopted expressive setters(influenced by ImmutableJS and Falcor) to give flexibility of plain objects, with greater brevity, and significantly more control. With functional template composition, in many cases Solid allows developers to write even less code than Svelte.</p>\n<p>Svelte still represents pushing the boundaries of precompilation where Solid is a bit more conservative offering HyperScript and Tagged Template Literal options in addition to the compiled JSX. But we feel Solid really takes the best of both worlds.</p>\n<h2 id=\"lithtml-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lithtml-%26-lighterhtml\">#</a> LitHTML &amp; LighterHTML</h2>\n<p>These libraries are incredibly similar and have had some influence on Solid. Mostly that Solid's compiled code uses a very similar method to performantly initially render the DOM. Cloning Template elements and using comment placeholders are something that Solid and these libraries share in common.</p>\n<p>The biggest difference is that while these libraries do not use the Virtual DOM they treat rendering the same way, top down and requiring component partitioning to keep things sane. By contrast Solid uses its fine grained Reactive Graph to only update what has changed and in so only shares this technique for its initial render. This allows for it benefit from the initial speed only available from native DOM and also have the most performant approach to updates.</p>\n<h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2>\n<p>Solid is not particularly influenced by Vue, but they are relatable. They both use Proxies in their Reactive system, but that is where the similarities end. Vue's fine grained dependency detection just feeds into a less fine-grained Virtual DOM and Component system whereas Solid keeps its granularity right down to its direct DOM updates.</p>\n<p>Vue works off configuration objects where Solid uses a more functional approach instead opting for composeable primitives. Vue credits its configuration as an easy learning curve, but we feel having fewer simple primitives actually reduces mental overhead in a similar way. Where configuration objects or lifecycles require learning and remember how they apply(like a checklist), Solid's primitives are not unlike understanding what Array.map does. Once you have the tool you can do the job.</p>\n<p>Vue also is setup for direct mutation and 2 way binding, which helps keep the code small. However, Solid's functional approach often leads to less setup than Vue's configuration objects.</p>\n<h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2>\n<p>RxJS is the Reactive library. While Solid has a similar idea of Observable data it uses a much different application of the observer pattern. While Signals are like a simple version of an Observable (only the next), the pattern of auto dependency detection surplant's RxJS' hundred or so operators. Solid could be handled this way and earlier versions of the library included similar operators, but in most cases it is more straightforward to write your own transformation logic in a computation. Where Observables are cold starting, unicast, and push-based many problems on the client lend to hot startup and being multicast which is Solid's default behavior.</p>\n<h2 id=\"others\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#others\">#</a> Others</h2>\n<p>Angular and a few other popular libraries are notably missing from this comparison and it is mostly lack of experience with them to give an adequate comparison. Mostly larger Frameworks do not share much in common with Solid and it is much harder to compare them head on.</p>\n</section><section class=\"mt-10\"><h1 id=\"components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#components\">#</a> Components</h1>\n<p>Components in Solid are just Pascal(Capital) cased functions. Their first argument is an props object and return real DOM nodes.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Parent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">section</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">Label</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">greeting</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&#39;Hello&#39;</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;John&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">Label</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">section</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">Label</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> ({</span><span style=\"color: #E36209\">greeting</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">children</span><span style=\"color: #24292E\">}) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> (</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{greeting}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    {children}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Since the all nodes from JSX are actual DOM nodes the only responsibility of top level Templates/Components is appending to the DOM.</p>\n<p>Components also support dynamic bindings which allow you to pass values that will change. However you need to be careful to only access your props inside bindings or effects.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A737D\">// Right! But probably not that useful</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">StaticComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> ({ </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> }) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{ name }&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Right! Updates like you&#39;d expect</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">props</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{( props.name )}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Wrong! accessing in the rest params is static since not in an expression</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">StaticComponent2</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> ({ </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> }) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{( name )}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// works properly and update on state.name change</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{( state.name )}/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// will not update on state.name change and pass by value</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{ state.name }/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// Still won&#39;t update even with the dynamic binding</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">StaticComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{( state.name )}/&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you are very performance oriented you can also pass accessor functions instead of using Dynamic syntax on Function components. This will reduce overhead a little bit but requires that a function is always passed.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> ({ </span><span style=\"color: #E36209\">name</span><span style=\"color: #24292E\"> }) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{( </span><span style=\"color: #6F42C1\">name</span><span style=\"color: #24292E\">() )}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> state.name}/&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Keep in mind while Solid allows you to explicitly set what bindings update when creating generic components don't get too restrictive here. If the consumer passes in a static value the computation will not be kept (as it will never update) and there will be minimal overhead.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">props</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{( props.name )}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">DynamicComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">name</span><span style=\"color: #D73A49\">=</span><span style=\"color: #032F62\">&#39;John&#39;</span><span style=\"color: #24292E\"> /&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"children\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#children\">#</a> Children</h2>\n<p>Solid handles JSX Children as if they are always a single value. Either the value of a single node, string, or expression, or in the case of multiple children a single fragment. This ensures consistent behavior when attaching to the DOM and optimal performance for cloning templates but still allows many other patterns. If you need to pass multiple data points you can pass an array in a single expression. The same goes for functions, to support patterns like render props.</p>\n<h2 id=\"web-components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#web-components\">#</a> Web Components</h2>\n<p>Since change management is independent of code modularization, Solid Templates are sufficient as is to act as Components, or Solid fits easily into other Component structures like Web Components.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createState } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { render } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js/dom&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">class</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">Component</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">extends</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">HTMLElement</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">constructor</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">props</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">__setProps</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">Object</span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\">assign</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">, {state, setState, props, __setProps});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">connectedCallback</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">!</span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.shadowRoot </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\">attachShadow</span><span style=\"color: #24292E\">({mode: </span><span style=\"color: #032F62\">&#39;open&#39;</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.dispose </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">render</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.render.</span><span style=\"color: #6F42C1\">bind</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">), </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.shadowRoot);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">diconnectedCallback</span><span style=\"color: #24292E\">() { </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.dispose </span><span style=\"color: #D73A49\">&amp;&amp;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\">dispose</span><span style=\"color: #24292E\">(); }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">attributeChangedCallback</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">attr</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">oldVal</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">newVal</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\">__setProps</span><span style=\"color: #24292E\">({[attr]: newVal});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">class</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">MyComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">extends</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">Component</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">constuctor</span><span style=\"color: #24292E\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">super</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #005CC5\">this</span><span style=\"color: #24292E\">.</span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({greeting: </span><span style=\"color: #032F62\">&#39;World&#39;</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">render</span><span style=\"color: #24292E\">() {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Hello {(state.greeting)}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><a href=\"https://github.com/ryansolid/solid-element\">Solid Element</a> Provides an out of the box solution for wrapping your Solid Components as Custom Elements.</p>\n</section><section class=\"mt-10\"><h1 id=\"context\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#context\">#</a> Context</h1>\n<p>Solid has Context API for dependency injection which comprises of createContext, Provider control flow, and useContext. createContext lets you define the initialization of any sort of state container. useContext take that Context to initialize and make use . The value attribute for provider is passed as argument to the context initializer, or if no initializer is the value of the context.</p>\n<p>Example below using Solid's own state mechanism although context can house just about anything.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A737D\">// counter.js</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createState, createContext } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">export</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createContext</span><span style=\"color: #24292E\">((</span><span style=\"color: #E36209\">count</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ count });</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> [state, {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6F42C1\">increment</span><span style=\"color: #24292E\">() { </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;count&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> c </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">); }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6F42C1\">decrement</span><span style=\"color: #24292E\">() { </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;count&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> c </span><span style=\"color: #D73A49\">-</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">); }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// app.js</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> CounterContext </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;./counter&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">AppComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6A737D\">// start counter at 2</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">CounterContext.Provider</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">value</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    //...</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">CounterContext.Provider</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// nested.js</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { useContext } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> CounterContext </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;./counter&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">NestedComponent</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">counter</span><span style=\"color: #24292E\">, { </span><span style=\"color: #005CC5\">increment</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">decrement</span><span style=\"color: #24292E\"> }] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useContext</span><span style=\"color: #24292E\">(CounterContext);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{( counter.count )}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onclick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{ increment }&gt;+&lt;/</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">onclick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{ decrement }&gt;-&lt;/</span><span style=\"color: #22863A\">button</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n</section><section class=\"mt-10\"><h1 id=\"jsx-rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#jsx-rendering\">#</a> JSX Rendering</h1>\n<p>Rendering involves precompilation of JSX templates into optimized native js code. The JSX code constructs:</p>\n<ul>\n<li>Template DOM elements which are cloned on each instantiation</li>\n<li>A series of reference declarations using only firstChild and nextSibling</li>\n<li>Fine grained computations to update the created elements.</li>\n</ul>\n<p>This approach both is more performant and produces less code then creating each element one by one with document.createElement.</p>\n<p>More documentation is available at: <a href=\"https://github.com/ryansolid/babel-plugin-jsx-dom-expressions\">babel-plugin-jsx-dom-expressions</a></p>\n<h3 id=\"note-on-attribute-binding-order\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#note-on-attribute-binding-order\">#</a> Note on attribute binding order</h3>\n<p>Static attributes are created as part of the html template together. Expressions fixed and dynamic are applied afterwards in JSX binding order. While this is fine for most DOM elements there are some like input elements with <code>type='range'</code> where order matters. Keep this in mind when binding elements.</p>\n<h2 id=\"entry\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#entry\">#</a> Entry</h2>\n<p>The easiest way to mount Solid is to import render from 'solid-js/dom'. <code>render</code> takes a function as the first argument and the mounting container for the second and returns a disposal method. This <code>render</code> automatically creates the reactive root and handles rendering into the mount container. Solid assumes full control of the mount container so use an element with no children.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { render } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js/dom&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">render</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">App</span><span style=\"color: #24292E\"> /&gt;, document.</span><span style=\"color: #6F42C1\">getElementById</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;main&#39;</span><span style=\"color: #24292E\">));</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"binding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#binding\">#</a> Binding</h2>\n<p>By default data is simply bound to expressions. If you wish to bind it for dynamic changes add inner parenthesis to your binding. Ex {( )}</p>\n<h2 id=\"events\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#events\">#</a> Events</h2>\n<p>on_____ properties get added (addEventListener) as event handlers on the element. Camel Case events will be delegated by default and the second argument will be the model property or (nearest parent's). Use all lowercase for directly bound native events.</p>\n<p>If you need to use non-lowercase or hyphenated event names use the events binding.</p>\n<h2 id=\"control-flow\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#control-flow\">#</a> Control Flow</h2>\n<p>While you could use a map function for loops and raw ternary operators of conditionals they aren't optimized. While perhaps not as big of a deal in the VDOM since Solid is designed to not execute all the code from top down repeatedly we rely on techniques like isolated contexts and memoization. This is complicated and requires special methods.  Current 'For', 'Show', 'Switch/Match', 'Suspense', and 'Portal' are supported.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #24292E\">&lt;</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  &lt;</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">each</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{( state.users )} </span><span style=\"color: #005CC5\">fallback</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{ &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;No Users&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt; }&gt;{</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #E36209\">user</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;{( user.firstName )}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">when</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{( user.stars </span><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">100</span><span style=\"color: #24292E\"> )}&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">        &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Verified&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      &lt;/</span><span style=\"color: #22863A\">Show</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    &lt;/</span><span style=\"color: #22863A\">li</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }&lt;/</span><span style=\"color: #22863A\">For</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">&lt;/</span><span style=\"color: #22863A\">ul</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p><em>Note these are designed to handle more complex scenarios like template/component insertions. Child expressions are inert unless you return a function. For simple dynamic strings use ternary operator.</em></p>\n<p>The library also includes a couple transform directives that can be applied to the For control flow.</p>\n<h3 id=\"selectwhen(signal%2C-handler)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#selectwhen(signal%2C-handler)\">#</a> selectWhen(signal, handler)</h3>\n<h3 id=\"selecteach(signal%2C-handler)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#selecteach(signal%2C-handler)\">#</a> selectEach(signal, handler)</h3>\n<p>These trigger on the signal to indicate the selected model/s and calls the handler function with associated element, and a boolean to indicate whether the model is selected or not. If the handler is a string instead of a function the default behavior is to toggle a class with the string name.</p>\n<p>These directives also require setting a model on the child element in order to identify the node.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  list: [ </span><span style=\"color: #6A737D\">/* ... */</span><span style=\"color: #24292E\"> ],</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  selected: [ </span><span style=\"color: #6A737D\">/* ... */</span><span style=\"color: #24292E\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">/* .... */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\">For</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  each</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{(state.list)}</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  transform</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{</span><span style=\"color: #6F42C1\">selectEach</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    () </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #E36209\">state</span><span style=\"color: #24292E\">.</span><span style=\"color: #E36209\">selected</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    (node, selected) =&gt; node.toggleClass(</span><span style=\"color: #032F62\">&#39;selected&#39;</span><span style=\"color: #24292E\">, selected)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  )}</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">&gt;</span><span style=\"color: #24292E\">{ </span><span style=\"color: #E36209\">item</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">&lt;</span><span style=\"color: #24292E\">div model</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{item} onClick</span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\">{select} </span><span style=\"color: #D73A49\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span><span style=\"color: #D73A49\">&lt;/</span><span style=\"color: #24292E\">For</span><span style=\"color: #D73A49\">&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"refs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#refs\">#</a> Refs</h2>\n<p>Refs come in 2 flavours. <code>ref</code> which directly assigns the value, and <code>forwardRef</code> which calls a callback <code>(ref) =&gt; void</code> with the reference.</p>\n</section><section class=\"mt-10\"><h1 id=\"signals\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#signals\">#</a> Signals</h1>\n<p>Signals are the glue that hold the library together. They often are invisible but interact in very powerful ways that you get more familiar with Solid they unlock a lot of potential.</p>\n<p>Signals are a simple primitive that contain values that change over time. With Signals you can track sorts of changes from various sources in your applications. Solid's State object is built from a Proxy over a tree of Signals. You can update a Signal manually or from any Async source.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createSignal, onCleanup } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">function</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useTick</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">delay</span><span style=\"color: #24292E\">) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">getCount</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setCount</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    handle </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">setInterval</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setCount</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">getCount</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">), delay);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">onCleanup</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">clearInterval</span><span style=\"color: #24292E\">(handle));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> getCount;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"accessors-%26-context\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#accessors-%26-context\">#</a> Accessors &amp; Context</h2>\n<p>Signals are special functions that when executed return their value. Accessors are just functions that &quot;access&quot;, or read a value from one or more Signals. At the time of reading the Signal the current execution context (a computation) has the ability to track Signals that have been read, building out a dependency tree that can automatically trigger recalculations as their values are updated. This can be as nested as desired and each new nested context tracks it's own dependencies. Since Accessors by nature of being composed of Signal reads are too reactive we don't need to wrap Signals at every level just at the top level where they are used and around any place that is computationally expensive where you may want to memoize or store intermediate values.</p>\n<h2 id=\"computations\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#computations\">#</a> Computations</h2>\n<p>An computation is calculation over a function execution that automatically dynamically tracks any dependent signals. A computation goes through a cycle on execution where it releases its previous execution's dependencies, then executes grabbing the current dependencies.</p>\n<p>There are 2 main computations used by Solid: Effects which produce side effects, and Memos which are pure and return a read-only Signal.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createState, createEffect } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js&#39;</span><span style=\"color: #24292E\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({count: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">createEffect</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(state.count));</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({count: state.count </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// 1</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// 2</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Memos also pass the previous value on each execution. This is useful for reducing operations (obligatory Redux in a couple lines example):</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">reducer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">action</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> {}) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">switch</span><span style=\"color: #24292E\">(action.type) {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">case</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;LIST/ADD&#39;</span><span style=\"color: #24292E\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> {</span><span style=\"color: #D73A49\">...</span><span style=\"color: #24292E\">state, list: [</span><span style=\"color: #D73A49\">...</span><span style=\"color: #24292E\">state.list, action.payload]};</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">default</span><span style=\"color: #24292E\">:</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">      </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> state;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// redux</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">getAction</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">dispatch</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">getStore</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createMemo</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">state</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">reducer</span><span style=\"color: #24292E\">(state, </span><span style=\"color: #6F42C1\">getAction</span><span style=\"color: #24292E\">()), {list: []});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// subscribe and dispatch</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">createEffect</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> console.</span><span style=\"color: #6F42C1\">log</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">getStore</span><span style=\"color: #24292E\">().list));</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">dispatch</span><span style=\"color: #24292E\">({type: </span><span style=\"color: #032F62\">&#39;LIST/ADD&#39;</span><span style=\"color: #24292E\">, payload: {id: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;New Value&#39;</span><span style=\"color: #24292E\">}});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That being said there are plenty of reasons to use actual Redux.</p>\n<h2 id=\"rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h2>\n<p>You can also use signals directly. As an example, the following will show a count of ticking seconds:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">import</span><span style=\"color: #24292E\"> { createRoot, createSignal } </span><span style=\"color: #D73A49\">from</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;solid-js&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">createRoot</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">getSeconds</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setSeconds</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">(</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    div </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> &lt;</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;Number of seconds elapsed: {( </span><span style=\"color: #6F42C1\">getSeconds</span><span style=\"color: #24292E\">() )}&lt;/</span><span style=\"color: #22863A\">div</span><span style=\"color: #24292E\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #005CC5\">setInterval</span><span style=\"color: #24292E\">(() </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">setSeconds</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">getSeconds</span><span style=\"color: #24292E\">() </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">), </span><span style=\"color: #005CC5\">1000</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  document.body.</span><span style=\"color: #6F42C1\">appendChild</span><span style=\"color: #24292E\">(div)</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">})</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"composition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#composition\">#</a> Composition</h2>\n<p>State and Signals combine wonderfully as wrapping a state selector in a function instantly makes it reactive accessor. They encourage composing more sophisticated patterns to fit developer need.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6A737D\">// deep reconciled immutable reducer</span></span>\n<span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">useReducer</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> (</span><span style=\"color: #E36209\">reducer</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">init</span><span style=\"color: #24292E\">) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">(init),</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    [</span><span style=\"color: #005CC5\">getAction</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">dispatch</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createSignal</span><span style=\"color: #24292E\">();</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #6F42C1\">createDependentEffect</span><span style=\"color: #24292E\">((</span><span style=\"color: #E36209\">prevState</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> init) </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">let</span><span style=\"color: #24292E\"> action, next;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">if</span><span style=\"color: #24292E\"> (</span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">(action </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">getAction</span><span style=\"color: #24292E\">())) </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> prevState;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    next </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">reducer</span><span style=\"color: #24292E\">(prevState, action);</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">reconcile</span><span style=\"color: #24292E\">(next));</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> next;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }, [ getAction ])</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  </span><span style=\"color: #D73A49\">return</span><span style=\"color: #24292E\"> [state, dispatch];</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"operators\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#operators\">#</a> Operators</h2>\n<p>Solid provides a couple simple operators to help construct more complicated behaviors. They are in Functional Programming form, where they are functions that return a function that takes the input accessor. They are not computations themselves and are designed to be passed into <code>createMemo</code>. The possibilities of operators are endless. Solid only ships with 3 basic ones:</p>\n<h3 id=\"pipe(...operators)%3A-(signal)-%3D%3E-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipe(...operators)%3A-(signal)-%3D%3E-any\">#</a> <code>pipe(...operators): (signal) =&gt; any</code></h3>\n<p>The pipe operator is used to combine other operators.</p>\n<h3 id=\"map(iterator%3A-(item%2C-index)-%3D%3E-any%2C-fallback%3A-()-%3D%3E-any)%3A-(signal)-%3D%3E-any%5B%5D\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#map(iterator%3A-(item%2C-index)-%3D%3E-any%2C-fallback%3A-()-%3D%3E-any)%3A-(signal)-%3D%3E-any%5B%5D\">#</a> <code>map(iterator: (item, index) =&gt; any, fallback: () =&gt; any): (signal) =&gt; any[]</code></h3>\n<p>Memoized array map operator with optional fallback. This operator does not re-map items if already in the list.</p>\n<h3 id=\"reduce(accumulator%3A-(memo%2C-item%2C-index)-%3D%3E-any%2C-seed)%3A-(signal)-%3D%3E-any\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reduce(accumulator%3A-(memo%2C-item%2C-index)-%3D%3E-any%2C-seed)%3A-(signal)-%3D%3E-any\">#</a> <code>reduce(accumulator: (memo, item, index) =&gt; any, seed): (signal) =&gt; any</code></h3>\n<p>Array reduce operator useful for combining or filtering lists.</p>\n<h2 id=\"observables\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#observables\">#</a> Observables</h2>\n<p>Signals and Observable are similar concepts that can work together but there are a few key differences. Observables are as defined by the <a href=\"https://github.com/tc39/proposal-observable\">TC39 Proposal</a>. These are a standard way of representing streams, and follow a few key conventions. Mostly that they are cold, unicast, and push-based by default. What this means is that they do not do anything until subscribed to at which point they create the source, and do so for each subscription. So if you had an Observable from a DOM Event, subscribing would add an event listener for each function you pass. In so being unicast they aren't managing a list of subscribers. Finally being push you don't ask for the latest value, they tell you.</p>\n<p>Observables track next value, errors, and completion. This is very useful for tracking discreet events over time. Signals are much simpler. They are hot and multicast in nature and while capable of pushing values over time aren't aware of it themselves. They are simple and synchronous. They don't complete, they exist or they don't exist.</p>\n<p>Observables can work well with Signals as being a source that feeds data into them. Like State, Observables are another tool that allow more control in a specific aspect of your application. Where State is valuable for reconciling multiple Signals together into a serializable structure to keep managing Component or Store code simple, Observables are useful for transforming Async data pipelines like handling Data Communication services.</p>\n</section><section class=\"mt-10\"><h1 id=\"state\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#state\">#</a> State</h1>\n<p>State is the core work horse of Solid. It represents the local data, the output all the asynchronous interaction as a simple to read javascript object. While fine grained observable itself it is has a minimal API footprint and in most cases be treated like a normal object when reading, supporting destructuring and native methods. However you are dealing with proxy objects that automatically tracked as dependencies of memoization and effects and upon changing will force evaluation.</p>\n<p>While this state concept is heavily borrowed from React and it's API from ImmutableJS, there is a key difference in the role it plays here. In React you keep things simple in your state and the whole library is about reconciling DOM rendering. Here you can almost view the State object as the target, the thing that is diffed and maintained. The DOM rendering is actually quite simple to the point the compiled source exposes the vast majority of the DOM manipulations, where you can easily drop a breakpoint. So change detection being nested and focusing on interaction with other change mechanisms are key.</p>\n<h3 id=\"createstate(object)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstate(object)\">#</a> <code>createState(object)</code></h3>\n<p>Initializes with object value and returns an array where the first index is the state object and the second is the setState method.</p>\n<h3 id=\"setstate(changes)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setstate(changes)\">#</a> <code>setState(changes)</code></h3>\n<h3 id=\"setstate(...path%2C-changes)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setstate(...path%2C-changes)\">#</a> <code>setState(...path, changes)</code></h3>\n<h3 id=\"setstate(%5B...path%2C-changes%5D%2C-%5B...path%2C-changes%5D)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#setstate(%5B...path%2C-changes%5D%2C-%5B...path%2C-changes%5D)\">#</a> <code>setState([...path, changes], [...path, changes])</code></h3>\n<p>This merges the changes into the path on the state object. All changes made in a single setState command are applied syncronously (ie all changes see each other at the same time). Changes can take the form of function that passes previous state and returns new state or a value. Objects are always merged.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({ firstName: </span><span style=\"color: #032F62\">&#39;John&#39;</span><span style=\"color: #24292E\">, lastName: </span><span style=\"color: #032F62\">&#39;Miller&#39;</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">({ firstName: </span><span style=\"color: #032F62\">&#39;Johnny&#39;</span><span style=\"color: #24292E\">, middleName: </span><span style=\"color: #032F62\">&#39;Lee&#39;</span><span style=\"color: #24292E\"> })</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// ({ firstName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Miller&#39; })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #E36209\">state</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> { </span><span style=\"color: #E36209\">preferredName</span><span style=\"color: #24292E\">: state.firstName, </span><span style=\"color: #E36209\">lastName</span><span style=\"color: #24292E\">: </span><span style=\"color: #032F62\">&#39;Milner&#39;</span><span style=\"color: #24292E\"> });</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// ({ firstName: &#39;Johnny&#39;, preferredName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Milner&#39; })</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The function form is not terribly useful top level given Solid's synchronous nature. However, setState also supports nested setting where you can indicate the path to the change. When nested the state you are updating may be other non Object values. Objects are still merged but other values (including Arrays) are replaced.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  counter: </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  list: [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">23</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Birds&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">27</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Fish&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;counter&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> c </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;list&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">l</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> [</span><span style=\"color: #D73A49\">...</span><span style=\"color: #24292E\">l, {id: </span><span style=\"color: #005CC5\">43</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Marsupials&#39;</span><span style=\"color: #24292E\">}]);</span></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;list&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&#39;read&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   counter: 3,</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 27, title: &#39;Fish&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 43, title: &#39;Marsupials&#39;, read: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Path can be string keys, array of keys, iterating objects ({from, to, by}), or filter functions. This gives incredible expressive power to describe state changes.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  todos: [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { task: </span><span style=\"color: #032F62\">&#39;Finish work&#39;</span><span style=\"color: #24292E\">, completed: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { task: </span><span style=\"color: #032F62\">&#39;Go grocery shopping&#39;</span><span style=\"color: #24292E\">, completed: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { task: </span><span style=\"color: #032F62\">&#39;Make dinner&#39;</span><span style=\"color: #24292E\">, completed: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, [</span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">], </span><span style=\"color: #032F62\">&#39;completed&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, { from: </span><span style=\"color: #005CC5\">0</span><span style=\"color: #24292E\">, to: </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\"> }, </span><span style=\"color: #032F62\">&#39;completed&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">c);</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">todo</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> todo.completed, </span><span style=\"color: #032F62\">&#39;task&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">t</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> t </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;!&#39;</span><span style=\"color: #24292E\">)</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;todos&#39;</span><span style=\"color: #24292E\">, {}, </span><span style=\"color: #E36209\">todo</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> { </span><span style=\"color: #E36209\">marked</span><span style=\"color: #24292E\">: </span><span style=\"color: #005CC5\">true</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">completed</span><span style=\"color: #24292E\">: </span><span style=\"color: #D73A49\">!</span><span style=\"color: #24292E\">todo.completed })</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Finish work&#39;, completed: true, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Go grocery shopping!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { task: &#39;Make dinner!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Additionally you can do multiple sets in a single call by passing an array of paths and changes.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #D73A49\">const</span><span style=\"color: #24292E\"> [</span><span style=\"color: #005CC5\">state</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">setState</span><span style=\"color: #24292E\">] </span><span style=\"color: #D73A49\">=</span><span style=\"color: #24292E\"> </span><span style=\"color: #6F42C1\">createState</span><span style=\"color: #24292E\">({</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  counter: </span><span style=\"color: #005CC5\">2</span><span style=\"color: #24292E\">,</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  list: [</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">23</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Birds&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    { id: </span><span style=\"color: #005CC5\">27</span><span style=\"color: #24292E\">, title: </span><span style=\"color: #032F62\">&#39;Fish&#39;</span><span style=\"color: #24292E\"> }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  [</span><span style=\"color: #032F62\">&#39;counter&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">c</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> c </span><span style=\"color: #D73A49\">*</span><span style=\"color: #24292E\"> </span><span style=\"color: #005CC5\">3</span><span style=\"color: #24292E\">],</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  [</span><span style=\"color: #032F62\">&#39;list&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #005CC5\">1</span><span style=\"color: #24292E\">, </span><span style=\"color: #032F62\">&#39;title&#39;</span><span style=\"color: #24292E\">, </span><span style=\"color: #E36209\">t</span><span style=\"color: #24292E\"> </span><span style=\"color: #D73A49\">=&gt;</span><span style=\"color: #24292E\"> t </span><span style=\"color: #D73A49\">+</span><span style=\"color: #24292E\"> </span><span style=\"color: #032F62\">&#39;!&#39;</span><span style=\"color: #24292E\">]</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">);</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// {</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   counter: 6,</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//     { id: 27, title: &#39;Fish!&#39; }</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//   ]</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">// }</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"modifiers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#modifiers\">#</a> Modifiers</h2>\n<p>This library also provides of state setter modifiers which can optionally be included to provide different behavior when setting state.</p>\n<h3 id=\"force(changes)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#force(changes)\">#</a> <code>force(changes)</code></h3>\n<h3 id=\"force(...path%2C-changes)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#force(...path%2C-changes)\">#</a> <code>force(...path, changes)</code></h3>\n<h3 id=\"force(%5B...path%2C-changes%5D%2C-%5B...path%2C-changes%5D)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#force(%5B...path%2C-changes%5D%2C-%5B...path%2C-changes%5D)\">#</a> <code>force([...path, changes], [...path, changes])</code></h3>\n<p>By default state only updates on value change. To get typical signal like behavior on a change you can force update using the force modifier.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">force</span><span style=\"color: #24292E\">({name: </span><span style=\"color: #032F62\">&#39;John&#39;</span><span style=\"color: #24292E\">}));</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"reconcile(...path%2C-value)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reconcile(...path%2C-value)\">#</a> <code>reconcile(...path, value)</code></h3>\n<p>This can be used to do deep diffs by applying the changes from a new State value. This is useful when pulling in immutable data trees from stores to ensure the least amount of mutations to your state. It can also be used to replace the all keys on the base state object if no path is provided as it does both positive and negative diff.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">reconcile</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;users&#39;</span><span style=\"color: #24292E\">, store.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;users&#39;</span><span style=\"color: #24292E\">)))</span></span>\n<span class=\"line\"></span></code></pre>\n<p>If you pass as array you can configure the diff algorithm with an options object:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span class=\"line\"><span style=\"color: #6F42C1\">setState</span><span style=\"color: #24292E\">(</span><span style=\"color: #6F42C1\">reconcile</span><span style=\"color: #24292E\">(</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  [</span><span style=\"color: #032F62\">&#39;users&#39;</span><span style=\"color: #24292E\">, store.</span><span style=\"color: #6F42C1\">get</span><span style=\"color: #24292E\">(</span><span style=\"color: #032F62\">&#39;users&#39;</span><span style=\"color: #24292E\">)],</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  {</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    key: </span><span style=\"color: #032F62\">&#39;_id&#39;</span><span style=\"color: #24292E\"> </span><span style=\"color: #6A737D\">// does a keyed comparison on arrays with key - default: &#39;id&#39;</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">    merge: </span><span style=\"color: #005CC5\">false</span><span style=\"color: #24292E\"> </span><span style=\"color: #6A737D\">//  overwrites rather than detects array position changes when not keyed - default: false</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #24292E\">))</span></span>\n<span class=\"line\"></span></code></pre>\n</section>",
  "body": "v0.10.0 makes significant changes to the reactive system. Key updates:\r\n* Fixed synchronicity on all hooks/control flows.\r\n* Adds the ability to use comparators on `createMemo`.\r\n* Fixes bugs with nested control flows.\r\n* Fixes bugs with Suspense.\r\n* Update Suspense `delayMs` to `maxDuration` to match React. (Usage of `maxDuration` still experimental)"
}