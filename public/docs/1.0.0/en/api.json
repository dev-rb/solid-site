{
  "sections": [
    {
      "slug": "basic-reactivity",
      "title": "Basic Reactivity",
      "level": 1,
      "children": [
        {
          "slug": "createsignal",
          "title": "createSignal",
          "level": 2,
          "children": []
        },
        {
          "slug": "createeffect",
          "title": "createEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "creatememo",
          "title": "createMemo",
          "level": 2,
          "children": []
        },
        {
          "slug": "createresource",
          "title": "createResource",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "lifecycles",
      "title": "Lifecycles",
      "level": 1,
      "children": [
        {
          "slug": "onmount",
          "title": "onMount",
          "level": 2,
          "children": []
        },
        {
          "slug": "oncleanup",
          "title": "onCleanup",
          "level": 2,
          "children": []
        },
        {
          "slug": "onerror",
          "title": "onError",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "reactive-utilities",
      "title": "Reactive Utilities",
      "level": 1,
      "children": [
        {
          "slug": "untrack",
          "title": "untrack",
          "level": 2,
          "children": []
        },
        {
          "slug": "batch",
          "title": "batch",
          "level": 2,
          "children": []
        },
        {
          "slug": "on",
          "title": "on",
          "level": 2,
          "children": []
        },
        {
          "slug": "createroot",
          "title": "createRoot",
          "level": 2,
          "children": []
        },
        {
          "slug": "mergeprops",
          "title": "mergeProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "splitprops",
          "title": "splitProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "usetransition",
          "title": "useTransition",
          "level": 2,
          "children": []
        },
        {
          "slug": "observable",
          "title": "observable",
          "level": 2,
          "children": []
        },
        {
          "slug": "maparray",
          "title": "mapArray",
          "level": 2,
          "children": []
        },
        {
          "slug": "indexarray",
          "title": "indexArray",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "stores",
      "title": "Stores",
      "level": 1,
      "children": [
        {
          "slug": "createstore",
          "title": "createStore",
          "level": 2,
          "children": [
            {
              "slug": "getters",
              "title": "Getters",
              "level": 3,
              "children": []
            },
            {
              "slug": "updating-stores",
              "title": "Updating Stores",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "produce",
          "title": "produce",
          "level": 2,
          "children": []
        },
        {
          "slug": "reconcile",
          "title": "reconcile",
          "level": 2,
          "children": []
        },
        {
          "slug": "createmutable",
          "title": "createMutable",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "component-apis",
      "title": "Component APIs",
      "level": 1,
      "children": [
        {
          "slug": "createcontext",
          "title": "createContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "usecontext",
          "title": "useContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "children",
          "title": "children",
          "level": 2,
          "children": []
        },
        {
          "slug": "lazy",
          "title": "lazy",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "secondary-primitives",
      "title": "Secondary Primitives",
      "level": 1,
      "children": [
        {
          "slug": "createdeferred",
          "title": "createDeferred",
          "level": 2,
          "children": []
        },
        {
          "slug": "createcomputed",
          "title": "createComputed",
          "level": 2,
          "children": []
        },
        {
          "slug": "createrendereffect",
          "title": "createRenderEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "createselector",
          "title": "createSelector",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendering",
      "title": "Rendering",
      "level": 1,
      "children": [
        {
          "slug": "render",
          "title": "render",
          "level": 2,
          "children": []
        },
        {
          "slug": "hydrate",
          "title": "hydrate",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostring",
          "title": "renderToString",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostringasync",
          "title": "renderToStringAsync",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetonodewritable",
          "title": "pipeToNodeWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetowritable",
          "title": "pipeToWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "isserver",
          "title": "isServer",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "control-flow",
      "title": "Control Flow",
      "level": 1,
      "children": [
        {
          "slug": "%3Cfor%3E",
          "title": "<For>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cshow%3E",
          "title": "<Show>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cswitch%3E%2F%3Cmatch%3E",
          "title": "<Switch>/<Match>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cindex%3E",
          "title": "<Index>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cerrorboundary%3E",
          "title": "<ErrorBoundary>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspense%3E",
          "title": "<Suspense>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspenselist%3E-(experimental)",
          "title": "<SuspenseList> (Experimental)",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cdynamic%3E",
          "title": "<Dynamic>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cportal%3E",
          "title": "<Portal>",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "special-jsx-attributes",
      "title": "Special JSX Attributes",
      "level": 1,
      "children": [
        {
          "slug": "ref",
          "title": "ref",
          "level": 2,
          "children": []
        },
        {
          "slug": "classlist",
          "title": "classList",
          "level": 2,
          "children": []
        },
        {
          "slug": "style",
          "title": "style",
          "level": 2,
          "children": []
        },
        {
          "slug": "innerhtml%2Ftextcontent",
          "title": "innerHTML/textContent",
          "level": 2,
          "children": []
        },
        {
          "slug": "on___",
          "title": "on___",
          "level": 2,
          "children": []
        },
        {
          "slug": "on%3A___%2Foncapture%3A___",
          "title": "on:___/oncapture:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "use%3A___",
          "title": "use:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "prop%3A___",
          "title": "prop:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "attr%3A___",
          "title": "attr:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "%2F*-%40once-*%2F",
          "title": "/* @once */",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "comparison-with-other-libraries",
      "title": "Comparison with other Libraries",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "advice-for-migrating%3A",
              "title": "Advice for migrating:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "advice-for-migrating%3A-1",
              "title": "Advice for migrating:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "advice-for-migrating%3A-2",
              "title": "Advice for migrating:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "advice-for-migrating%3A-3",
              "title": "Advice for migrating:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%26-lighterhtml",
          "title": "Lit & LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "advice-for-migrating%3A-4",
              "title": "Advice for migrating:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "others",
          "title": "Others",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "faq",
      "title": "FAQ",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"basic-reactivity\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#basic-reactivity\">#</a> Basic Reactivity</h1><h2 id=\"createsignal\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createsignal\">#</a> <code>createSignal</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>This is the most basic reactive primitive used to track a single value that changes over time. The create function returns a get and set pair of functions to access and update the signal.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// read value</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// set value</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(nextValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// set value with a function setter</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> prev </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> next);</span></span>\n<span class=\"line\"></span></code></pre><p>Remember to access signals under a tracking scope if you wish them to react to updates. Tracking scopes are functions that are passed to computations like <code>createEffect</code> or JSX expressions.</p><blockquote> <p>If you wish to store a function in a Signal you must use the function form:</p> <pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> myFunction);</span></span>\n<span class=\"line\"></span></code></pre> </blockquote><h2 id=\"createeffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createeffect\">#</a> <code>createEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a new computation that automatically tracks dependencies and runs after each render where a dependency has changed. Ideal for using <code>ref</code>s and managing other side effects.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">a</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setA</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// effect that depends on signal `a`</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">doSideEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>The effect function is called with the value returned from the effect function's last execution. This value can be initialized as an optional 2nd argument. This can be useful for diffing without creating an additional closure.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (sum </span><span style=\"color:#d73a49\">!==</span><span style=\"color:#24292e\"> prev) console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(sum);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> sum;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"creatememo\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#creatememo\">#</a> <code>createMemo</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a readonly derived signal that recalculates its value whenever the executed code's dependencies update.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">computeExpensiveValue</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">(), </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// read value</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p>The memo function is called with the value returned from the memo function's last execution. This value can be initialized as an optional 2nd argument. This is useful for reducing computations.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">input</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> prev, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createresource\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createresource\">#</a> <code>createResource</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">loading</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">error</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a signal that can manage async requests. The <code>fetcher</code> is an async function that accepts return value of the <code>source</code> if provided and returns a Promise whose resolved value is set in the resource. The fetcher is not reactive so use the optional first argument if you want it to run more than once. If the source resolves to false, null, or undefined will not to fetch.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">data</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">mutate</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">refetch</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">(getQuery, fetchData);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// read value</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">data</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// check if loading</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.loading;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// check if errored</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.error;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// directly set value without creating promise</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#24292e\">(optimisticValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// refetch last request just because</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p><code>loading</code> and <code>error</code> are reactive getters and can be tracked.</p><h1 id=\"lifecycles\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lifecycles\">#</a> Lifecycles</h1><h2 id=\"onmount\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onmount\">#</a> <code>onMount</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Registers a method that runs after initial render and elements have been mounted. Ideal for using <code>ref</code>s and managing other one time side effects. It is equivalent to a <code>createEffect</code> which does not have any dependencies.</p><h2 id=\"oncleanup\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#oncleanup\">#</a> <code>onCleanup</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Registers a cleanup method that executes on disposal or recalculation of the current reactive scope. Can be used in any Component or Effect.</p><h2 id=\"onerror\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onerror\">#</a> <code>onError</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onError</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Registers an error handler method that executes when child scope errors. Only the nearest scope error handlers execute. Rethrow to trigger up the line.</p><h1 id=\"reactive-utilities\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reactive-utilities\">#</a> Reactive Utilities</h1><p>These helpers provide the ability to better schedule updates and control how reactivity is tracked.</p><h2 id=\"untrack\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#untrack\">#</a> <code>untrack</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Ignores tracking any of the dependencies in the executing code block and returns the value.</p><h2 id=\"batch\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#batch\">#</a> <code>batch</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">batch</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Holds committing updates within the block until the end to prevent unnecessary recalculation. This means that reading values on the next line will not have updated yet. <a href=\"#createstore\">Solid Store</a>'s set method and Effects automatically wrap their code in a batch.</p><h2 id=\"on\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on\">#</a> <code>on</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">), </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">deps</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevInput</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">defer</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>on</code> is designed to be passed into a computation to make its dependencies explicit. If an array of dependencies is passed, <code>input</code> and <code>prevInput</code> are arrays.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">())));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// is equivalent to:</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">v</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>You can also not run the computation immediately and instead opt in for it to only run on change by setting the defer option to true.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// doesn&#39;t run immediately</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v), { defer: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setA</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;new&quot;</span><span style=\"color:#24292e\">); </span><span style=\"color:#6a737d\">// now it runs</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createroot\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createroot\">#</a> <code>createRoot</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRoot</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">dispose</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a new non-tracked context that doesn't auto-dispose. This is useful for nested reactive contexts that you do not wish to release when the parent re-evaluates. It is a powerful pattern for caching.</p><p>All Solid code should be wrapped in one of these top level as they ensure that all memory/computations are freed up. Normally you do not need to worry about this as <code>createRoot</code> is embedded into all <code>render</code> entry functions.</p><h2 id=\"mergeprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mergeprops\">#</a> <code>mergeProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">sources</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>A reactive object <code>merge</code> method. Useful for setting default props for components in case caller doesn't provide them. Or cloning the props object including reactive properties.</p><p>This method works by using a proxy and resolving properties in reverse order. This allows for dynamic tracking of properties that aren't present when the prop object is first merged.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// default props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// clone props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">newProps </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// merge props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"splitprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#splitprops\">#</a> <code>splitProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">keys</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;(</span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)[]&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">parts</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Partial</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p>This is the replacement for destructuring. It splits a reactive object by keys while maintaining reactivity.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;children&quot;</span><span style=\"color:#24292e\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">Child {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#e36209\">div</span><span style=\"color:#24292e\">&gt;{local.children}</span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;/&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"usetransition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usetransition\">#</a> <code>useTransition</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  (</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">cb</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>Used to batch async updates in a transaction deferring commit until all async processes are complete. This is tied into Suspense and only tracks resources read under Suspense boundaries.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">isPending</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">start</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// check if transitioning</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">isPending</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// wrap in transition</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">start</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setSignal</span><span style=\"color:#24292e\">(newValue), () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/* transition is done */</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"observable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#observable\">#</a> <code>observable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>This method takes a signal and produces a simple Observable. Consume it from the Observable library of your choice with typically with the <code>from</code> operator.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { from } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;rxjs&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">s</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">set</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">obsv$</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">from</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">(s));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">obsv$.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"maparray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#maparray\">#</a> <code>mapArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Reactive map helper that caches each item by reference to reduce unnecessary mapping on updates. It only runs the mapping function once per value and then moves or removes it as needed. The index argument is a signal. The map function itself is not tracking.</p><p>Underlying helper for the <code>&lt;For&gt;</code> control flow.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.name);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">description</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setDescription</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.description);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    id: model.id,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setName,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setDescription</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"indexarray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#indexarray\">#</a> <code>indexArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Similar to <code>mapArray</code> except it maps by index. The item is a signal and the index is now the constant.</p><p>Underlying helper for the <code>&lt;Index&gt;</code> control flow.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">id</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().id</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">firstInitial</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().firstName[</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"stores\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#stores\">#</a> Stores</h1><p>These APIs are available at <code>solid-js/store</code>.</p><h2 id=\"createstore\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstore\">#</a> <code>createStore</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">SetStoreFunction</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p>This creates a tree of Signals as proxy that allows individual values in nested data structures to be independently tracked. The create function returns a readonly proxy object, and a setter function.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// read value</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// set value</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ merge: </span><span style=\"color:#032f62\">&quot;thisValue&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;path&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;to&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;value&quot;</span><span style=\"color:#24292e\">, newValue);</span></span>\n<span class=\"line\"></span></code></pre><p>Store objects being proxies only track on property access. And on access Stores recursively produces nested Store objects on nested data. However it only wraps arrays and plain objects. Classes are not wrapped. So things like <code>Date</code>, <code>HTMLElement</code>, <code>RegExp</code>, <code>Map</code>, <code>Set</code> are not granularly reactive. Additionally, the top level state object cannot be tracked without accessing a property on it. So it is not suitable to use for things you iterate over as adding new keys or indexes cannot trigger updates. So put any lists on a key of state rather than trying to use the state object itself.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// put the list as a key on the state object</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ list: [] });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// access the `list` property on the state object</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/*...*/</span><span style=\"color:#24292e\">}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"getters\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#getters\">#</a> Getters</h3><p>Store objects support the use of getters to store calculated values.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>These are simple getters, so you still need to use a Memo if you want to cache a value;</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> fullName;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">fullName </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"updating-stores\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#updating-stores\">#</a> Updating Stores</h3><p>Changes can take the form of function that passes previous state and returns new state or a value. Objects are always shallowly merged. Set values to <code>undefined</code> to delete them from the Store.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  lastName: </span><span style=\"color:#032f62\">&quot;Miller&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ firstName: </span><span style=\"color:#032f62\">&quot;Johnny&quot;</span><span style=\"color:#24292e\">, middleName: </span><span style=\"color:#032f62\">&quot;Lee&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Miller&#39; })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">state</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ preferredName: state.firstName, lastName: </span><span style=\"color:#032f62\">&quot;Milner&quot;</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, preferredName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Milner&#39; })</span></span>\n<span class=\"line\"></span></code></pre><p>It supports paths including key arrays, object ranges, and filter functions.</p><p>setState also supports nested setting where you can indicate the path to the change. When nested the state you are updating may be other non Object values. Objects are still merged but other values (including Arrays) are replaced.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  counter: </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  list: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">23</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Birds&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">27</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Fish&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;counter&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">l</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">l, {id: </span><span style=\"color:#005cc5\">43</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Marsupials&#39;</span><span style=\"color:#24292e\">}]);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&#39;read&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   counter: 3,</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 27, title: &#39;Fish&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 43, title: &#39;Marsupials&#39;, read: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><p>Path can be string keys, array of keys, iterating objects ({from, to, by}), or filter functions. This gives incredible expressive power to describe state changes.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  todos: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Finish work&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Go grocery shopping&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Make dinner&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, [</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">], </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, { from: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, to: </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\"> }, </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">c);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> todo.completed, </span><span style=\"color:#032f62\">&#39;task&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">t</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> t </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;!&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, {}, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ marked: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">todo.completed }))</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"produce\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#produce\">#</a> <code>produce</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Immer inspired API for Solid's Store objects that allows for localized mutation.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">s</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.user.name </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;Frank&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Pencil Crayon&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"reconcile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reconcile\">#</a> <code>reconcile</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">key</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">merge</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> { key: </span><span style=\"color:#032f62\">&quot;id&quot;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Diffs data changes when we can't apply granular updates. Useful for when dealing with immutable data from stores or large API responses.</p><p>The key is used when available to match items. By default <code>merge</code> false does referential checks where possible to determine equality and replaces where items are not referentially equal. <code>merge</code> true pushes all diffing to the leaves and effectively morphs the previous data to the new value.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// subscribing to an observable</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">unsubscribe</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> store.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">(({ </span><span style=\"color:#e36209\">todos</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">(todos)));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">unsubscribe</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createmutable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createmutable\">#</a> <code>createMutable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a new mutable Store proxy object. Stores only trigger updates on values changing. Tracking is done by intercepting property access and automatically tracks deep nesting via proxy.</p><p>Useful for integrating external systems or as a compatibility layer with MobX/Vue.</p><blockquote> <p><strong>Note:</strong> A mutable state can be passed around and mutated anywhere, which can make it harder to follow and easier to break unidirectional flow. It is generally recommended to use <code>createStore</code> instead. The <code>produce</code> modifier can give many of the same benefits without any of the downsides.</p> </blockquote><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// read value</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// set value</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">5</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(anotherValue);</span></span>\n<span class=\"line\"></span></code></pre><p>Mutables support setters along with getters.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">set</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    [</span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.firstName, </span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.lastName] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> value.</span><span style=\"color:#6f42c1\">split</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot; &quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"component-apis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#component-apis\">#</a> Component APIs</h1><h2 id=\"createcontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcontext\">#</a> <code>createContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">id</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">symbol</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Provider</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Context provides a form of dependency injection in Solid. It is used to save from needing to pass data as props through intermediate components.</p><p>This function creates a new context object that can be used with <code>useContext</code> and provides the <code>Provider</code> control flow. Default Context is used when no <code>Provider</code> is found above in the hierarchy.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">CounterContext</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">([{ count: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> }, {}]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">CounterProvider</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ count: props.count </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">store</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    state,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">increment</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">decrement</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">-</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">CounterContext.Provider value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{store}</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      {</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">children</span><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">CounterContext.Provider</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>The value passed to provider is passed to <code>useContext</code> as is. That means wrapping as a reactive expression will not work. You should pass in Signals and Stores directly instead of accessing them in the JSX.</p><h2 id=\"usecontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usecontext\">#</a> <code>useContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">context</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Used to grab context to allow for deep passing of props without having to pass them through each Component function.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">increment</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">decrement</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">(CounterContext);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"children\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#children\">#</a> <code>children</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Used to make it easier to interact with <code>props.children</code>. This helper resolves any nested reactivity and returns a memo. Recommended approach to using <code>props.children</code> in anything other than passing directly through to JSX.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">list</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// do something with them</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"lazy\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lazy\">#</a> <code>lazy</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt;&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;{ </span><span style=\"color:#e36209\">default</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> }&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">preload</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; };</span></span>\n<span class=\"line\"></span></code></pre><p>Used to lazy load components to allow for code splitting. Components are not loaded until rendered. Lazy loaded components can be used the same as its statically imported counterpart, receiving props etc... Lazy components trigger <code>&lt;Suspense&gt;</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// wrap import</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ComponentA</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;./ComponentA&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// use in JSX</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">ComponentA title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.title} </span><span style=\"color:#d73a49\">/&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"secondary-primitives\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#secondary-primitives\">#</a> Secondary Primitives</h1><p>You probably won't need them for your first app, but these useful tools to have.</p><h2 id=\"createdeferred\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createdeferred\">#</a> <code>createDeferred</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createDeferred</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a readonly that only notifies downstream changes when the browser is idle. <code>timeoutMs</code> is the maximum time to wait before forcing the update.</p><h2 id=\"createcomputed\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcomputed\">#</a> <code>createComputed</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createComputed</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a new computation that automatically tracks dependencies and runs immediately before render. Use this to write to other reactive primitives. When possible use <code>createMemo</code> instead as writing to a signal mid update can cause other computations to need to re-calculate.</p><h2 id=\"createrendereffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createrendereffect\">#</a> <code>createRenderEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a new computation that automatically tracks dependencies and runs during the render phase as DOM elements are created and updated but not necessarily connected. All internal DOM updates happen at this time.</p><h2 id=\"createselector\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createselector\">#</a> <code>createSelector</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">a</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">b</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Creates a conditional signal that only notifies subscribers when entering or exiting their key matching the value. Useful for delegated selection state. As it makes the operation O(2) instead of O(n).</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isSelected</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">(selectedId);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">()}</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">classList</span><span style=\"color:#24292e\">={{ </span><span style=\"color:#e36209\">active</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">isSelected</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">id</span><span style=\"color:#24292e\">) }}&gt;{item.name}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">li</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h1><p>These imports are exposed from <code>solid-js/web</code>.</p><h2 id=\"render\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#render\">#</a> <code>render</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">code</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>This is the browser app entry point. Provide a top level component definition or function and an element to mount to. It is recommended this element be empty as the returned dispose function will wipe all children.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"hydrate\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hydrate\">#</a> <code>hydrate</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">node</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>This method is similar to <code>render</code> except it attempts to rehydrate what is already rendered to the DOM. When initializing in the browser a page has already been server rendered.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostring\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostring\">#</a> <code>renderToString</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Renders to a string synchronously. The function also generates a script tag for progressive hydration. Options include eventNames to listen to before the page loads and play back on hydration, and nonce to put on the script tag.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostringasync\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostringasync\">#</a> <code>renderToStringAsync</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Same as <code>renderToString</code> except it will wait for all <code>&lt;Suspense&gt;</code> boundaries to resolve before returning the results. Resource data is automatically serialized into the script tag and will be hydrated on client load.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"pipetonodewritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetonodewritable\">#</a> <code>pipeToNodeWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">startWriting</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>This method renders to a Node stream. It renders the content synchronously including any Suspense fallback placeholders, and then continues to stream the data from any async resource as it completes.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span></code></pre><p>The <code>onReady</code> option is useful for writing into the stream around the the core app rendering. Remember if you use <code>onReady</code> to manually call <code>startWriting</code>.</p><h2 id=\"pipetowritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetowritable\">#</a> <code>pipeToWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">script</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">WritableStream</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>This method renders to a web stream. It renders the content synchronously including any Suspense fallback placeholders, and then continues to stream the data from any async resource as it completes.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(App, writable);</span></span>\n<span class=\"line\"></span></code></pre><p>The <code>onReady</code> option is useful for writing into the stream around the the core app rendering. Remember if you use <code>onReady</code> to manually call <code>startWriting</code>.</p><h2 id=\"isserver\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#isserver\">#</a> <code>isServer</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isServer</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>This indicates that the code is being run as the server or browser bundle. As the underlying runtimes export this as a constant boolean it allows bundlers to eliminate the code and their used imports from the respective bundles.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// I will never make it to the browser bundle</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// won&#39;t be run on the server;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"control-flow\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#control-flow\">#</a> Control Flow</h1><p>Solid uses components for control flow. The reason is that with reactivity to be performant we have to control how elements are created. For example with lists, a simple <code>map</code> is inefficient as it always maps everything. This means helper functions.</p><p>Wrapping these in components is convenient way for terse templating and allows users to compose and build their own control flows.</p><p>These built-in control flows will be automatically imported. All except <code>Portal</code> and <code>Dynamic</code> are exported from <code>solid-js</code>. Those two which are DOM specific are exported by <code>solid-js/web</code>.</p><blockquote> <p>Note: All callback/render function children of control flow are non-tracking. This allows for nesting state creation, and better isolates reactions.</p> </blockquote><h2 id=\"%3Cfor%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cfor%3E\">#</a> <code>&lt;For&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">For</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Simple referentially keyed loop control flow.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Optional second argument is an index signal:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{</span><span style=\"color:#6f42c1\">index</span><span style=\"color:#24292e\">()} {item}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cshow%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cshow%3E\">#</a> <code>&lt;Show&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Show</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>The Show control flow is used to conditional render part of the view: it renders <code>children</code> when the <code>when</code> is truthy, an <code>fallback</code> otherwise. It is similar to the ternary operator (<code>when ? children : fallback</code>) but is ideal for templating JSX.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.count </span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Show can also be used as a way of keying blocks to a specific data model. Ex the function is re-executed whenever the user model is replaced.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.user} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">user</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{user.firstName}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cswitch%3E%2F%3Cmatch%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cswitch%3E%2F%3Cmatch%3E\">#</a> <code>&lt;Switch&gt;</code>/<code>&lt;Match&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Switch</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Match</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;);</span></span>\n<span class=\"line\"></span></code></pre><p>Useful for when there are more than 2 mutual exclusive conditions. Can be used to do things like simple routing.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Not Found&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;home&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Home</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;settings&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Settings</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Match also supports function children to serve as keyed flow.</p><h2 id=\"%3Cindex%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cindex%3E\">#</a> <code>&lt;Index&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Index</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Non-keyed list iteration (rows keyed to index). This is useful when there is no conceptual key, like if the data consists of primitives and it is the index that is fixed rather than the value.</p><p>The item is a signal:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Optional second argument is an index number:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{index} {</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cerrorboundary%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cerrorboundary%3E\">#</a> <code>&lt;ErrorBoundary&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">ErrorBoundary</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reset</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Catches uncaught errors and renders fallback content.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Something went terribly wrong&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Also supports callback form which passes in error and a reset function.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">err</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">reset</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{reset}&gt;Error: {err.</span><span style=\"color:#6f42c1\">toString</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspense%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspense%3E\">#</a> <code>&lt;Suspense&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Suspense</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>A component that tracks all resources read under it and shows a fallback placeholder state until they are resolved. What makes <code>Suspense</code> different than <code>Show</code> is it is non-blocking in that both branches exist at the same time even if not currently in the DOM.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">AsyncComponent</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspenselist%3E-(experimental)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspenselist%3E-(experimental)\">#</a> <code>&lt;SuspenseList&gt;</code> (Experimental)</h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">SuspenseList</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">revealOrder</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;backwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;together&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">tail</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;hidden&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>SuspenseList</code> allows for coordinating multiple parallel <code>Suspense</code> and <code>SuspenseList</code> components. It controls the order in which content is revealed to reduce layout thrashing and has an option to collapse or hide fallback states.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">revealOrder</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">tail</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">ProfileDetails</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.user} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading posts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTimeline</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">posts</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.posts} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading fun facts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTrivia</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">trivia</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.trivia} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>SuspenseList is still experimental and does not have full SSR support.</p><h2 id=\"%3Cdynamic%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cdynamic%3E\">#</a> <code>&lt;Dynamic&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Dynamic</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">component</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">IntrinsicElements</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>This component lets you insert an arbitrary Component or tag and passes the props through to it.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Dynamic</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">component</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.component} </span><span style=\"color:#005cc5\">someProp</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.something} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cportal%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cportal%3E\">#</a> <code>&lt;Portal&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Portal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">mount</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Node</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">useShadow</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">isSVG</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Text</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>This inserts the element in the mount node. Useful for inserting Modals outside of the page layout. Events still propagate through the Component Hierarchy.</p><p>The portal is mounted in a <code>&lt;div&gt;</code> unless the target is the document head. <code>useShadow</code> places the element in a Shadow Root for style isolation, and <code>isSVG</code> is required if inserting into an SVG element so that the <code>&lt;div&gt;</code> is not inserted.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mount</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;modal&quot;</span><span style=\"color:#24292e\">)}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"special-jsx-attributes\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#special-jsx-attributes\">#</a> Special JSX Attributes</h1><p>In general Solid attempts to stick to DOM conventions. Most props are treated as attributes on native elements and properties on Web Components, but a few of them have special behavior.</p><p>For custom namespaced attributes with TypeScript you need to extend Solid's JSX namespace:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// use:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitProperties</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// prop:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitAttributes</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// attr:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// on:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomCaptureEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// oncapture:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"ref\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ref\">#</a> <code>ref</code></h2><p>Refs are a way of getting access to underlying DOM elements in our JSX. While it is true one could just assign an element to a variable, it is more optimal to leave components in the flow of JSX. Refs are assigned at render time but before the elements are connected to the DOM. They come in 2 flavors.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// simple assignment</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// use onMount or createEffect to read after connected to DOM</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv));</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Or, callback function (called before connected to DOM)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(el)} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Refs can also be used on Components. They still need to be attached on the otherside.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComp</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.ref} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv.clientWidth));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"classlist\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#classlist\">#</a> <code>classList</code></h2><p>A helper that leverages <code>element.classList.toggle</code>. It takes an object whose keys are class names and assigns them when the resolved value is true.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#005cc5\">classList</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ active: state.active, editing: state.currentId </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> row.id }}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"style\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#style\">#</a> <code>style</code></h2><p>Solid's style helper works with either a string or with an object. Unlike React's version Solid uses <code>element.style.setProperty</code> under the hood. This means support for CSS vars, but it also means we use the lower, dash-case version of properties. This actually leads to better performance and consistency with SSR output.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// string</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#032f62\">`color: green; background-color: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">color</span><span style=\"color:#032f62\">}; height: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">height</span><span style=\"color:#032f62\">}px`</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// object</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  color: </span><span style=\"color:#032f62\">&quot;green&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#032f62\">&quot;background-color&quot;</span><span style=\"color:#24292e\">: state.color,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  height: state.height </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\"> }}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// css variable</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ </span><span style=\"color:#032f62\">&quot;--my-custom-color&quot;</span><span style=\"color:#24292e\">: state.themeColor }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"innerhtml%2Ftextcontent\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#innerhtml%2Ftextcontent\">#</a> <code>innerHTML</code>/<code>textContent</code></h2><p>These work the same as their property equivalent. Set a string and they will be set. <strong>Be careful!!</strong> Setting <code>innerHTML</code> with any data that could be exposed to an end user as it could be a vector for malicious attack. <code>textContent</code> while generally not needed is actually a performance optimization when you know the children will only be text as it bypasses the generic diffing routine.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">textContent</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.text} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on___\">#</a> <code>on___</code></h2><p>Event handlers in Solid typically take the form of <code>onclick</code> or <code>onClick</code> depending on style. The event name is always lowercased. Solid uses semi-synthetic event delegation for common UI events that are composed and bubble. This improves performance for these common events.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(e.currentTarget)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Solid also supports passing an array to the event handler to bind a value to the first argument of the event handler. This doesn't use <code>bind</code> or create an additional closure, so it is highly optimized way delegating events.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">handler</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">itemId</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">/*...*/</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}&gt;{(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[handler, item.id]} /&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Events cannot be rebound and the bindings are not reactive. The reason is that it is generally more expensive to attach/detach listeners. Since events naturally are called there is no need for reactivity simply shortcut your handler if desired.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// if defined call it, otherwised don&#39;t.</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.</span><span style=\"color:#6f42c1\">handleClick</span><span style=\"color:#24292e\">?.()} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on%3A___%2Foncapture%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on%3A___%2Foncapture%3A___\">#</a> <code>on:___</code>/<code>oncapture:___</code></h2><p>For any other events, perhaps ones with unusual names, or ones you wish not to be delegated there are the <code>on</code> namespace events. This simply adds an event listener verbatim.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">on</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">Weird-Event</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">alert</span><span style=\"color:#24292e\">(e.detail)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"use%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#use%3A___\">#</a> <code>use:___</code></h2><p>These are custom directives. In a sense this is just syntax sugar over ref but allows us to easily attach multiple directives to a single element. A directive is simply a function with the following signature:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">directive</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">accessor</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Directive functions are called at render time but before being added to the DOM. You can do whatever you'd like in them including create signals, effects, register clean-up etc.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">field</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setField</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (el.value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">field</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  el.</span><span style=\"color:#6f42c1\">addEventListener</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;input&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setField</span><span style=\"color:#24292e\">(e.target.value));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">input type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">use</span><span style=\"color:#24292e\">:model</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[name, setName]} /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>To register with TypeScript extend the JSX namespace.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">model</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"prop%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#prop%3A___\">#</a> <code>prop:___</code></h2><p>Forces the prop to be treated as a property instead of an attribute.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">scrollTop</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.scrollPos </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"attr%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attr%3A___\">#</a> <code>attr:___</code></h2><p>Forces the prop to be treated as a attribute instead of an property. Useful for Web Components where you want to set attributes.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">status</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.status} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%2F*-%40once-*%2F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%2F*-%40once-*%2F\">#</a> <code>/* @once */</code></h2><p>Solid's compiler uses a simple heuristic for reactive wrapping and lazy evaluation of JSX expressions. Does it contain a function call, a property access, or JSX? If yes we wrap it in a getter when passed to components or in an effect if passed to native elements.</p><p>Knowing this we can reduce overhead of things we know will never change simply by accessing them outside of the JSX. A simple variable will never be wrapped. We can also tell the compiler not to wrap them by starting the expression with a comment decorator <code>/_ @once _/</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">static</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>This also works on children.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate}&lt;/</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre></section><section class=\"mt-10\"><h1 id=\"comparison-with-other-libraries\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#comparison-with-other-libraries\">#</a> Comparison with other Libraries</h1><p>This section cannot escape some bias but I think it is important to understand where Solid's solution sits compared to other libraries. This is not about performance. For a definitive look at performance feel free to look at the <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a>.</p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React has had a big influence on Solid. Its unidirectional flow and explicit segregation of read and write in its Hooks API informed Solid's API. More so than the objective of being just a &quot;Render Library&quot; rather than a framework. Solid has strong opinions on how to approach managing data in application development but doesn't seek to constrain its execution.</p><p>However, as much as Solid aligns with React's design philosophy, it works fundamentally differently. React uses a Virtual DOM and Solid does not. React's abstraction is top down component partition where render methods are called repeatedly and diffed. Solid, instead, renders each Template once in its entirety, constructing its reactive graph and only then executes instructions related to fine-grained changes.</p><h4 id=\"advice-for-migrating%3A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advice-for-migrating%3A\">#</a> Advice for migrating:</h4><p>Solid's update model is nothing like React, or even React + MobX. Instead of thinking of function components as the <code>render</code> function, think of them as a <code>constructor</code>. Watch out for destructuring or early property access losing reactivity. Solid's primitives have no restrictions like the Hook Rules so you are free to nest them as you see fit. You don't need explicit keys on list rows to have &quot;keyed&quot; behavior. Finally, there is no VDOM so imperative VDOM APIs like <code>React.Children</code> and <code>React.cloneElement</code> make no sense. I encourage finding different ways to solve problems that use these declaratively.</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Solid is not particularly influenced by Vue design-wise, but they are comparable in approach. They both use Proxies in their Reactive system with read based auto-tracking. But that is where the similarities end. Vue's fine grained dependency detection just feeds into a less fine-grained Virtual DOM and Component system whereas Solid keeps its granularity right down to its direct DOM updates.</p><p>Vue values easiness where Solid values transparency. Although Vue's new direction with Vue 3 aligns more with the approach Solid takes. These libraries might align more over time depending on how they continue to evolve.</p><h4 id=\"advice-for-migrating%3A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advice-for-migrating%3A-1\">#</a> Advice for migrating:</h4><p>As another modern reactive library migration from Vue 3 should feel familiar. Solid's components are very much like tagging the template on the end of Vue's <code>setup</code> function. Be wary of overwrapping state derivations with computations, try a function. Reactivity is pervasive. Solid's proxies are intentionally read-only. Don't knock it before you try it.</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte pioneered the precompiled disappearing framework that Solid also employs to a certain degree. Both libraries are truly reactive and can produce really small execution code bundles although Svelte is the winner here for small demos. Solid requires a bit more explicitness in its declarations, relying less on implicit analysis from the compiler, but that is part of what gives Solid superior performance. Solid also keeps more in the runtime which scales better in larger apps. Solid's RealWorld demo implementation is 25% smaller than Svelte's.</p><p>Both libraries aim to help their developers write less code but approach it completely differently. Svelte 3 focuses on the optimization of the ease of dealing with localized change focusing on plain object interaction and two-way binding. In constrast Solid focuses on the data flow by deliberately embracing CQRS and immutable interface. With functional template composition, in many cases, Solid allows developers to write even less code than Svelte although Svelte's template syntax is definitely terser.</p><h4 id=\"advice-for-migrating%3A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advice-for-migrating%3A-2\">#</a> Advice for migrating:</h4><p>Developer experience is different enough that while some things are analogous it is a very different experience. Components in Solid are cheap, so don't shy away from having more of them.</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>This library owes its existence to Knockout. Modernizing its model for fine grained dependency detection was the motivation for this project. Knockout was released in 2010 and supports Microsoft Explorer back to IE6 while much of Solid doesn't support IE at all.</p><p>Knockout's bindings are just strings in HTML which are walked over at runtime. They depend on cloning context ($parent etc...). Whereas Solid uses JSX or Tagged Template Literals for templating opting for an in JavaScript API.</p><p>The biggest difference might be that Solid's approach to batching changes which ensures synchronicity whereas Knockout has deferUpdates which uses a deferred microtask queue.</p><h4 id=\"advice-for-migrating%3A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advice-for-migrating%3A-3\">#</a> Advice for migrating:</h4><p>If you are used to Knockout, Solid's primitives might look strange to you. The read/write separation is intentional and not just to make life harder. Look to adopting a state/action (Flux) mental model. While the libraries look similar they promote different best practices.</p><h2 id=\"lit-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%26-lighterhtml\">#</a> Lit &amp; LighterHTML</h2><p>These libraries are incredibly similar and have had some influence on Solid. Mostly that Solid's compiled code uses a very similar method to performantly initially render the DOM. Cloning Template elements and using comment placeholders are something that Solid and these libraries share in common.</p><p>The biggest difference is that while these libraries do not use the Virtual DOM they treat rendering the same way, top down, requiring component partitioning to keep things sane. By contrast, Solid uses its fine grained Reactive Graph to only update what has changed and in doing so only shares this technique for its initial render. This approach takes advantage from the initial speed only available to native DOM and also have the most performant approach to updates.</p><h4 id=\"advice-for-migrating%3A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advice-for-migrating%3A-4\">#</a> Advice for migrating:</h4><p>These libraries are pretty minimal and easy to build on top. However, keep in mind that <code>&lt;MyComp/&gt;</code> isn't just HTMLElement (array or function). Try to keep your things in the JSX template. Hoisting works for the most part but it is best to mentally think of this still as a render library and not a HTMLElement factory.</p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>This library had the greatest influence on Solid's reactive design. Solid used S.js internally for a couple of years until the feature set placed them on diffenent paths. S.js is one of the most efficient reactive libraries to date. It models everything off synchronous time steps like a digital circuit and ensures consistency without having to do many of the more complicated mechanisms found in libraries like MobX. Solid's reactivity in the end is a sort of hybrid between S and MobX. This gives it greater performance than most reactive libraries (Knockout, MobX, Vue) while retaining the ease of mental model for the developer. S.js ultimately is still the more performant reactive library although the difference is hardly noticeable in all but the most grueling synthetic benchmarks.</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS is a Reactive library. While Solid has a similar idea of Observable data it uses a much different application of the observer pattern. While Signals are like a simple version of an Observable (only the next), the pattern of auto dependency detection supplants RxJS' hundred or so operators. Solid could have taken this approach, and indeed earlier, versions of the library included similar operators, but in most cases it is more straightforward to write your own transformation logic in a computation. Where Observables are cold starting, unicast and push-based, many problems on the client lend themselves to hot startup and being multicast which is Solid's default behavior.</p><h2 id=\"others\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#others\">#</a> Others</h2><p>Angular and a few other popular libraries are notably missing from this comparison. Lack of experience with them prevents making any adequate comparisons. Generally, Solid has little in common with larger Frameworks and it is much harder to compare them head on.</p></section><section class=\"mt-10\"><h1 id=\"faq\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#faq\">#</a> FAQ</h1><h3 id=\"1.-jsx-without-a-vdom%3F-is-this-vaporware%3F-i've-heard-prominent-voices-like-the-authors-of-the-other-frameworks-say-this-isn't-possible.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-jsx-without-a-vdom%3F-is-this-vaporware%3F-i've-heard-prominent-voices-like-the-authors-of-the-other-frameworks-say-this-isn't-possible.\">#</a> 1. JSX without a VDOM? Is this vaporware? I've heard prominent voices like the authors of the other frameworks say this isn't possible.</h3><p>It is possible when you don't have React's update model. JSX is a Template DSL like any other. Just one that is more flexible in certain ways. Inserting arbitrary JavaScript can be challenging at times, but no different than supporting spread operators. So no this isn't vapourware but an approach proven to be one of the most performant.</p><p>The real benefit comes in how extensible it is. You have the compiler working for you giving you optimal native DOM updates but you have all the freedom of a library like React to write Components using techniques like Render Props and Higher Order Components along side your reactive &quot;hooks&quot;. Don't like how Solid's control flow works? Write your own.</p><h3 id=\"2.-how-is-solid-so-performant%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-how-is-solid-so-performant%3F\">#</a> 2. How is Solid so performant?</h3><p>We wish we could point to a single thing, but it really is the combination of many important design decisions:</p><ol> <li>Explicit reactivity so only the things that should be reactive are tracked.</li> <li>Compile with initial creation in mind. Solid uses heuristics to loosen granularity to reduce the number of computations made but keep key updates granular and performant.</li> <li>Reactive expressions are just functions. This enables &quot;Vanishing Components&quot; with lazy prop evaluation removing unnecessary wrappers and synchronization overhead.</li> </ol><p>These are currently unique techniques in a combination that give Solid an edge over the competition.</p><h3 id=\"3.-is-there-react-compat%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-is-there-react-compat%3F\">#</a> 3. Is there React-Compat?</h3><p>No. And there likely never will be. While the APIs are similar and components often can be moved across with minor edits, the update model is fundamentally different. React Components render over and over so code outside of Hooks works very differently. The closures and hook rules are not only unnecessary they can be used in manners that do not work here.</p><p>Vue-compat on the other hand, that'd be doable. Although there are no plans to implement currently.</p><h3 id=\"4.-why-does-destructuring-not-work%3F-i-realized-i-can-fix-it-by-wrapping-my-whole-component-in-a-function.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-why-does-destructuring-not-work%3F-i-realized-i-can-fix-it-by-wrapping-my-whole-component-in-a-function.\">#</a> 4. Why does destructuring not work? I realized I can fix it by wrapping my whole component in a function.</h3><p>Reactivity occurs on property access on Prop and Store objects. Referencing them outside of a binding or reactive computation will not be tracked. Destructuring is perfectly fine inside of those.</p><p>However, wrapping your whole component in a function is not what you want to be doing irresponsibly. Solid does not have a VDOM. So any tracked change will run the whole function again recreating everything. Don't do it.</p><h3 id=\"5.-can-you-add-support-for-class-components%3F-i-find-the-lifecycles-are-easier-to-reason-about.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-can-you-add-support-for-class-components%3F-i-find-the-lifecycles-are-easier-to-reason-about.\">#</a> 5. Can you add support for class components? I find the lifecycles are easier to reason about.</h3><p>It is not the intention to support class components. The lifecycles of Solid are tied to scheduling the reactive system and are artificial. You could make a class out of it I suppose but effectively all the non-event handler code is basically being run in the constructor, including the render function. It's just more syntax for an excuse to make your data less granular.</p><p>Group data and its behaviors together rather than lifecycles. This is a reactive best practice that has worked for decades.</p><h3 id=\"6.-i-really-dislike-jsx%2C-any-chance-of-a-template-dsl%3F-oh%2C-i-see-you-have-tagged-template-literals%2Fhyperscript.-maybe-i-will-use-those...\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-i-really-dislike-jsx%2C-any-chance-of-a-template-dsl%3F-oh%2C-i-see-you-have-tagged-template-literals%2Fhyperscript.-maybe-i-will-use-those...\">#</a> 6. I really dislike JSX, any chance of a Template DSL? Oh, I see you have Tagged Template Literals/HyperScript. Maybe I will use those...</h3><p>Don't. Stop you right there. We use JSX the way Svelte uses their templates, to create optimized DOM instructions. The Tagged Template Literal and HyperScript solutions may be really impressive in their own right, but unless you have a real reason like a no-build requirement they are inferior in every way. Larger bundles, slower performance, and the need for manual workaround wrapping values.</p><p>It's good to have options, but Solid's JSX is really the best solution here. A Template DSL would be great as well, albeit more restrictive, but JSX gives us so much for free. TypeScript, Existing Parsers, Syntax Highlighting, TypeScript, Prettier, Code Completion, and last and not least TypeScript.</p><p>Other libraries have been adding support for these features but that has been an enormous effort and is still imperfect and a constant maintenance headache. This is really taking a pragmatic stance.</p><h3 id=\"7.-when-do-i-use-a-signal-vs-store%3F-why-are-these-different%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-when-do-i-use-a-signal-vs-store%3F-why-are-these-different%3F\">#</a> 7. When do I use a Signal vs Store? Why are these different?</h3><p>Stores automatically wrap nested values making it ideal for deep data structures, and for things like models. For most other things Signals are lightweight and do the job wonderfully.</p><p>As much we would love to wrap these together as a single thing, you can't proxy primitives. Functions are the simplest interface and any reactive expression (including state access) can be wrapped in one on transport so this provides a universal API. You can name your signals and state as you choose and it stays minimal. Last thing we'd want to do is force typing <code>.get()</code> <code>.set()</code> on the end-user or even worse <code>.value</code>. At least the former can be aliased for brevity, whereas the latter is just the least terse way to call a function.</p><h3 id=\"8.-why-can-i-not-just-assign-a-value-to-solid's-store-as-i-can-in-vue.-svelte%2C-or-mobx%3F-where-is-the-2-way-binding%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.-why-can-i-not-just-assign-a-value-to-solid's-store-as-i-can-in-vue.-svelte%2C-or-mobx%3F-where-is-the-2-way-binding%3F\">#</a> 8. Why can I not just assign a value to Solid's Store as I can in Vue. Svelte, or MobX? Where is the 2-way binding?</h3><p>Reactivity is a powerful tool but also a dangerous one. MobX knows this and introduced Strict mode and Actions to limit where/when updates occur. In Solid, which deals with whole Component trees of data, it became apparent that we can learn something from React here. You don't need to be actually immutable as long as you provide the means to have the same contract.</p><p>Being able to pass the ability to update state is arguably even more important than deciding to pass the state. So being able to separate it is important, and only possible if reading is immutable. We also don't need to pay the cost of immutability if we can still granularly update. Luckily there are tons of prior art here between ImmutableJS and Immer. Ironically Solid acts mostly as a reverse Immer with its mutable internals and immutable interface.</p><h3 id=\"9.-can-i-use-solid's-reactivity-on-its-own%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-can-i-use-solid's-reactivity-on-its-own%3F\">#</a> 9. Can I use Solid's reactivity on its own?</h3><p>Of course. While we haven't exported a standalone package it is easy to install Solid without the compiler and just use the reactive primitives. One of the benefits of granular reactivity is it is library agnostic. For that matter, almost every reactive library works this way. That is what inspired <a href=\"https://github.com/solidjs/solid\">Solid</a> and its underlying <a href=\"https://github.com/ryansolid/dom-expressions\">DOM Expressions library</a> in the first place to make a renderer purely from the reactive system.</p><p>To list a few to try: <a href=\"https://github.com/solidjs/solid\">Solid</a>, <a href=\"https://github.com/mobxjs/mobx\">MobX</a>, <a href=\"https://github.com/knockout/knockout\">Knockout</a>, <a href=\"https://github.com/sveltejs/svelte\">Svelte</a>, <a href=\"https://github.com/adamhaile/S\">S.js</a>, <a href=\"https://github.com/Riim/cellx\">CellX</a>, <a href=\"https://github.com/ds300/derivablejs\">Derivable</a>, <a href=\"https://github.com/luwes/sinuous\">Sinuous</a>, and even recently <a href=\"https://github.com/vuejs/vue\">Vue</a>. Much more goes into making a reactive library than tagging it onto a renderer like, <a href=\"https://github.com/Polymer/lit-html\">lit-html</a> for example, but it's a good way to get a feel.</p><h3 id=\"10.-does-solid-have-a-next.js-or-material-components-like-library-i-can-use%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-does-solid-have-a-next.js-or-material-components-like-library-i-can-use%3F\">#</a> 10. Does Solid have a Next.js or Material Components like library I can use?</h3><p>Not to our knowledge. If you are interested in building one we are readily available on our <a href=\"https://discord.com/invite/solidjs\">Discord</a> to help build those out. We have the fundamentals and just need to build on them.</p></section>"
}