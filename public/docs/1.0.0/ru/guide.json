{
  "sections": [
    {
      "slug": "%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B",
      "title": "Начало работы",
      "level": 1,
      "children": [
        {
          "slug": "%D0%BF%D1%80%D0%BE%D0%B1%D1%83%D0%B5%D0%BC-solid",
          "title": "Пробуем Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%B8%D0%B7%D1%83%D1%87%D0%B0%D0%B5%D0%BC-solid",
          "title": "Изучаем Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F-solid",
          "title": "Философия Solid",
          "level": 2,
          "children": [
            {
              "slug": "1.-%D0%B4%D0%B5%D0%BA%D0%BB%D0%B0%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5",
              "title": "1. Декларативные данные",
              "level": 3,
              "children": []
            },
            {
              "slug": "2.-%D0%B8%D1%81%D1%87%D0%B5%D0%B7%D0%B0%D1%8E%D1%89%D0%B8%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B",
              "title": "2. Исчезающие компоненты",
              "level": 3,
              "children": []
            },
            {
              "slug": "3.-%D1%80%D0%B0%D0%B7%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F%2F%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B8",
              "title": "3. Разделение чтения/записи",
              "level": 3,
              "children": []
            },
            {
              "slug": "4.-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B5-%D0%BB%D1%83%D1%87%D1%88%D0%B5-%D0%BB%D0%B5%D0%B3%D0%BA%D0%BE%D0%B3%D0%BE",
              "title": "4. Простое лучше легкого",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "%D0%B2%D0%B5%D0%B1-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B",
          "title": "Веб-компоненты",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3-%D0%BD%D0%B0-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0",
          "title": "Рендеринг на стороне сервера",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BD%D0%B5%D1%82-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D0%B8%3F",
          "title": "Нет компиляции?",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C",
      "title": "Реактивность",
      "level": 1,
      "children": [
        {
          "slug": "%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D1%8B",
          "title": "Введение в примитивы",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BF%D1%80%D0%B8%D1%86%D0%B8%D0%BF-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B",
          "title": "Прицип работы",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BE%D1%81%D0%BE%D0%B1%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D0%B8-solid",
          "title": "Особенности реактивности Solid",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3",
      "title": "Рендеринг",
      "level": 1,
      "children": [
        {
          "slug": "%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-jsx",
          "title": "Компиляция JSX",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%B0%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D1%8B-%D0%B8-%D0%BF%D1%80%D0%BE%D0%BF%D1%81%D1%8B",
          "title": "Атрибуты и Пропсы",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D1%8B%D0%B9-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82",
          "title": "Главный компонент",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B",
          "title": "Компоненты",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BF%D1%80%D0%BE%D0%BF%D1%81%D1%8B",
          "title": "Пропсы",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%B4%D0%BE%D1%87%D0%B5%D1%80%D0%BD%D0%B8%D0%B5-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D1%8B",
          "title": "Дочерние элементы",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3-%D0%BD%D0%B0-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-(ssr)",
      "title": "Рендеринг на стороне сервера (SSR)",
      "level": 1,
      "children": [
        {
          "slug": "%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B3%D0%B8%D0%B4%D1%80%D0%B0%D1%86%D0%B8%D0%B8",
          "title": "Скрипт гидрации",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%B0%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9-%D0%B8-%D0%BF%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%B2%D1%8B%D0%B9-ssr",
          "title": "Асинхронный и потоковый SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BF%D1%80%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B5%D1%80%D0%B5%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BF%D0%BE-ssr",
          "title": "Предостережения по SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-ssr",
          "title": "Начало работы с SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC-%D1%81%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85-%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2",
          "title": "Начало работы с созданием статических сайтов",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%BC%D0%B8-%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BC%D0%B8",
      "title": "Сравнение с другими библиотеками",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A",
              "title": "Совет по адаптации:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-1",
              "title": "Совет по адаптации:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-2",
              "title": "Совет по адаптации:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-3",
              "title": "Совет по адаптации:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%D0%B8-lighterhtml",
          "title": "Lit и LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-4",
              "title": "Совет по адаптации:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5",
          "title": "Другие",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%D1%87%D0%B0%D1%81%D1%82%D0%BE-%D0%B7%D0%B0%D0%B4%D0%B0%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B",
      "title": "Часто задаваемые вопросы",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B\">#</a> Начало работы</h1><h2 id=\"%D0%BF%D1%80%D0%BE%D0%B1%D1%83%D0%B5%D0%BC-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BF%D1%80%D0%BE%D0%B1%D1%83%D0%B5%D0%BC-solid\">#</a> Пробуем Solid</h2><p>Безусловно, самый простой способ начать работу с Solid - это попробовать его онлайн. <a href=\"https://playground.solidjs.com\">Наш REPL</a> - идеальный способ опробовать ваши идеи. Также у нас есть <a href=\"https://codesandbox.io/\">Sandbox</a>, где вы можете отредактировать любой из <a href=\"https://github.com/solidjs/solid/blob/main/documentation/resources/examples.md\">наших примеров</a>.</p><p>Кроме того, вы можете использовать наши простые <a href=\"https://vitejs.dev/\">Vite</a> шаблоны, выполнив следующие команды в своем терминале:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/js my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\">#  yarn/pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\">#  yarn/pnpm</span></span>\n<span class=\"line\"></span></code></pre><p>Или с поддержкой TypeScript:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/ts my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># yarn/pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># yarn/pnpm</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%D0%B8%D0%B7%D1%83%D1%87%D0%B0%D0%B5%D0%BC-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B8%D0%B7%D1%83%D1%87%D0%B0%D0%B5%D0%BC-solid\">#</a> Изучаем Solid</h2><p>Идея Solid состоит в том, что ваше приложение состоит из маленьких кусочков которые служат строительными блоками для приложений. Эти кусочки в основном представляют из себя функции, составляющие поверхностный API. К счастью, для начала вам не нужно знать о большинстве из них для работы с Solid.</p><p>В вашем распоряжении есть два основных типа строительных блоков: компоненты и реактивные примитивы.</p><p>Компоненты - это функции, которые принимают входные параметры (так называемые <code>пропсы</code>) и возвращают JSX элементы, включая DOM элементы и другие компоненты. Компоненты именуются в PascalCase и представляют из себя JSX элементы:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Компонент</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Привет {props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Solid&quot;</span><span style=\"color:#24292e\"> /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Компоненты легковесны, поскольку сами не имеют состояния и не имеют экземпляров. Вместо этого они служат функциями для создания для элементов DOM и реактивных примитивов.</p><p>Детальная (<code>fine-grained</code>) реактивность Solid основана на трех простых примитивах: <code>Сигнал</code>, <code>Мемо</code> и <code>Эффект</code>. Вместе они образуют механизм синхронизации с автоматическим отслеживанием, который обеспечивает обновленность вашего пользовательского интерфейса. Реактивные вычисления выполняются синхронно и принимают форму простых выражений обернутых в функции.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Реактивный примитив - `Сигнал`</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">a</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setA</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">10</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">b</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setB</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">5</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// `Эффект`</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} + ${</span><span style=\"color:#6f42c1\">b</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} = ${</span><span style=\"color:#24292e\">sum</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>Вы можете узнать больше о <a href=\"#reactivity\">Реактивности Solid</a> и <a href=\"#rendering\">Solid Рендеринг</a>.</p><h2 id=\"%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F-solid\">#</a> Философия Solid</h2><p>Solid легче изучить и использовать, если вы знаете его философию.</p><p>В дизайне Solid заложены несколько основополагающих принципов и ценностей, которые помогут нам лучше всего создавать веб-сайты и приложения.</p><h3 id=\"1.-%D0%B4%D0%B5%D0%BA%D0%BB%D0%B0%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-%D0%B4%D0%B5%D0%BA%D0%BB%D0%B0%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5\">#</a> 1. Декларативные данные</h3><p>Декларативные данные - это практика привязки описания поведения данных к их объявлениям. Это позволяет нам легко связывать данные с их поведением и хранить это всё в одном месте.</p><h3 id=\"2.-%D0%B8%D1%81%D1%87%D0%B5%D0%B7%D0%B0%D1%8E%D1%89%D0%B8%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-%D0%B8%D1%81%D1%87%D0%B5%D0%B7%D0%B0%D1%8E%D1%89%D0%B8%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B\">#</a> 2. Исчезающие компоненты</h3><p>Достаточно сложно структурировать компоненты без учета обновлений. Обновления в Solid полностью независимы от компонентов. Компонентные функции вызываются один раз, а затем просто исчезают. Компоненты существуют для организации вашего кода и ничего больше.</p><h3 id=\"3.-%D1%80%D0%B0%D0%B7%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F%2F%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B8\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-%D1%80%D0%B0%D0%B7%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F%2F%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B8\">#</a> 3. Разделение чтения/записи</h3><p>Точный контроль и предсказуемость делают системы лучше. Нам не нужна настоящая неизменяемость (<code>immutability</code>), чтобы обеспечить однонаправленный поток, нам просто нужна способность принимать осознанное решение.</p><h3 id=\"4.-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B5-%D0%BB%D1%83%D1%87%D1%88%D0%B5-%D0%BB%D0%B5%D0%B3%D0%BA%D0%BE%D0%B3%D0%BE\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B5-%D0%BB%D1%83%D1%87%D1%88%D0%B5-%D0%BB%D0%B5%D0%B3%D0%BA%D0%BE%D0%B3%D0%BE\">#</a> 4. Простое лучше легкого</h3><p>В процессе создания идеального библиотеки неспроста была выбрана детальная реактивность. Наша цель состоит в том, чтобы предоставить разработчику минимальные инструменты, которые могли бы служить хорошим фундаментом для построения UI.</p><h2 id=\"%D0%B2%D0%B5%D0%B1-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B2%D0%B5%D0%B1-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B\">#</a> Веб-компоненты</h2><p>По изначальной задумке Solid был библиотекой для работы с веб-компонентами. Со временем дизайн и цели Solid изменились. Впрочем, Solid по-прежнему остается отличным способом создания веб-компонентов. <a href=\"https://github.com/solidjs/solid/tree/main/packages/solid-element\">Solid-элемент</a> позволяет писать и оборачивать функциональные компоненты Solid для создания небольших и производительных веб-компонентов. Solid-элемент может использовать Solid Context API, а порталы Solid поддерживают Shadow DOM для добавления изолированных стилей.</p><h2 id=\"%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3-%D0%BD%D0%B0-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3-%D0%BD%D0%B0-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0\">#</a> Рендеринг на стороне сервера</h2><p>Solid предлагает решение для динамического рендеринга на стороне сервера, которое обеспечивает поистине изоморфный опыт разработки. Использование <code>Ресурсов</code>, встроенных в библиотеку Solid, для асинхронных запросов не просто облегчает работу со внешними API, но и автоматически сериализует и синхронизирует полученные данные между клиентом и браузером.</p><p>Поскольку Solid поддерживает асинхронный и рендеринг с помощью <a href=\"https://developer.mozilla.org/ru/docs/Web/API/Streams_API\">стримов</a> на сервере, вам не нужно думать об особенностях работы вашего кода на сервере - он будет отлично работать из коробки. Современная архитектура Solid и поддержка стримов означает, что такие фичи, как <a href=\"https://ru.reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\">render-as-you-fetch</a> и <a href=\"https://ru.reactjs.org/docs/code-splitting.html\">разделение кода</a> будут работать без проблем.</p><p>Для получения дополнительной информации прочтите <a href=\"#server-side-rendering\">Рендеринг на стороне сервера</a>.</p><h2 id=\"%D0%BD%D0%B5%D1%82-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D0%B8%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BD%D0%B5%D1%82-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D0%B8%3F\">#</a> Нет компиляции?</h2><p>Не любите JSX? Не возражаете вручную оборачивать ваши выражения, падения производительности и больших размеров файлов? В качестве альтернативы вы можете использовать <a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Template_literals#%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5_%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%8B_%D0%B8_%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB%D0%BE%D0%B2\">теговые шаблоны</a> или HyperScript в средах в которых у вас нет возможности использовать компилятор.</p><p>Запускать их можно прямо из браузера, используя <a href=\"https://www.skypack.dev/\">Skypack</a>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#24292e\">=</span><span style=\"color:#032f62\">&quot;module&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        createSignal,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        onCleanup,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> html </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/html&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">html</span><span style=\"color:#032f62\">`&lt;div&gt;${</span><span style=\"color:#24292e\">count</span><span style=\"color:#032f62\">}&lt;/div&gt;`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.body);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Помните, что вам все еще нужна соответствующая библиотека выражений DOM для их работы с TypeScript. Вы можете использовать теговые шаблонные литералы с <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/lit-dom-expressions\">Lit DOM Выражениями</a> или HyperScript с <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/hyper-dom-expressions\">Hyper DOM Выражениями</a>.</p></section><section class=\"mt-10\"><h1 id=\"%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C\">#</a> Реактивность</h1><p>Управление данными в Solid построено на гибких реактивных примитивах, которые отвечают за все обновления. Solid использует подход, очень похожий на MobX или Vue, за тем исключением, что он не жертвует своей точностью в пользу Virtual DOM. Зависимости автоматически отслеживаются, когда вы обращаетесь к реактивным значениям в <code>Эффектах</code> и JSX.</p><p>Примитивы Solid представлены в виде <code>create</code> функций, в основном возвращающих кортежи (<code>tuples</code>), в которых первый элемент обычно является считываемым примитивом - <a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions/get\">геттером</a>, а второй - обновляющим <a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Functions/set\">сеттером</a>. Обычно, когда мы говорим о названии примитива (например <code>Сигнале</code>), мы имеем в виду считываемую часть.</p><p>Вот, к примеру, базовый счетчик, который увеличивается раз в секунду, и обновляет наш UI в зависимости от значения <code>Сигнала</code> <code>count</code>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal, onCleanup } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-%D0%BF%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D1%8B\">#</a> Введение в примитивы</h2><p>Solid состоит из 3 основных примитивов: <code>Сигнал</code>, <code>Мемо</code> и <code>Эффект</code>. В их основе лежит паттерн наблюдатель (<code>observer</code>), в котором <code>Сигналы</code> (и <code>Мемо</code>) отслеживаются путем использования в <code>Мемо</code> и <code>Эффекты</code>.</p><p><code>Сигналы</code> — простейшие примитивы. Они содержат значение, а также геттеры и сеттеры, чтобы мы знали, когда они считываются и обновляются.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p><code>Эффекты</code> — это функции, которые оборачивают считывание нашего <code>Сигнала</code> и повторно вызываются при изменении значения зависимого <code>Сигнала</code>. Это полезно для создания сайд эффектов, таких как, например, рендеринг.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Последнее значение счетчика&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p><code>Мемо</code> — это кэшированные производные значения. Они обладают свойствами как <code>Сигналов</code>, так и Эффектов. Они отслеживают свои собственные зависимые <code>Сигналы</code>, повторно выполняясь только при их изменении, а также сами являются отслеживаемыми <code>Сигналами</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fullName</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">firstName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">lastName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%D0%BF%D1%80%D0%B8%D1%86%D0%B8%D0%BF-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BF%D1%80%D0%B8%D1%86%D0%B8%D0%BF-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B\">#</a> Прицип работы</h2><p><code>Сигналы</code> — это эмиттеры событий, которые содержат список подписок. Они уведомляют своих подписчиков всякий раз, когда их значение меняется.</p><p>Еще более интересно то, как происходит подписка на события. Solid использует автоматическое отслеживание зависимостей. Обновления происходят автоматически, как только данные изменяются.</p><p>Вся суть заключается в глобальном стеке во время выполнения. Прежде, чем <code>Эффект</code> или <code>Мемо</code> выполнят (или выполнят повторно) функцию, переданную разработчиком, они помещают себя в этот самый стек. Затем любой <code>Сигнал</code> при считывании значения проверяет, есть ли подписчик в стеке, и если есть, то добавляет его в список подписок.</p><p>Вы можете представить себе это следующим образом:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">subscribers</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">Set</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">read</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">listener</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">getCurrentListener</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (listener) subscribers.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(listener);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">nextValue</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> nextValue;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">for</span><span style=\"color:#24292e\"> (</span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sub</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">of</span><span style=\"color:#24292e\"> subscribers) sub.</span><span style=\"color:#6f42c1\">run</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> [read, write];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Теперь всякий раз, когда мы обновляем <code>Сигнал</code>, мы знаем, какие <code>Эффекты</code> нужно запустить повторно. Просто, но эффективно. Фактическая реализация, конечно, намного сложнее, но суть происходящего именно такова.</p><p>Для более подробного понимания того, как работает реактивность, будет полезно прочитать следующие статьи:</p><p><a href=\"https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf\">Практическое введение в реактивность</a></p><p><a href=\"https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p\">Создание реактивной библиотеки с нуля</a></p><p><a href=\"https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering\">SolidJS: От реактивности до рендеринга</a></p><h2 id=\"%D0%BE%D1%81%D0%BE%D0%B1%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D0%B8-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BE%D1%81%D0%BE%D0%B1%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D0%B8-solid\">#</a> Особенности реактивности Solid</h2><p>Такой подход к реактивности очень мощный и динамичный. Он может обрабатывать зависимости на лету, посредством выполнения различных ветвей условного кода. Данный подход также работает на многих уровнях косвенного обращения. Также отслеживается любая функция, выполняемая внутри области отслеживания.</p><p>Однако есть некоторые ключевые особенности поведения и компромиссы, о которых мы должны знать.</p><ol> <li> <p>Вся реактивность отслеживается из вызовов функций, впрямую или из функций скрытых под каким-либо геттером/прокси и запускается реактивность при доступе к свойству. Это означает, важно понимать откуда вы получаете доступ к свойствам реактивных объектов.</p> </li> <li> <p>Компоненты и обратные вызовы из потоков управления не отслеживают области видимости и выполняются только один раз. Это означает, что деструктуризация или выполнение логики верхнего уровня в ваших компонентах не будет выполняться повторно. Доступ к этим <code>Сигналам</code>, <code>Сторам</code> и <code>Пропсам</code> должен быть осуществлен внутри других реактивных примитивов или JSX, чтобы эта часть кода могла быть повторно оценена.</p> </li> <li> <p>В данном подходе отслеживание идет только синхронно. Если у вас есть setTimeout или же вы используете асинхронную функцию в своем <code>createEffect</code>, код, который будет выполняться асинхронно, не будет отслеживаться.</p> </li> </ol></section><section class=\"mt-10\"><h1 id=\"%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3\">#</a> Рендеринг</h1><p>Solid поддерживает создание шаблонов в трех формах: <code>JSX</code>, теговые шаблонные литералы и вариант Solid <code>HyperScript</code>, хотя JSX является преобладающей формой.</p><p>Почему JSX - отличный DSL для компиляции? Он имеет четкий синтаксис, поддерживает TypeScript, работает с Babel и поддерживает другие инструменты, такие как подсветка кода и Prettier. Было бы глупо не использовать инструмент, который, по сути, дает нам все это бесплатно. В качестве скомпилированного решения он обеспечивает отличный DX. Зачем бороться с настраиваемыми синтаксическими DSL, если вы можете использовать так широко поддерживаемый?</p><h2 id=\"%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-jsx\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-jsx\">#</a> Компиляция JSX</h2><p>Рендеринг включает в себя предварительную компиляцию шаблонов JSX в оптимизированный нативный JS код. Код JSX строит:</p><ul> <li>Шаблонные элементы DOM, которые клонируются при каждом создании экземпляра.</li> <li>Серия ссылочных деклараций с использованием только firstChild и nextSibling</li> <li>Вычисления для обновления элементов.</li> </ul><p>Этот подход является более производительным и создает меньше кода, чем создание каждого элемента один за другим с помощью <code>document.createElement</code>.</p><h2 id=\"%D0%B0%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D1%8B-%D0%B8-%D0%BF%D1%80%D0%BE%D0%BF%D1%81%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B0%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D1%8B-%D0%B8-%D0%BF%D1%80%D0%BE%D0%BF%D1%81%D1%8B\">#</a> Атрибуты и <code>Пропсы</code></h2><p>Solid старается максимально отразить соглашения HTML, включая нечувствительность к регистру атрибутов.</p><p>Большинство атрибутов в элементах DOM выглядят так же в нашем JSX. Статические значения встроены прямо в клонируемый шаблон. Есть ряд исключений, таких как <code>class</code>, <code>style</code>, <code>value</code>, <code>innerHTML</code>, которые обеспечивают дополнительную функциональность.</p><p>Однако <a href=\"https://developer.mozilla.org/ru/docs/Web/Web_Components#%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%B5_%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D1%8B\">пользовательские элементы</a> (за исключением встроенных модулей) по умолчанию принимают <code>пропсы</code>. Это необходимо для обработки более сложных типов данных. Он выполняет это преобразование с помощью стандартных имен атрибутов в <code>snake-case</code>, например <code>some-attr</code> в <code>someAttr</code>.</p><p>Мы можем управлять этим поведением напрямую с помощью <code>директив</code>. Вы можете принудительно использовать атрибут с помощью <code>attr:</code>или prop с <code>prop:</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">UniqACC</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.value} </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.title} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Заметка:</strong> Статические атрибуты создаются как часть клонируемого шаблона html. Зафиксированные и динамические выражения применяются впоследствии в порядке привязки JSX. Хотя это нормально для большинства элементов DOM, есть некоторые, например элементы ввода с <code>type='range'</code>, где порядок имеет значение. Помните об этом при связывании элементов.</p> </blockquote><h2 id=\"%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D1%8B%D0%B9-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D1%8B%D0%B9-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82\">#</a> Главный компонент</h2><p>Самый простой способ встроить Solid в DOM это - импортировать рендер из <code>solid-js/web</code>. <code>render</code> принимает функцию в качестве первого аргумента и контейнер для встраивания в качестве второго и возвращает метод удаления. Этот рендеринг автоматически создает реактивный корень и обрабатывает рендеринг. Для лучшей производительности используйте элемент без внутренних элементов.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;solid-js/web&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;main&#39;</span><span style=\"color:#24292e\">))</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Важно</strong> Первый аргумент должен быть функцией. В противном случае мы не сможем должным образом отслеживать и планировать работу реактивной системы. Это простое упущение приведет к тому, что ваши эффекты не будут работать.</p> </blockquote><h2 id=\"%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B\">#</a> Компоненты</h2><p>Компоненты в Solid - это просто функции в регистре паскаля(PascalCase). Их первый аргумент - это <code>объект props</code>. Компоненты возвращают реальные узлы DOM.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;Hello&#39;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Джон&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><p>Поскольку все узлы JSX являются фактическими узлами DOM, единственная обязанность компонентов вашего компонента - добавить их в DOM.</p><h2 id=\"%D0%BF%D1%80%D0%BE%D0%BF%D1%81%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BF%D1%80%D0%BE%D0%BF%D1%81%D1%8B\">#</a> <code>Пропсы</code></h2><p>Подобно React, Vue, Angular и другим фреймворкам, Solid позволяет вам определять свойства ваших компонентов для передачи данных дочерним компонентам. Здесь родитель передает строку «Hello» компоненту <code>Label</code> через свойство <code>greeting</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;Hello&#39;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><p>В приведенном выше примере значение, установленное для <code>greeting</code>, является статическим, но мы также можем установить динамические значения:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setGreeting</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;Hello&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">greeting</span><span style=\"color:#24292e\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Компоненты могут получить доступ к свойствам, переданным им через аргумент <code>props</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><p>В отличие от некоторых других фреймворков, вы не можете использовать деструктуризацию объекта в свойствах компонента. Это связано с тем, что объект <code>props</code> за кулисами полагается на геттеры объекта для ленивого извлечения значений. Использование деструктурирования объекта нарушает реактивность <code>props</code>.</p><p>В этом примере показан «правильный» способ доступа к пропсам в Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Здесь `props.name` обновится</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>В этом примере показан неправильный способ доступа к реквизитам в Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Здесь `props.name` не будет обновляться (т.е. не будет реагировать), так как он деструктурирован в `name`</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> ({ </span><span style=\"color:#e36209\">name</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Хотя объект props выглядит как обычный объект, когда вы его используете (и пользователи Typescript заметят, что он типирован как обычный объект), на самом деле он является реактивным - чем-то похожим на Signal. Это имеет несколько значений.</p><p>Поскольку в отличие от большинства фреймворков JSX, функциональные компоненты Solid выполняются только один раз (а не каждый цикл рендеринга), следующий пример не будет работать как ожидалось.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;solid-js&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;default&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">default</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#e36209\"> </span><span style=\"color:#6f42c1\">Form</span><span style=\"color:#e36209\">() </span><span style=\"color:#24292e\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">input</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;text&#39;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">oninput</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(e.currentTarget.value)} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>В этом примере мы, вероятно, хотим, чтобы <code>BasicComponent</code> отображал текущее значение, введенное в <code>input</code>. Но, напоминаем вам, что функция <code>BasicComponent</code> будет выполняться только один раз при первоначальном создании компонента. В это время (при создании) props.value будет равняться пустой строке. Это означает, что <code>value</code> в BasicComponent будет преобразовано в значение <code>default</code> и никогда не будет обновляться. Пока объект <code>props</code> является реактивным, доступ к свойствам в <code>const value = props.value || 'default';</code> находится за пределами наблюдаемой области Solid, поэтому он не переоценивается автоматически при изменении свойств.</p><p>Итак, как мы можем решить нашу проблему?</p><p>Ну, в общем, нам нужно получить доступ к <code>props</code> где-нибудь, чтобы Solid мог его наблюдать. Обычно это означает внутри JSX или внутри <code>createMemo</code>,<code>createEffect</code>. Вот одно из решений, которое работает должным образом:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;default&#39;</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Пример выше эквивалентен этому:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;default&#39;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Другой вариант, если это дорогостоящее вычисление, - использовать <code>createMemo</code>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;default&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Или с помощью помощника:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ value: </span><span style=\"color:#032f62\">&#39;default&#39;</span><span style=\"color:#24292e\"> }, props)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Напоминаем, что следующие примеры работать <strong>не будут</strong>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Плохо</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">: </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;default&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Плохо</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> prop.value</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;default&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Компоненты Solid являются ключевой частью его производительности. Подход Solid к &quot;исчезающим&quot; компонентам стал возможен благодаря ленивой (<code>lazy</code>) загрузке свойств. Вместо того, чтобы немедленно оценивать выражения опоры и передавать значения, выполнение откладывается до тех пор, пока опора не будет доступна в дочернем элементе. Поступая таким образом, мы откладываем выполнение до последнего момента, обычно прямо в привязках DOM, что увеличивает производительность. Это сглаживает иерархию и устраняет необходимость поддерживать дерево компонентов.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">;</span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">Component prop1</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;static&#39;</span><span style=\"color:#24292e\"> prop2</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.dynamic} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Компилируется примерно в:</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Мы отследим тело компонента, чтобы изолировать его и предотвратить дорогостоящие обновления</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Component</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    prop1: </span><span style=\"color:#032f62\">&#39;static&#39;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6a737d\">// Это динамическое выражение, мы оборачиваем его геттером</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">prop2</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> state.dynamic</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><p>Чтобы поддерживать реактивность, Solid имеет несколько помощников:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Пропсы c значением по умолчанию</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Клонирование пропсов</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">newProps</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Слияние пропсов</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Разделить пропсы на несколько объектов-пропсов</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;className&quot;</span><span style=\"color:#24292e\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#005cc5\">className</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">cx</span><span style=\"color:#24292e\">(local.className, theme.component)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%D0%B4%D0%BE%D1%87%D0%B5%D1%80%D0%BD%D0%B8%D0%B5-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B4%D0%BE%D1%87%D0%B5%D1%80%D0%BD%D0%B8%D0%B5-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D1%8B\">#</a> Дочерние элементы</h2><p>Solid обрабатывает дочерние элементы JSX аналогично React. Один дочерний элемент - это одно значение в props.children, а несколько дочерних элементов обрабатываются через массив значений. Обычно вы передаете их в представление JSX. Однако, если вы хотите взаимодействовать с ними, используйте помощник <code>children</code>, который разрешает любые последующие потоки управления и вернет Memo.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Единственный дочерний элемент</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">class</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;label&quot;</span><span style=\"color:#24292e\">&gt;Hi, { props.children }&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;&lt;</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;Josie&lt;/</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Несколько дочерних элементов</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.children}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;First&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {state.expression}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;Judith&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Пройтись по дочерним элементам</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.children}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Пройтись по дочерним элементами и модифицировать их с помощью помощника</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// Помощник `children` запоминает значение и поддерживает промежуточную реактивность</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">memo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">children</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    children.</span><span style=\"color:#6f42c1\">forEach</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c.classList.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;list-child&quot;</span><span style=\"color:#24292e\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">()}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Важно:</strong> Solid обрабатывает дочерние теги как дорогостоящие выражения и оборачивает их как динамические реактивные выражения. Это означает, что они лениво оценивают доступ к <code>prop</code>. Будьте осторожны, обращаясь к ним несколько раз или деструктурируя перед тем, как использовать их в представлении. Это связано с тем, что Solid не имеет возможности заранее создавать узлы Virtual DOM, а затем их сравнивать, поэтому вычисление значения этих <code>props</code> должно быть ленивым и преднамеренным. Используйте помощник <code>children</code>, если хотите, чтобы он запомнил их.</p> </blockquote></section><section class=\"mt-10\"><h1 id=\"%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3-%D0%BD%D0%B0-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-(ssr)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%80%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3-%D0%BD%D0%B0-%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%B5-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-(ssr)\">#</a> Рендеринг на стороне сервера (<code>SSR</code>)</h1><p>Solid обрабатывает серверный рендеринг, компилируя шаблоны JSX в сверхэффективный код добавления строк. Это может быть достигнуто с помощью плагина babel, с помощью аргумента <code>generate: 'ssr'</code>. Для того, чтобы код мог подключиться после отправки с сервера на клиенте вам необходимо передать <code>hydratable: true</code>, чтобы сгенерировать код, с <a href=\"https://github.com/gatsbyjs/gatsby-ru/blob/master/docs/docs/react-hydration.md\">гидрацией</a>.</p><p>Среды выполнения solid-js и solid-js/web меняются местами на нереактивные аналоги при работе с Node. Для других сред вам нужно будет связать код сервера с условным экспортом, установленным как <code>node</code>. У большинства сборщиков кода (<code>bundlers</code>) есть способ сделать это. В общем, мы также рекомендуем использовать условия экспорта <code>solid</code>, а также рекомендуется, чтобы библиотеки поставляли свой исходный код с экспортом <code>solid</code>.</p><p>Сборка для SSR определенно требует немного большей настройки, потому что мы будем генерировать 2 отдельных бандла. В записи клиента следует использовать <code>hydrate</code>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { hydrate } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;solid-js/web&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document)</span></span>\n<span class=\"line\"></span></code></pre><p><em>Примечание: рендеринг и гидрация должны происходить в главном компоненте (<code>Entry</code>). Это позволяет нам полностью описать наш интерфейс в JSX.</em></p><p>Сервер может использовать один из четырех вариантов рендеринга. Каждый вариант также создает JS код, который вставляется в заголовок документа.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { renderToString, renderToStringAsync, renderToNodeStream, renderToWebStream } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;solid-js/web&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Синхронный рендеринг строки</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Асинхронный рендеринг строки</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// API-интерфейс Node Stream</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// API веб-потока (например, Cloudflare Workers)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">()</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, writable)</span></span>\n<span class=\"line\"></span></code></pre><p>Для вашего удобства solid-js/web экспортирует флаг <code>isServer</code>. Это полезно еще и для бандлеров, если нужно что-то выполнить на стороне только клиента/сервера.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { isServer } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;solid-js/web&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// Только на сервере</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// Только в браузере</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B3%D0%B8%D0%B4%D1%80%D0%B0%D1%86%D0%B8%D0%B8\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82-%D0%B3%D0%B8%D0%B4%D1%80%D0%B0%D1%86%D0%B8%D0%B8\">#</a> Скрипт гидрации</h2><p>Для постепенной гидрации даже до загрузки среды выполнения Solid на страницу необходимо вставить специальный скрипт. Его можно либо сгенерировать и вставить через <code>generateHydrationScript</code>, либо включить как часть JSX с помощью тега<code>&lt;HydrationScript /&gt;</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { generateHydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;solid-js/web&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">app</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">App</span><span style=\"color:#24292e\"> /&gt;)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;html lang=&quot;en&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;title&gt;🔥 Solid SSR 🔥&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      ${</span><span style=\"color:#6f42c1\">generateHydrationScript</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;/head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;body&gt;${</span><span style=\"color:#24292e\">app</span><span style=\"color:#032f62\">}&lt;/body&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;/html&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">`</span></span>\n<span class=\"line\"></span></code></pre><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { HydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;solid-js/web&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">lang</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;en&#39;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;🔥 Solid SSR 🔥&lt;/</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">charset</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;UTF-8&#39;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;viewport&#39;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">content</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;width=device-width, initial-scale=1.0&#39;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;stylesheet&#39;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;/styles.css&#39;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">HydrationScript</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*... Приложение */</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>При гидрации из документа некоторые ресурсы, которые будут недоступны в клиентской части, также могут выдать ошибку. Solid предоставляет компонент <code>&lt;NoHydration&gt;</code>, дочерние элементы которого будут нормально работать на сервере, но не будут гидрироваться в браузере.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {manifest.</span><span style=\"color:#6f42c1\">map</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">m</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&#39;modulepreload&#39;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{m.href} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ))}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%D0%B0%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9-%D0%B8-%D0%BF%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%B2%D1%8B%D0%B9-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B0%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9-%D0%B8-%D0%BF%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%B2%D1%8B%D0%B9-ssr\">#</a> Асинхронный и потоковый SSR</h2><p>Эти механизмы основаны на знании Solid о том, как работает ваше приложение. Это достигается за счет использования <code>Suspense</code> и API <code>Ресурсов</code> на сервере вместо предварительной выборки и последующего рендеринга. Solid загружает компоненты по мере их доступности, как на сервере, так и на клиенте. Ваш код и шаблоны выполнения написаны точно так же.</p><p>Асинхронный рендеринг ждет, пока все границы <code>Suspense</code> не выполнятся, а затем отправляет результаты (или записывает их в файл в случае создания статического сайта).</p><p>Потоковая передача начинает сбрасывать синхронный контент в браузер, немедленно запуская рендеринг <code>fallback</code> копонентов вашего <code>Suspense</code> на сервере. Затем, когда асинхронные данные заканчиваются на сервере, он отправляет данные в том же потоке клиенту, чтобы успешно завершить процесс <code>Suspense</code>, где браузер заменит все <code>fallback</code> на реальный контент.</p><p>Преимущество такого подхода:</p><ul> <li>Серверу не нужно ждать ответа от асинхронных данных. <code>Ресурсы</code> начнут загружаться в браузере раньше, и пользователь, соответственно, раньше увидит контент.</li> <li>По сравнению с клиентской выборкой, такой как <code>JAMStack</code>, загрузка данных начинается на сервере немедленно и не требует ожидания загрузки клиентского JavaScript.</li> <li>Все данные сериализуются и автоматически передаются от сервера к клиенту.</li> </ul><h2 id=\"%D0%BF%D1%80%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B5%D1%80%D0%B5%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BF%D0%BE-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BF%D1%80%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B5%D1%80%D0%B5%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BF%D0%BE-ssr\">#</a> Предостережения по SSR</h2><p>Решение Solid's для <code>Isomorphic SSR</code> очень мощное, поскольку вы можете писать свой код универсально, и он будет работать одинаково в обеих средах. Однако есть ожидания, что это приведет к гидрации. В основном визуализированный вид на клиенте такой же, как и на сервере. Необязательно, чтобы текст был точным, но структурно разметка должна быть такой же.</p><p>Мы используем маркеры, отображаемые на сервере, для сопоставления элементов и местоположений ресурсов на сервере. По этой причине Клиент и Сервер должны иметь одинаковые компоненты. Обычно это не проблема, учитывая, что Solid визуализирует одинаково на клиенте и сервере. Но в настоящее время нет средств для рендеринга на сервере чего-то, что не гидрировалось бы на клиенте. В настоящее время нет возможности частично гидрировать всю страницу и не создавать для нее маркеры гидрации. Все или ничего. Частичная гидрация (<code>Partial Hydration</code>) - это то, что мы хотим изучить в будущем.</p><p>Наконец, все ресурсы должны быть определены в дереве рендеринга. Они автоматически сериализуются и обрабатываются в браузере, однако это работает, потому что методы <code>render</code> или <code>pipeTo</code> отслеживают ход визуализации. Это то, чего мы не можем сделать, если они созданы в изолированном контексте. Точно так же на сервере нет реактивности, поэтому не обновляйте <code>Сигналы</code> при первоначальном рендеринге и ожидайте, что они будут отражаться выше по дереву. Хотя у нас есть границы приостановки, SSR Solid в основном работает сверху вниз.</p><h2 id=\"%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-ssr\">#</a> Начало работы с SSR</h2><p>Конфигурации SSR непростые. У нас есть несколько примеров в пакете <a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a>.</p><p>Однако в разработке находится новое средство для старта проекта <a href=\"https://github.com/solidjs/solid-start\">SolidStart</a>, которое призвано сделать этот опыт более плавным.</p><h2 id=\"%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC-%D1%81%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85-%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC-%D1%81%D1%82%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85-%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2\">#</a> Начало работы с созданием статических сайтов</h2><p><a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a> также поставляется с простой утилитой для создания статических или предварительно отрисованных сайтов. Прочтите README для получения дополнительной информации.</p></section><section class=\"mt-10\"><h1 id=\"%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%BC%D0%B8-%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BC%D0%B8\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%81%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D1%81-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%BC%D0%B8-%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BC%D0%B8\">#</a> Сравнение с другими библиотеками</h1><p>Этот раздел не может избежать некоторой предвзятости, но мы думаем, что вам важно понимать, где находится Solid по сравнению с другими библиотеками. В данном разделе мы не будет рассматривать производительность. Если вам хочется получить получить более полное представление о производительности, посмотрите <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a>.</p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React оказал большое влияние на Solid. Его однонаправленный поток данных и явное разделение чтения и записи в реализации хуков дали основу интерфейсам Solid. Нам так же близка идея быть просто «библиотекой рендеринга», а не фреймворком. В архитектуре Solid имеет строгое мнение о том, как подходить к управлению данными при разработке приложений, но не стремится ограничивать их выполнение.</p><p>Однако, несмотря на то, что во многих вещах Solid соответствует философии дизайна React, внутри он работает принципиально иначе. React использует <a href=\"https://ru.reactjs.org/docs/faq-internals.html\">Virtual DOM</a>, а Solid - нет. Абстракция React - это раздел компонентов сверху вниз, где методы рендеринга вызываются повторно и различаются. Вместо этого Solid визуализирует каждый темплейт один раз, строит его реактивный граф (вычисляет его зависимости) и только после этого выполняет инструкции, связанные с мелкими изменениями.</p><h4 id=\"%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A\">#</a> Совет по адаптации:</h4><p>Модель обновления Solid не похожа на React или даже React + MobX. Вместо того чтобы думать о функциональных компонентах как о функции рендеринга, думайте о них как о деталях в конструкторе. Остерегайтесь деструктуризации или преждевременного доступа к ресурсам, теряющего реактивность. Примитивы Solid не имеют ограничений, таких как правила хуков, поэтому вы можете использовать их в любом месте на свое усмотрение. Для отрисовки списков вам не нужны <a href=\"https://ru.reactjs.org/docs/lists-and-keys.html#keys\">явные ключи</a> в строках списка. Наконец, в Solid нет Virtual DOM, поэтому императивные API VDOM, такие как <code>React.Children</code> и<code> React.cloneElement</code>, не имеют смысла. Мы рекомендуем находить различные способы решения проблем, используя их декларативно.</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Несмотря на то, что на дизайн Solid Vue не оказал особого влияния, эти фреймворки сравнимы по подходу. Оба фреймворка используют <a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">прокси</a> в своей реактивной системе с автоматическим отслеживанием на основе чтения. Но на этом сходство заканчивается. Детализированное обнаружение зависимостей Vue просто передается в менее детализированную систему Virtual DOM и Component, тогда как Solid сохраняет свою детализацию вплоть до обновлений DOM.</p><p>Vue ценит легкость, а Solid - прозрачность. Хотя новое направление Vue с Vue 3 больше соответствует подходу Solid. Эти библиотеки могут со временем выровняться, в зависимости от того, как они будут развиваться.</p><h4 id=\"%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-1\">#</a> Совет по адаптации:</h4><p>Как еще одна современная реактивная библиотека, миграция с Vue 3 должна показаться вам знакомой. Компоненты Solid очень похожи на <a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Template_literals#%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5_%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%8B_%D0%B8_%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB%D0%BE%D0%B2\">теговые шаблона</a> в конце функции Vue <code>setup</code>. Вместо оборачивания ваших данных в <a href=\"https://v3.ru.vuejs.org/ru/guide/reactivity-computed-watchers.html#%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D1%8F%D0%B5%D0%BC%D1%8B%D0%B5-%D1%81%D0%B2%D0%BE%D0%B8%D1%81%D1%82%D0%B2%D0%B0\">computed</a>, в Solid вы можете использовать просто функции, так как реактивность в Solid повсеместна. Прокси в Solid намеренно доступны только для чтения. И, да, не судите Solid, ни разу не попробовав.</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte является пионером предварительно скомпилированного &quot;исчезающего фреймворка&quot;. Solid в определенной степени использует эти подходы. Обе библиотеки действительно реактивны и могут создавать действительно небольшие бандлы (<code>bundles</code>) исполняемого кода, хотя Svelte является здесь победителем для небольших приложений. Solid требует немного большей прозрачности в своих объявлениях, меньше полагаясь на неявный анализ со стороны компилятора, но это главная причина, которая дает Solid превосходную производительность. Solid также сохраняет больше данных во время выполнения, что лучше масштабируется в более крупных приложениях. Демонстрационная реализация RealWorld от Solid на 25% меньше, чем у Svelte.</p><p>Обе библиотеки призваны помочь своим разработчикам писать меньше кода, но подходят к нему совершенно по-разному. Svelte 3 фокусируется на оптимизации простоты работы с локализованными изменениями, уделяя особое внимание взаимодействию простых объектов и двусторонней привязке. Напротив, Solid фокусируется на потоке данных, сознательно используя CQRS и неизменяемый интерфейс. С функциональной композицией шаблонов, во многих случаях Solid позволяет разработчикам писать даже меньше кода, чем Svelte, хотя синтаксис шаблонов Svelte определенно лаконичнее.</p><h4 id=\"%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-2\">#</a> Совет по адаптации:</h4><p>Опыт разработчиков достаточно отличается, так что, хотя некоторые вещи аналогичны, это совсем другой опыт. Делить код на больше компонентов фактически не имеет цены в Solid, поэтому не бойтесь создавать их настолько много, насколько это необходимо!</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>Solid обязан своим существованием Knockout. Мотивом для этого проекта была модернизация модели для детального обнаружения зависимостей. Knockout был выпущен в 2010 году и поддерживает Microsoft Explorer, в то время как большая часть Solid не поддерживает IE вообще.</p><p>Привязки Knockout - это просто строки в HTML, которые просматриваются во время выполнения. Они зависят от контекста клонирования ($ parent и т.д.). В то время как Solid использует JSX или теговые шаблонные литералы для создания шаблонов, выбирая JavaScript API.</p><p>Самая большая разница может заключаться в подходе Solid к пакетной обработке изменений, который обеспечивает синхронность, тогда как в Knockout есть deferUpdates, который использует отложенную очередь микрозадач.</p><h4 id=\"%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-3\">#</a> Совет по адаптации:</h4><p>Если вы привыкли к Knockout, примитивы Solid могут показаться вам странными. Разделение чтения и записи сделано намеренно и вовсе не для того, чтобы усложнить жизнь. Постарайтесь принять ментальную модель состояние/действие/поток. Хотя библиотеки и выглядят похожими, продвигают они разные передовые практики.</p><h2 id=\"lit-%D0%B8-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%D0%B8-lighterhtml\">#</a> Lit и LighterHTML</h2><p>Эти библиотеки невероятно похожи и оказали некоторое влияние на Solid. В основном это заключается в том, что скомпилированный код Solid использует очень похожий метод для первоначального рендеринга DOM. Клонирование элементов шаблона и использование комментариев для указания инъекций компонентов - это то, что объединяет Solid и эти библиотеки.</p><p>Самая большая разница заключается в том, что, хотя эти библиотеки не используют виртуальную модель DOM, они обрабатывают рендеринг одинаково, сверху вниз, требуя разбиения компонентов. В отличие от этого Solid использует точный реактивный график для обновления только тех данные, которые были изменены. Вкупе с техникой клонирования элементов шаблона для первоначального рендеринга этот подход сохраняет прекрасный изначальный рендеринг, в то же время оптимизируя обновления.</p><h4 id=\"%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%81%D0%BE%D0%B2%D0%B5%D1%82-%D0%BF%D0%BE-%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D0%B8%3A-4\">#</a> Совет по адаптации:</h4><p>Эти библиотеки довольно минимальны, и с их помощью легко создавать приложения. Однако имейте в виду, что <MyComp> - это не просто HTMLElement (массив или функция). Пользуйтесь JSX. Хойстинг работает по большей части, но лучше всего мысленно думать o Solid, как о библиотеке рендеринга, а не о фабрике HTMLElement.</MyComp></p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>Эта библиотека оказала наибольшее влияние на реактивный дизайн Solid. Solid использовал S.js в течение нескольких лет, пока набор функций соответствовал дизайну Solid. S.js - одна из самых эффективных реактивных библиотек на сегодняшний день. Он моделирует все с синхронными временными шагами, как цифровая схема, и обеспечивает согласованность без необходимости выполнять многие из более сложных механизмов, имеющихся в таких библиотеках, как MobX. Реакционная способность Solid - это своего рода гибрид между S и MobX. Это дает ему большую производительность, чем у большинства реактивных библиотек (Knockout, MobX, Vue), сохраняя при этом простоту ментальной модели для разработчика. В конечном счете, S.js по-прежнему является более производительной реактивной библиотекой, хотя разница едва заметна во всех, кроме самых изнурительных синтетических тестов.</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS - это реактивная библиотека. Хотя Solid имеет аналогичное представление о наблюдаемых (<code>Observable</code>) данных, он использует совершенно иное применение паттерна наблюдателя (<code>observer</code>). В то время как <code>Сигналы</code> похожи на простую версию <code>Observable</code> (только новую), шаблон автоматического обнаружения зависимостей заменяет около сотни операторов RxJS. Solid мог бы использовать этот подход, и действительно, более ранние версии библиотеки включали аналогичные операторы, но в большинстве случаев проще написать собственную логику преобразования в вычислениях. Observable ассоциируется с холодным запуском (<code>cold start</code>), одиночными подписками (<code>unicast</code>) и пуш-моделью (<code>push-based</code>). Эти характеристики часто противоположны тому поведению, которое мы хотим на клиенте. Solid понимает требования клиентских приложений вроде горячего запуска (<code>hot startup</code>) и множественной подписки (<code>multicast</code>) и использует их по умолчанию.</p><h2 id=\"%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D0%B5\">#</a> Другие</h2><p>Как вы могли заметить Angular и несколько других популярных библиотек отсутствуют в этом сравнении. Отсутствие опыта работы с ними не позволяет проводить адекватные сравнения. Как правило, Solid не имеет ничего общего с более крупными фреймворками, и их намного сложнее сравнивать.</p></section><section class=\"mt-10\"><h1 id=\"%D1%87%D0%B0%D1%81%D1%82%D0%BE-%D0%B7%D0%B0%D0%B4%D0%B0%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%D1%87%D0%B0%D1%81%D1%82%D0%BE-%D0%B7%D0%B0%D0%B4%D0%B0%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B\">#</a> Часто задаваемые вопросы</h1><h3 id=\"1.-jsx-%D0%B1%D0%B5%D0%B7-vdom%3F-%D1%8D%D1%82%D0%BE-%D1%87%D1%82%D0%BE%2C-%D0%B2%D0%B5%D0%B9%D0%BF%D0%BE%D1%80%D0%B2%D0%B5%D0%B9%D0%B2%3F-%D1%8F-%D1%81%D0%BB%D1%8B%D1%88%D0%B0%D0%BB%2C-%D1%87%D1%82%D0%BE-%D1%8D%D1%82%D0%BE-%D0%BD%D0%B5%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE-%D0%BE%D1%82-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B2-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D1%85-%D1%84%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA%D0%BE%D0%B2.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-jsx-%D0%B1%D0%B5%D0%B7-vdom%3F-%D1%8D%D1%82%D0%BE-%D1%87%D1%82%D0%BE%2C-%D0%B2%D0%B5%D0%B9%D0%BF%D0%BE%D1%80%D0%B2%D0%B5%D0%B9%D0%B2%3F-%D1%8F-%D1%81%D0%BB%D1%8B%D1%88%D0%B0%D0%BB%2C-%D1%87%D1%82%D0%BE-%D1%8D%D1%82%D0%BE-%D0%BD%D0%B5%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE-%D0%BE%D1%82-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B2-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D1%85-%D1%84%D1%80%D0%B5%D0%B9%D0%BC%D0%B2%D0%BE%D1%80%D0%BA%D0%BE%D0%B2.\">#</a> 1. JSX без VDOM? Это что, вейпорвейв? Я слышал, что это невозможно от авторов других фреймворков.</h3><p>Это возможно, когда у вас нет модели обновления React. JSX - это всего лишь шаблонный DSL, как и любой другой. Просто в некоторых моментах более гибкий. Анализ произвольного JavaScript кода может быть сложной задачей, но ничем не отличается от поддержки spread-операторов. Так что нет, это не вейпорвейв, а подход, который оказался одним из самых эффективных.</p><p>Главным плюсом JSX заключается в его расширяемости. Мы создали компилятор, работающий на вас, который даст вам оптимальные обновления DOM. Вы спросите: есть ли у этого своя цена? Если не считать различия в том, как работают реактивные примитивы, то скорее всего нет! Вы можете писать многие компоненты так же, как вы писали их в React, например, используя подходы вроде <a href=\"https://ru.reactjs.org/docs/render-props.html\">рендер-пропсов</a> или <a href=\"https://ru.reactjs.org/docs/higher-order-components.html\">компонентов высшего порядка</a>, наряду с вашими реактивными хуками. Не нравится, как работает поток управления Solid? Вы можете написать свой!</p><h3 id=\"2.-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-solid-%D1%82%D0%B0%D0%BA%D0%BE%D0%B9-%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-solid-%D1%82%D0%B0%D0%BA%D0%BE%D0%B9-%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9%3F\">#</a> 2. Почему Solid такой производительный?</h3><p>Так хотелось бы указать что-то одно, но на самом деле это комбинация многих решений дизайна:</p><ol> <li>Явная реактивность. Отслеживаются только те вещи, которые должны быть реактивными.</li> <li>Компиляция с учетом первоначального создания. Solid использует эвристику, чтобы уменьшить количество выполняемых вычислений, но сохранить ключевые обновления детализированными и производительными.</li> <li>Реактивные выражения - это просто функции. Это позволяет использовать «исчезающие компоненты» с ленивой оценкой свойств. Удаляя ненужные оболочки и накладные расходы на синхронизацию.</li> </ol><p>В настоящее время эти уникальные методы в сочетании дают Solid преимущество над конкурентами.</p><h3 id=\"3.-%D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D0%B5%D1%82-%D0%BB%D0%B8-react-compat%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-%D1%81%D1%83%D1%89%D0%B5%D1%81%D1%82%D0%B2%D1%83%D0%B5%D1%82-%D0%BB%D0%B8-react-compat%3F\">#</a> 3. Существует ли React-Compat?</h3><p>Нет. И, вероятно, никогда не будет существовать. Хотя API-интерфейсы похожи, и компоненты часто можно перемещать с небольшими изменениями, модель обновления принципиально отличается. Компоненты React визуализируются снова и снова, поэтому код за пределами хуков работает совсем по-другому. Замыкания и правила хуков не только не нужны, их можно использовать способами, которые здесь не работают.</p><p>В будущем вполне возможна, например, поддержка Vue-Compat, хотя на данный момент планов реализации нет.</p><h3 id=\"4.-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D0%BD%D0%B5-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-%D0%B4%D0%B5%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%3F-%D1%8F-%D0%BF%D0%BE%D0%BD%D1%8F%D0%BB%2C-%D1%87%D1%82%D0%BE-%D0%BC%D0%BE%D0%B3%D1%83-%D0%B8%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D1%8D%D1%82%D0%BE%2C-%D0%B7%D0%B0%D0%BA%D0%BB%D1%8E%D1%87%D0%B8%D0%B2-%D0%B2%D0%B5%D1%81%D1%8C-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82-%D0%B2-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8E.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D0%BD%D0%B5-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-%D0%B4%D0%B5%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%3F-%D1%8F-%D0%BF%D0%BE%D0%BD%D1%8F%D0%BB%2C-%D1%87%D1%82%D0%BE-%D0%BC%D0%BE%D0%B3%D1%83-%D0%B8%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D1%8D%D1%82%D0%BE%2C-%D0%B7%D0%B0%D0%BA%D0%BB%D1%8E%D1%87%D0%B8%D0%B2-%D0%B2%D0%B5%D1%81%D1%8C-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82-%D0%B2-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8E.\">#</a> 4. Почему не работает деструктуризация? Я понял, что могу исправить это, заключив весь компонент в функцию.</h3><p>Реактивность возникает при доступе к свойствам объектов Prop и Store. Вы можете использовать деструктуризацию внутри привязки (<code>binding</code>) или реактивного вычисления (<code>reactive computation</code>), но при использовании деструктуризации вне этих контекстов вы потеряете отслеживание.</p><p>Однако объединение всего вашего компонента в функцию - это не то, что вы хотите делать безответственно. Solid не имеет VDOM. Таким образом, любое отслеживаемое изменение приведет к повторному запуску всей функции, пересоздавая все заново. Не делайте этого.</p><h3 id=\"5.-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BB%D0%B8-%D0%B2%D1%8B-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D1%83-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%BE%D0%B2%D1%8B%D1%85-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%3F-%D1%8F-%D1%81%D1%87%D0%B8%D1%82%D0%B0%D1%8E%2C-%D1%87%D1%82%D0%BE-%D0%BE-%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D1%85-%D1%86%D0%B8%D0%BA%D0%BB%D0%B0%D1%85-%D0%BB%D0%B5%D0%B3%D1%87%D0%B5-%D1%80%D0%B0%D1%81%D1%81%D1%83%D0%B6%D0%B4%D0%B0%D1%82%D1%8C.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%D0%B5-%D0%BB%D0%B8-%D0%B2%D1%8B-%D0%B4%D0%BE%D0%B1%D0%B0%D0%B2%D0%B8%D1%82%D1%8C-%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D1%83-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%BE%D0%B2%D1%8B%D1%85-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%3F-%D1%8F-%D1%81%D1%87%D0%B8%D1%82%D0%B0%D1%8E%2C-%D1%87%D1%82%D0%BE-%D0%BE-%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D1%85-%D1%86%D0%B8%D0%BA%D0%BB%D0%B0%D1%85-%D0%BB%D0%B5%D0%B3%D1%87%D0%B5-%D1%80%D0%B0%D1%81%D1%81%D1%83%D0%B6%D0%B4%D0%B0%D1%82%D1%8C.\">#</a> 5. Можете ли вы добавить поддержку классовых компонентов? Я считаю, что о жизненных циклах легче рассуждать.</h3><p>Solid не имеет намерения поддерживать классовые компоненты. Жизненные циклы Solid связаны с планированием реактивной системы и являются искусственными. Я полагаю, вы могли бы сделать из этого класс, но фактически весь код обработчика событий, не связанный с событиями, в основном запускается в конструкторе, включая функцию рендеринга. Это просто дополнительный синтаксис для предлога сделать ваши данные менее детализированными.</p><p>Группируйте данные и их поведение, вместо того, чтобы группировать жизненные циклы. Это лучшая практика реактивности, зарекомендовавшая себя десятилетиями опыта.</p><h3 id=\"6.-%D0%BC%D0%BD%D0%B5-%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE-%D0%BD%D0%B5-%D0%BD%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%81%D1%8F-jsx%2C-%D0%B5%D1%81%D1%82%D1%8C-%D0%BB%D0%B8-%D1%88%D0%B0%D0%BD%D1%81-%D0%BD%D0%B0-template-dsl%3F-%D0%BE%2C-%D1%8F-%D0%B2%D0%B8%D0%B6%D1%83%2C-%D1%83-%D0%B2%D0%B0%D1%81-%D0%B5%D1%81%D1%82%D1%8C-%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5-%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5-%D0%BB%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D0%BB%D1%8B%2Fhyperscript.-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%2C-%D1%8F-%D0%B2%D0%BE%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D1%8E%D1%81%D1%8C-%D1%8D%D1%82%D0%B8%D0%BC%D0%B8-...\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-%D0%BC%D0%BD%D0%B5-%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE-%D0%BD%D0%B5-%D0%BD%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%81%D1%8F-jsx%2C-%D0%B5%D1%81%D1%82%D1%8C-%D0%BB%D0%B8-%D1%88%D0%B0%D0%BD%D1%81-%D0%BD%D0%B0-template-dsl%3F-%D0%BE%2C-%D1%8F-%D0%B2%D0%B8%D0%B6%D1%83%2C-%D1%83-%D0%B2%D0%B0%D1%81-%D0%B5%D1%81%D1%82%D1%8C-%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5-%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5-%D0%BB%D0%B8%D1%82%D0%B5%D1%80%D0%B0%D0%BB%D1%8B%2Fhyperscript.-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%2C-%D1%8F-%D0%B2%D0%BE%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D1%8E%D1%81%D1%8C-%D1%8D%D1%82%D0%B8%D0%BC%D0%B8-...\">#</a> 6. Мне действительно не нравится JSX, есть ли шанс на Template DSL? О, я вижу, у вас есть теговые шаблонные литералы/HyperScript. Может, я воспользуюсь этими ...</h3><p>Если у вас нет особой причины этого делать, то мы рекомендуем остановиться и задуматься. Мы используем JSX так же, как Svelte использует свои шаблоны, для создания оптимизированных инструкций DOM. Решения вроде <a href=\"https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Template_literals#%D1%82%D0%B5%D0%B3%D0%BE%D0%B2%D1%8B%D0%B5_%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D1%8B_%D0%B8_%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB%D0%BE%D0%B2\">теговых шаблонных литералов</a> и HyperScript могут быть действительно впечатляющими сами по себе, но, если у вас нет специфических требований, например необходимость избавиться от сборки (<code>bundling</code>), то мы советуем использовать JSX. Иначе вы получите больше JS в вашем бандле (<code>bundle</code>), более низкую производительность и необходимость ручной обертки значений.</p><p>Приятно иметь варианты, но Solid JSX - действительно лучшее решение. Шаблон DSL также был бы отличным, но у него есть свои ограничения, которые мы получаем JSX совершенно бесплатно: существующие анализаторы кода, подсветка синтаксиса, Prettier, TypeScript и ещё много всего.</p><p>Другие библиотеки добавляли поддержку этих функций, но это потребовало огромных усилий и до сих пор все остается неидеальным и вызывает постоянную головную боль при обслуживании. Выбор JSX это ничто иное, как прагматическая позиция.</p><h3 id=\"7.-%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-signal%2C-%D0%B0-%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-store%3F-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D0%BE%D0%BD%D0%B8-%D1%80%D0%B0%D0%B7%D0%BD%D1%8B%D0%B5%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-signal%2C-%D0%B0-%D0%BA%D0%BE%D0%B3%D0%B4%D0%B0-store%3F-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D0%BE%D0%BD%D0%B8-%D1%80%D0%B0%D0%B7%D0%BD%D1%8B%D0%B5%3F\">#</a> 7. Когда использовать Signal, а когда Store? Почему они разные?</h3><p><code>Сторы</code> автоматически оборачивают вложенные значения, что делает его идеальным для сложных структур данных и таких вещей, как модели. Для большинства других вещей <code>Сигналы</code> легковесны и прекрасно справляются со своей задачей.</p><p>Как бы нам ни хотелось объединить их в одно целое, но к сожалению, вы не можете проксировать примитивы. Функции - это самый простой интерфейс, и любое реактивное выражение (включая доступ к состоянию) может быть заключено в одно целое, что обеспечит универсальный API. Вы можете называть свои <code>Сигналы</code> и состояние по своему усмотрению, и оно остается минимальным. Последнее, что мы хотели бы сделать, это принудительно ввести <code>.get()</code> <code>.set()</code> для конечного пользователя или, что еще хуже, <code>.value</code>. По крайней мере, первый может быть назван псевдонимом для краткости, тогда как последний - наименее краткий способ вызова функции.</p><h3 id=\"8.-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%8F-%D0%BD%D0%B5-%D0%BC%D0%BE%D0%B3%D1%83-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE-%D0%BF%D1%80%D0%B8%D1%81%D0%B2%D0%BE%D0%B8%D1%82%D1%8C-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-store%2C-%D0%BA%D0%B0%D0%BA-%D1%8F-%D0%BC%D0%BE%D0%B3%D1%83-%D1%8D%D1%82%D0%BE-%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C-%D0%B2-vue.-svelte-%D0%B8%D0%BB%D0%B8-mobx%3F-%D0%B3%D0%B4%D0%B5-%D0%B4%D0%B2%D1%83%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%BD%D1%8F%D1%8F-%D0%BF%D1%80%D0%B8%D0%B2%D1%8F%D0%B7%D0%BA%D0%B0%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-%D1%8F-%D0%BD%D0%B5-%D0%BC%D0%BE%D0%B3%D1%83-%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE-%D0%BF%D1%80%D0%B8%D1%81%D0%B2%D0%BE%D0%B8%D1%82%D1%8C-%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-store%2C-%D0%BA%D0%B0%D0%BA-%D1%8F-%D0%BC%D0%BE%D0%B3%D1%83-%D1%8D%D1%82%D0%BE-%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C-%D0%B2-vue.-svelte-%D0%B8%D0%BB%D0%B8-mobx%3F-%D0%B3%D0%B4%D0%B5-%D0%B4%D0%B2%D1%83%D1%81%D1%82%D0%BE%D1%80%D0%BE%D0%BD%D0%BD%D1%8F%D1%8F-%D0%BF%D1%80%D0%B8%D0%B2%D1%8F%D0%B7%D0%BA%D0%B0%3F\">#</a> 8. Почему я не могу просто присвоить значение Store, как я могу это сделать в Vue. Svelte или MobX? Где двусторонняя привязка?</h3><p>Реактивность - мощный, но опасный инструмент. MobX знает об этом и ввел строгий режим и действия, чтобы ограничить, где и когда происходят обновления. В Solid, который имеет дело со всеми деревьями данных в компонентах, стало очевидно, что здесь мы можем кое-чему научиться у React. Вам не нужно быть фактически неизменным (<code>immutable</code>), если вы предоставляете средства для заключения одного и того же контракта.</p><p>Возможность обновить состояние, возможно, даже более важна, чем решение передать это состояние. Поэтому возможность разделить его, еще раз, очень важна, и это возможно только в том случае, если чтение неизменяемо. Нам также не нужно платить за неизменяемость, если мы все еще можем гранулярно обновлять. К счастью, у нас есть много подобных примеров в виде <code>ImmutableJS</code> и <code>Immer</code>. По иронии судьбы Solid представляет из себя перевернутую модель <code>Immer</code> со своими изменяемыми внутренностями и неизменяемым интерфейсом.</p><h3 id=\"9.-%D0%BC%D0%BE%D0%B3%D1%83-%D0%BB%D0%B8-%D1%8F-%D1%81%D0%B0%D0%BC%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C-solid%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-%D0%BC%D0%BE%D0%B3%D1%83-%D0%BB%D0%B8-%D1%8F-%D1%81%D0%B0%D0%BC%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D1%80%D0%B5%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C-solid%3F\">#</a> 9. Могу ли я самостоятельно использовать реактивность Solid?</h3><p>Конечно. Хотя мы не публиковали систему реактивности отдельно, Solid легко установить без компилятора и просто использовать реактивные примитивы. Одним из преимуществ гранулярной реактивности является то, что она не зависит от библиотеки. В этом отношении почти каждая реактивная библиотека работает таким образом. Это то, что вдохновило <a href=\"https://github.com/solidjs/solid\">Solid</a> и лежащую в его основе <a href=\"https://github.com/ryansolid/dom-expressions\">библиотеку выражений DOM</a> в первую очередь на создание рендерера чисто из реактивной системы.</p><p>Вот несколько примеров, которые стоит попробовать: <a href=\"https://github.com/solidjs/solid\">Solid</a>, <a href=\"https://github.com/mobxjs/mobx\">MobX</a>, <a href=\"https://github.com/knockout/knockout\">Knockout</a>, <a href=\"https://github.com/sveltejs/svelte\">Svelte</a>, <a href=\"https://github.com/adamhaile/S\">S.js</a>, <a href=\"https://github.com/Riim/cellx\">CellX</a>, <a href=\"https://github.com/ds300/derivablejs\">Derivable</a>, <a href=\"https://github.com/luwes/sinuous\">Sinuous</a> и даже недавно <a href=\"https://github.com/vuejs/vue\">Vue</a>. На создание реактивной библиотеки уходит гораздо больше, чем на ее добавление на какой-нибудь рендерер, например <a href=\"https://github.com/Polymer/lit-html\">lit-html</a>, это хороший способ почувствовать о чем идет речь.</p><h3 id=\"10.-%D0%B5%D1%81%D1%82%D1%8C-%D0%BB%D0%B8-%D1%83-solid-%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0-%D1%82%D0%B8%D0%BF%D0%B0-next.js-%D0%B8%D0%BB%D0%B8-material-components%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-%D0%B5%D1%81%D1%82%D1%8C-%D0%BB%D0%B8-%D1%83-solid-%D0%B1%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0-%D1%82%D0%B8%D0%BF%D0%B0-next.js-%D0%B8%D0%BB%D0%B8-material-components%3F\">#</a> 10. Есть ли у Solid библиотека типа Next.js или Material Components?</h3><p>Насколько нам известно, нет. Если вы заинтересованы в его создании, мы легко доступны на нашем <a href=\"https://discord.com/invite/solidjs\">Discord</a>, чтобы помочь в его создании. У нас есть всё что необходимо для создания потрясающей экосистемы!</p></section>"
}