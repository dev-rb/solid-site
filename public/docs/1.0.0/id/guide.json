{
  "sections": [
    {
      "slug": "pendahuluan",
      "title": "Pendahuluan",
      "level": 1,
      "children": [
        {
          "slug": "mencoba-solid",
          "title": "Mencoba Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "belajar-solid",
          "title": "Belajar Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "berpikir-dengan-cara-solid",
          "title": "Berpikir dengan cara Solid",
          "level": 2,
          "children": [
            {
              "slug": "1.-data-yang-deklaratif",
              "title": "1. Data yang Deklaratif",
              "level": 3,
              "children": []
            },
            {
              "slug": "2.-komponen-yang-hilang",
              "title": "2. Komponen yang Hilang",
              "level": 3,
              "children": []
            },
            {
              "slug": "3.-pemisahan-membaca%2Fmenulis",
              "title": "3. Pemisahan Membaca/Menulis",
              "level": 3,
              "children": []
            },
            {
              "slug": "4.-sederhana-lebih-baik-daripada-mudah",
              "title": "4. Sederhana lebih baik daripada mudah",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "web-components",
          "title": "Web Components",
          "level": 2,
          "children": []
        },
        {
          "slug": "me-render-di-server",
          "title": "Me-render di Server",
          "level": 2,
          "children": []
        },
        {
          "slug": "tanpa-kompilasi%3F",
          "title": "Tanpa Kompilasi?",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "reaktifitas",
      "title": "Reaktifitas",
      "level": 1,
      "children": [
        {
          "slug": "memperkenalkan-primitif-primitif",
          "title": "Memperkenalkan Primitif-primitif",
          "level": 2,
          "children": []
        },
        {
          "slug": "bagaimana-mereka-bekerja",
          "title": "Bagaimana mereka Bekerja",
          "level": 2,
          "children": []
        },
        {
          "slug": "hal-yang-perlu-dipertimbangkan",
          "title": "Hal yang perlu dipertimbangkan",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendering",
      "title": "Rendering",
      "level": 1,
      "children": [
        {
          "slug": "kompilasi-jsx",
          "title": "Kompilasi JSX",
          "level": 2,
          "children": []
        },
        {
          "slug": "attributes-dan-props",
          "title": "Attributes dan Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "entry",
          "title": "Entry",
          "level": 2,
          "children": []
        },
        {
          "slug": "komponen-komponen",
          "title": "Komponen-komponen",
          "level": 2,
          "children": []
        },
        {
          "slug": "props",
          "title": "Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "turunan-(children)",
          "title": "Turunan (Children)",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendering-di-server",
      "title": "Rendering di Server",
      "level": 1,
      "children": [
        {
          "slug": "hydration-script",
          "title": "Hydration Script",
          "level": 2,
          "children": []
        },
        {
          "slug": "async-dan-streaming-ssr",
          "title": "Async dan Streaming SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "kekurangan-ssr",
          "title": "Kekurangan SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "memulai-dengan-ssr",
          "title": "Memulai dengan SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "memulai-dengan-static-site-generation",
          "title": "Memulai dengan Static Site Generation",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "perbandingan-dengan-library-lainnya",
      "title": "Perbandingan dengan Library lainnya",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "saran-untuk-migrasi%3A",
              "title": "Saran untuk migrasi:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "saran-untuk-migrasi%3A-1",
              "title": "Saran untuk migrasi:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "saran-untuk-migrasi%3A-2",
              "title": "Saran untuk migrasi:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "saran-untuk-migrasi%3A-3",
              "title": "Saran untuk migrasi:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%26-lighterhtml",
          "title": "Lit & LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "saran-untuk-migrasi%3A-4",
              "title": "Saran untuk migrasi:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "lainnya",
          "title": "Lainnya",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "faq",
      "title": "FAQ",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"pendahuluan\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pendahuluan\">#</a> Pendahuluan</h1><h2 id=\"mencoba-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mencoba-solid\">#</a> Mencoba Solid</h2><p>Sejauh ini cara termudah untuk mulai menggunakan Solid adalah dengan mencobanya secara online. REPL kami di <a href=\"https://playground.solidjs.com\">https://playground.solidjs.com</a> adalah cara terbaik untuk mencoba ide-ide kamu. Sama halnya dengan <a href=\"https://codesandbox.io/\">https://codesandbox.io/</a> dimana kamu dapat mengubah semua contoh yang kami sediakan.</p><p>Atau, kamu juga dapat menggunakan template-template <a href=\"https://vitejs.dev/\">Vite</a> sederhana kami dengan menjalankan perintah-perintah dibawah ini pada terminal kamu:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/js my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"></span></code></pre><p>Atau untuk pengguna TypeScript:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/ts my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"belajar-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#belajar-solid\">#</a> Belajar Solid</h2><p>Solid pada dasarnya adalah bagian-bagian kecil yang dapat di komposisikan sehingga kamu dapat menggunakannnya sebagai blok-blok bangunan untuk membuat sebuahaplikasi. Bagian-bagian ini pada umumnya terdiri dari fungsi-fungsi yang terbuat dari API tingkat-atas yang dangkal. Untungnya, kamu tidak perlu tahu tentang semua hal itu untuk memulai.</p><p>Dua tipe utama dari blok-blok bangunan yang kamu punya adalah Komponen dan Primitif-Primitif Reaktif.</p><p>Komponen adalah fungsi yang dapat menerima properti objek dan mengembalikan elemen JSX termasuk elemen DOM asli dan komponen lainnya. Mereka dapat di ekspresikan sebagai elemen JSX dalam bentuk PascalCase:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Hello {props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Solid&quot;</span><span style=\"color:#24292e\"> /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Komponen itu ringan karena mereka tidak stateful dan tidak memiliki instance. Sebaliknya, mereka berfungsi sebagai factory functions untuk element DOM dan Primitif-Primitif Reaktif.</p><p>Reaktivitas halus dari Solid dibangun di atas 3 primitif sederhana: Signals, Memo, dan Effects. Bersama-sama, mereka membentuk mesin pelacakan sinkronisasi otomatis yang memastikan tampilan kamu tetap terbarui. Komputasi-komputasi reaktif mengambil bentuk sebagai ekspresi-ekspresi yang terbungkus fungsi yang dieksekusi secara bersamaan.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">first</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setFirst</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;JSON&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">last</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setLast</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Bourne&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">first</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">last</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><p>Kamu dapat mempelajari lebih dalam tentang <a href=\"#reaktifitas\">Reaktifitas pada Solid</a> dan <a href=\"#rendering\">Rendering pada Solid</a>.</p><h2 id=\"berpikir-dengan-cara-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#berpikir-dengan-cara-solid\">#</a> Berpikir dengan cara Solid</h2><p>Desain Solid mengambil beberapa pendapat tentang prinsip dan nilai yang dapat membantu kita membuat website dan aplikasi yang terbaik. Akan lebih mudah untuk mempelajari dan menggunakan Solid ketika kamu paham tentang filosofi dibaliknya.</p><h3 id=\"1.-data-yang-deklaratif\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-data-yang-deklaratif\">#</a> 1. Data yang Deklaratif</h3><p>Data yang deklaratif adalah praktik mengikat deskripsi dari sebuah perilaku data ke deklarasinya. Ini memungkinkan untuk komposisi yang mudah dengan mengemas semua aspek perilaku dari data tersebut pada satu tempat.</p><h3 id=\"2.-komponen-yang-hilang\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-komponen-yang-hilang\">#</a> 2. Komponen yang Hilang</h3><p>Sudah cukup sulit untuk menyusun komponen-komponen kamu tanpa perlu mempertimbangkan pembaruan. Pembaruan di Solid betul-betul tidak bergantung terhadap komponen. Fungsi komponen hanya dipanggil satu kali saja lalu tidak ada lagi. Komponen-komponen ada hanya untuk mengatur kode kamu dan sedikit hal lainnya.</p><h3 id=\"3.-pemisahan-membaca%2Fmenulis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-pemisahan-membaca%2Fmenulis\">#</a> 3. Pemisahan Membaca/Menulis</h3><p>Kontrol yang presisi dan dapat diprediksi membuat sistem menjadi lebih baik. Kita tidak membutuhkan immutability yang sesungguhnya untuk memaksakan unidirectional flow, kita hanya perlu kemampuan untuk membuat keputusan sadar, yang mana yang mungkin ditulis dan yang mana yang tidak, oleh kostumer.</p><h3 id=\"4.-sederhana-lebih-baik-daripada-mudah\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-sederhana-lebih-baik-daripada-mudah\">#</a> 4. Sederhana lebih baik daripada mudah</h3><p>Sebuah pelajaran yang dapat diambil dari Reaktifitas halus (fine-grained). Konvensi yang eksplisit dan konsisten bahkan jika membutuhkan lebih banyak usaha tidak akan sia-sia. Karena tujuannya adalah menyediakan alat-alat minimal sebagai dasar/pondasi untuk membangun.</p><h2 id=\"web-components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#web-components\">#</a> Web Components</h2><p>Solid lahir dengan keinginan untuk membuat Web Components sebagai &quot;first class citizens&quot;. Seiring waktu, desain dari solid berkembang dan tujuannya pun berganti. Tetapi, Solid tetap menjadi pilihan yang cocok untuk pengguna Web Components. <a href=\"https://github.com/solidjs/solid/tree/main/packages/solid-element\">Solid Element</a> membolehkan kamu untuk menulis dan membungkus fungsi komponen Solid untuk menghasilkan Web Components yang kecil dan mempunyai performa baik. Didalam aplikasi Solid, Solid Element tetap dapat memanfaatkan Context API dari Solid, dan dukungan Shadow DOM isolated styling dari Solid Portals.</p><h2 id=\"me-render-di-server\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#me-render-di-server\">#</a> Me-render di Server</h2><p>Solid memiliki solusi untuk melakukan render di server yang dynamic yang memungkinkan kamu mendapatkan pengalaman isomorphic development yang sesungguhnya. Melalui penggunaan Resource Primitif kami, async data requests dapat dengan mudah dibuat dan yang lebih penting, secara otomatis diserialisasi dan disingkronkan antara klien dan browser.</p><p>Karena Solid mendukung rendering secara asinkron dan streaming di server, kamu dapat menulis kode kamu dengan satu cara dan membuatnya dapat dieksekusi di server. Yang berarti fitur seperti <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\">render-as-you-fetch</a> dan pemecahan kode dapat bekerja begitu saja di Solid.</p><p>Untuk informasi lebih lanjut, silahkan baca <a href=\"#rendering-di-server\">Panduan Server</a></p><h2 id=\"tanpa-kompilasi%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tanpa-kompilasi%3F\">#</a> Tanpa Kompilasi?</h2><p>Membenci JSX? Tidak keberatan melakukan pekerjaan manual untuk membungkus ekspresi-ekspresi, kinerja yang lebih buruk, dan ukuran bundel yang lebih besar? Secara alternatif, kamu dapat membuat aplikasi Solid menggunakan Tagged Template Literals atau HyperScript di lingkungan tanpa kompilasi.</p><p>Kamu dapat menjalankan langsung dari browser menggunakan <a href=\"https://www.skypack.dev/\">Skypack</a>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#24292e\">=</span><span style=\"color:#032f62\">&quot;module&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        createSignal,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        onCleanup,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> html </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/html&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">          </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">html</span><span style=\"color:#032f62\">`&lt;div&gt;${</span><span style=\"color:#24292e\">count</span><span style=\"color:#032f62\">}&lt;/div&gt;`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      };</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.body);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Ingat kamu tetap harus memerlukan library DOM Expressions yang sesuai untuk membuat mereka bekerja dengan TypeScript. Kamu dapat menggunakan Tagged Template Literals dengan <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/lit-dom-expressions\">Lit DOM Expressions</a> atau HyperScript dengan <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/hyper-dom-expressions\">Hyper DOM Expressions</a>.</p></section><section class=\"mt-10\"><h1 id=\"reaktifitas\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reaktifitas\">#</a> Reaktifitas</h1><p>Manajemen data pada Solid dibuat dari seperangkat primitif-primitif reaktif yang fleksibel yang akan bertanggung jawab untuk semua pembaruan. Ini hampir sama yang dilakukan MobX atau Vue kecuali kita tidak mengorbankan granularitas untuk VDOM. Dependencies secara otomatis akan dilacak ketika kamu mengakses nilai reaktif kamu di Effects kamu dan kode JSX View.</p><p>Primitif-primitif pada Solid datang dengan berbentuk panggilan fungsi <code>create</code> yang biasanya mengembalikan tuples, dimana secara umum elemen pertamanya adalah primitif yang dapat dibaca dan yang keduanya sebuah &quot;setter&quot;. Itu sesuatu yang umum untuk merujuk ke bagian yang dapat dibaca dengan nama primitifnya.</p><p>Berikut adalah penghitung kenaikan otomatis dasar yang diperbarui berdasarkan pengaturan signal <code>count</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal, onCleanup } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"memperkenalkan-primitif-primitif\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#memperkenalkan-primitif-primitif\">#</a> Memperkenalkan Primitif-primitif</h2><p>Solid terbentuk dari 3 primitif utama, Signal, Memo, dan Effect. Mereka mempunyai pola Observer dimana Signal (dan Memo) akan dilacak dengan membungkus Memo dan Effect.</p><p>Signal adalah primitif yang paling sederhana. Dia memiliki fungsi nilai, dan get dan set supaya kita dapat menangkap ketika mereka dipanggil atau diganti.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Effect adalah fungsi yang membungkus read dari signal kita dan mengeksekusi ulang ketika nilai yang bergantung ke Signal terganti. Ini berguna saat kita membuat side effect, seperti rendering.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;The latest count is&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>Yang terakhir, Memo adalah nilai turunan yang di-cache. Mereka berbagi properti dengan Signal dan Effect. Mereka melacak Signal, yang bergantung kepada mereka, sendiri dan mengeksekusi ulang hanya ketika mereka terganti, dan mereka sendiri adalah Signal yang dapat dilacak.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fullName</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">firstName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">lastName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"bagaimana-mereka-bekerja\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#bagaimana-mereka-bekerja\">#</a> Bagaimana mereka Bekerja</h2><p>Signal adalah &quot;event emitters&quot; yang menyimpan daftar dari subscription. Mereka memberitahu subscribers mereka setiap kali nilai mereka berganti.</p><p>Yang lebih menariknya adalah bagaimana subscriptions ini terjadi. Solid menggunakan pelacakan dependency otomatis. Pembaruan terjadi secara otomatis setiap kali data berganti.</p><p>Triknya adalah tumpukan global saat runtime. Sebelum Effect atau Memo mengeksekusi (atau mengeksekusi ulang) fungsi yang telah disediakan developer, dia akan menumpukkan diri ke tumpukan tersebut. Lalu, setiap Signal yang membaca akan mengecek apakah ada listener di tumpukan dan jika ada tambahkan listener tersebut ke subscriptions mereka.</p><p>Kamu dapat memikirkannya seperti ini:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">subscribers</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">Set</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">read</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">listener</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">getCurrentListener</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (listener) subscribers.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(listener);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">nextValue</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> nextValue;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">for</span><span style=\"color:#24292e\"> (</span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sub</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">of</span><span style=\"color:#24292e\"> subscribers) sub.</span><span style=\"color:#6f42c1\">run</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> [read, write];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Sekarang ketika kita melakukan pembaruan, Signal kita tahu mana Effect yang akan dijalankan ulang. Sederhana tapi efektif. Implementasi sebenarnya jauh lebih kompleks tapi seperti itulah inti dari bagaimana mereka bekerja.</p><p>Untuk memahami lebih detail bagaimana Reaktifitas bekerja, berikut artikel-artikel yang mungkin berguna untuk kamu:</p><p><a href=\"https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf\">A Hands-on Introduction to Fine-Grained Reactivity</a></p><p><a href=\"https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p\">Building a Reactive Library from Scratch</a></p><p><a href=\"https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering\">SolidJS: Reactivity to Rendering</a></p><h2 id=\"hal-yang-perlu-dipertimbangkan\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hal-yang-perlu-dipertimbangkan\">#</a> Hal yang perlu dipertimbangkan</h2><p>Pendekatan reaktifitas seperti ini bisa dibilang sangat kuat dan dinamis. Cara ini bisa menghandel dependencies yang berubah begitu saja dengan mengeksekusi cabang berbeda dari kode kondisional. Ia juga dapat bekerja pada banyak level indirection. Setiap fungsi yang tereksekusi didalam cakupan pelacakan akan dilacak juga.</p><p>Tetapi, ada beberapa kunci perilaku dan pertukaran yang perlu kita waspadai.</p><ol> <li> <p>Semua reaktifitas akan terlacak dari panggilan fungsi mau itu secara langsung atau tersembunyi dibawah getter/proxy dan dapat dipicu oleh pengaksesan properti objek. Ini berarti tempat kamu mengakses properti objek reaktifitas sangatlah penting.</p> </li> <li> <p>Komponen dan callbacks dari control flows bukanlah cakupan pelacakan dan hanya akan tereksekusi satu kali. Ini berarti meng-destructure atau melakukan tingkat-atas logika di komponen-komponen kamu tidak dapat ter-eksekusi ulang. Kamu harus mengakses Signal, Store, dan properti-properti ini dari dalam primitif-primitif reaktif lain atau JSX dari bagian kode itu untuk mengevaluasi ulang.</p> </li> <li> <p>Pendekatan ini hanya melacak secara sinkron. Jika kamu punya sebuah <code>setTimeout</code> atau menggunakan fungsi asinkron di Effect, kode yang mengeksekusi asinkron setelah itu tidak akan terlacak.</p> </li> </ol></section><section class=\"mt-10\"><h1 id=\"rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h1><p>Solid mendukung templating dalam 3 bentuk, JSX, Tagged Template Literals dan variasi HyperScript Solid, walaupun JSX yang paling paling dominan digunakan. Kenapa? Karena JSX adalah DSL yang dibuat untuk kompilasi. Dia memiliki syntax yang jelas, mendukung TypeScript, dapat bekerja dengan Babel dan mendukung alat-alat lain seperti Code Syntax Highlighting dan Prettier. Jadi hal yang wajar untuk menggunakan alat yang pada dasarnya memberikan semua itu secara gratis. Sebagai solusi yang dikompilasi ia memberikan DX (Developer Experience) yang baik. Jadi kenapa harus menyusahkan diri dengan custom Syntax DSLs ketika kamu bisa menggunakan pilihan yang didukung secara luas?</p><h2 id=\"kompilasi-jsx\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#kompilasi-jsx\">#</a> Kompilasi JSX</h2><p>Rendering melibatkan prakompilasi template-template JSX kedalam kode native js yang dioptimalkan. Konstruksi dari kode JSX:</p><ul> <li>Elemen-elemen Template DOM yang dikloning pada setiap instansiasi</li> <li>Serangkaian deklarasi referensi hanya menggunakan <code>firstChild</code> dan <code>nextSibling</code></li> <li>Komputasi fine-grained untuk memperbarui elemen-elemen yang telah dibuat.</li> </ul><p>Pendekatan ini lebih berkinerja dan menghasilkan kode yang lebih sedikit daripada ketika kita membuat tiap elemen, satu per satu, dengan <code>document.createElement</code>.</p><h2 id=\"attributes-dan-props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attributes-dan-props\">#</a> Attributes dan Props</h2><p>Solid mencoba untuk mencerminkan konvensi HTML sebisa mungkin termasuk kasus insensitifitas dari attributes.</p><p>Mayoritas dari semua attributes pada elemen asli dari JSX telah terset sebagai attributes dari DOM. Nilai-nilai statis dibangun langsung ke dalam template yang dikloning. Tapi ada beberapa pengecualian seperti <code>class</code>, <code>style</code>, <code>value</code>, <code>innerHTML</code> yang menyediakan fungsionalitas tambahan.</p><p>Namun, elemen-elemen kustom (dengan pengecualian dari native built-in) default ke properti saat dinamis. Ini untuk menangani tipe-tipe data yang lebih kompleks. Ia melakukan konversi ini dengan mengubah nama-nama attribute snake case standar (seperti <code>some-attr</code>) menjadi camel case (seperti <code>someAttr</code>).</p><p>Namun, hal yang memungkinkan untuk mengontrol perilaku ini secara langsung dengan namespace directives. Kamu bisa memaksanya mejadi attribute dengan <code>attr:</code> atau prop dengan <code>prop:</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">UniqACC</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.value} </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.title} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Note:</strong> Attributes statis dibuat sebagai bagian dari template html yang telah dikloning. Ekspresi-ekspresi tetap dan dinamis akan diaplikasikan di urutan binding JSX. Walau ini mungkin baik-baik saja di sebagian besar elemen-elemen DOM, ada beberapa seperti elemen input dengan <code>type='range'</code>, dimana urutan sangatlah penting. Ingat hal ini ketika kamu mem-binding elemen-elemen.</p> </blockquote><h2 id=\"entry\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#entry\">#</a> Entry</h2><p>Cara termudah untuk memasang Solid adalah dengan mengimpor <code>render</code> method dari <code>solid-js/web</code>. <code>render</code> membutuhkan fungsi sebagai argumen pertamanya dan mounting container sebagai argumen keduanya dan akan mengembalikan sebuah method disposal. <code>render</code> ini akan secara otomatis membuat root reaktif dan akan menangani rendering ke dalam container mountnya. Untuk performa yang terbaik gunakan elemen yang tidak memiliki turunan.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;main&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Important</strong> Argumen pertama haruslah sebuah fungsi. Jika tidak, Solid tidak akan bisa melacak dan meng-schedule sistem reaktifnya dengan baik. Kesalahan yang sederhana ini dapat menyebabkan Effect kamu tidak dapat bekerja.</p> </blockquote><h2 id=\"komponen-komponen\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#komponen-komponen\">#</a> Komponen-komponen</h2><p>Komponen-komponen di Solid hanyalah fungsi-fungsi yang memiliki nama dengan PascalCase (huruf awal yang dikapitalisasi). Argumen pertamanya adalah objek properti dan mengembalikan node-node asli DOM.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Karena semua node-node JSX adalah sebuah node-node asli DOM, responsibilitas dari komponen-komponen tingkat atas hanyalah menambahkannya ke DOM.</p><h2 id=\"props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#props\">#</a> Props</h2><p>Sama halnya seperti React, Vue, Angular dan framework-framework lainnya, Solid memperbolehkan kamu untuk menentukan properti di komponen-komponen kamu untuk dioper ke turunan dari komponen-komponennya. Pada contoh dibawah, parent mengoper string &quot;Hello&quot; ke komponent <code>Label</code> melalui properti <code>greeting</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Pada contoh diatas, nilai yang terset di <code>greeting</code> adalah nilai statis, tapi kita juga bisa menset nilai yang dinamis. Sebagai contoh:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setGreeting</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">greeting</span><span style=\"color:#24292e\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Komponen-komponen dapat mengakses properti-properti yang dioper ke komponen tersebut melalui argumen <code>props</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Tidak seperti beberapa framework lainnya, kamu tidak bisa menggunakan &quot;object destructuring&quot; pada <code>props</code> dari komponen. Ini karena objek <code>props</code>, di belakangnya, bergantung kepada getter-getter objek untuk secara malas mengambil nilai-nilainya. Menggunakan &quot;object destructuring&quot; akan menghancurkan reaktifitas pada objek <code>props</code>.</p><p>Contoh dibawah ini menunjukkan cara yang &quot;benar&quot; untuk mengakses props di Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Disini, `props.name` akan memperbarui seperti yang kamu ekspektasikan</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Contoh dibawah ini menunjukkan cara yang tidak benar untuk mengakses props di Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Ini buruk</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Disini, `props.name` tidak akan memperbarui (yang berarti tidak reaktif) karena dia destructure ke `name` variabel</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> ({ </span><span style=\"color:#e36209\">name</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Meskipun objek <code>props</code> terlihat seperti objek biasa ketika kamu menggunakannya (dan pengguna Typescript mungkin akan mengatakan itu typed seperti objek normal pada umumnya), tapi nyatanya dia reaktif - sedikit mirip dengan Signal. Ini memiliki beberapa implikasi.</p><p>Karena tidak seperti kebanyakan framework-framework JSX, fungsi komponen di Solid hanya untuk di eksekusi satu kali (bukan setiap siklus render), contoh berikut tidak akan bekerja seperti yang kita ekspektasikan.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">default</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#e36209\"> </span><span style=\"color:#6f42c1\">Form</span><span style=\"color:#e36209\">() </span><span style=\"color:#24292e\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">input</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">oninput</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(e.currentTarget.value)} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Di contoh ini, apa yang kita mungkin ingin terjadai adalah agar <code>BasicComponent</code> bisa memunculkan nilai saat ini yang di ketikkan ke <code>input</code>. Namun, sebagai pengingat, fungsi <code>BasicComponent</code> hanya akan tereksekusi satu kali saja ketika componennya pertama kali dibuat. Di saat ini (saat pembuatan), <code>props.value</code> akan sama saja dengan <code>''</code>. Ini berarti <code>const value</code> di <code>BasicComponent</code> akan menjadi <code>'default'</code> dan tidak akan pernah ter-update. Walau mungkin objek <code>props</code> itu reaktif, mengakses props di <code>const value = props.value || 'default';</code> adalah diluar lingkup dari observable Solid, jadi dia tidak akan secara otomatis ter-evaluasi ulang ketika props terganti.</p><p>Terus bagiamana kita memperbaiki masalah ini?</p><p>Yah, secara umum, kita perlu mengakses <code>props</code> ditempat dimana Solid dapat meng-observenya. Biasanya ini berarti didalam JSX atau didalam <code>createMemo</code>, <code>createEffect</code>, atau thunk(<code>() =&gt; ...</code>). Berikut salah satu solusi yang akan bekerja sesuai harapan kita:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ini, secara ekuavilen, dapat di hoist menjadi sebuah fungsi:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Pilihan lain, jika kamu memiliki komputasi yang kompleks atau expensive, adalah dengan menggunakan <code>createMemo</code>. Sebagai contoh:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Atau menggunakan sebuah bantuan</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ value: </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Sebagai peringatan, contoh berikut ini <em>tidak</em> akan bekerja:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// buruk</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">: </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// buruk</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> prop.value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Komponen-komponen dari Solid adalah bagian kunci dari performanya. Pendekatan Solid yaitu, &quot;Menghilangkan&quot; (&quot;Vanishing&quot;) Komponen-komponen, dapat dibuat dengan mengevaluasi secara malas propertinya. Daripada mengevaluasi ekspresi prop secara langsung dan meneruskan nilainya, eksekusi akan di tahan sampai properti di akses didalam turunannya. Dengan begitu kita menghambat eksekusi sampai momen terakhir, biasanya tepat saat binding DOM terjadi, dan memaksimalkan performa. Ini juga meratakan hirearki dan menghilangkan kebutuhan untuk memelihara susunan Komponen-komponen.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Component</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop1</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop2</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.dynamic} /&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// kira-kira terkompilasi ke:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// kita meng-untrack badan komponen untuk mengisolasinya dan menghindari update yang mahal</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Component</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    prop1: </span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6a737d\">// ekspresi dinamis jadi kita membungkusnya di dalam getter</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">prop2</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> state.dynamic;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Untuk membantu memelihara reaktifitas, Solid mempunya beberapa fungsi bantuan untuk prop:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// default props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// clone props</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">newProps</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// merge props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// split props into multiple props objects</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;className&quot;</span><span style=\"color:#24292e\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#005cc5\">className</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">cx</span><span style=\"color:#24292e\">(local.className, theme.komponen)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"turunan-(children)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#turunan-(children)\">#</a> Turunan (Children)</h2><p>Solid menangani JSX Children mirip seperti React. Satu child adalah satu nilai di <code>props.children</code> dan banyak children akan di handel melalui nilai-nilai array. Biasanya, kamu akan mengoper mereka melalui view JSX. Tetapi, jika kamu mau berinteraksi dengan mereka metode yang kami sarankan adalah menggunakan bantuan <code>children</code> dimana akan menyelesaikan setiap downstream control flows dan mengembalikan sebuah memo.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// single child</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">class</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;label&quot;</span><span style=\"color:#24292e\">&gt;Hi, { props.children }&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;&lt;</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;Josie&lt;/</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// multi child</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.children}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;First&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {state.expression}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;Judith&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// map children</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.children}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// modify and map children using helper</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// children helper memoizes value and resolves all intermediate reactivity</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">memo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">children</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    children.</span><span style=\"color:#6f42c1\">forEach</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c.classList.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;list-child&quot;</span><span style=\"color:#24292e\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">()}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p><strong>Important:</strong> Solid memperlakukan child tags sebagai ekspresi yang expensive dan membungkus mereka sama seperti ekspresi-ekspresi reaktif dinamis. Ini berarti mereka ter-evaluasi secara malas ketika <code>props</code> diakses. Hati-hati ketika mengakses mereka berkali-kali atau men-destructure ditempat sebelum kamu menggunakan mereka di tampilannya. Ini karena Solid tidak mempunya kemewahan dari membuat node-node Virtual DOM sebelum waktunya lalu melakukan diffing ke mereka, jadi resolusi dari <code>props</code> ini adalah harus malas dan deliberate. Gunakan fungsi bantuan <code>children</code> jika kamu berharap untuk melakukan ini karenaia akan me-memoize mereka.</p></section><section class=\"mt-10\"><h1 id=\"rendering-di-server\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering-di-server\">#</a> Rendering di Server</h1><p>Solid menghandel rendering di Server dengan mengkompilasi template JSX menjadi kode string yang akan ditambahkan yang sangat effisien. Kita dapat melakukannya dengan menggunakan plugin babel atau dengan memasukkan <code>generate: &quot;ssr&quot;</code> ke presetnya. Untuk mengenerasi kode hydration yang cocok untuk klien dan server kamu bisa memasukkan <code>hydratable: true</code>.</p><p>Runtime <code>solid-js</code> dan <code>solid-js/web</code> ditukar dengan non-reaktif counterparts mereka ketika dijalankan di lingkungan node. Untuk lingkungan-lingkungan yang lain kamu harus membundel kode servernya dengan mengeset kondisional eksport ke <code>node</code>. Kebanyakan bundlers punya cara masing-masing untuk melakukan ini. Secara umum, kami juga menyarankan untuk menggunakan kondisional eksport <code>solid</code> karena kami menyarankan untuk tiap library mengirimkan source mereka dibawah export <code>solid</code>.</p><p>Membangun untuk SSR pastinya akan membutuhkan sedikit lebih banyak konfigurasi karena kita akan mengenerate ke 2 bundle yang terpisah. Untuk entry klien harus menggunakan <code>hydrate</code>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { hydrate } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document);</span></span>\n<span class=\"line\"></span></code></pre><p><em>Catatan: Kamu bisa merender dan meng-hydrate langsung dari root Document-nya. Ini memungkinkan kita untuk menggambarkan view kita secara utuh di JSX</em></p><p>Entry server dapat menggunakan satu dari empat pilihan rendering yang sediakan oleh Solid. Tiap pilihan akan menghasilkan output dan sebuah script tag yang nantinya akan di masukkan ke bagian <code>head</code> dari <code>document</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToString,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToStringAsync,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToNodeStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToWebStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Synchronous string rendering</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Asynchronous string rendering</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Node Stream API</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Web Stream API (Untuk seperti Cloudflare Workers)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, writable);</span></span>\n<span class=\"line\"></span></code></pre><p>Untuk memudahkan kamu, <code>solid-js/web</code> juga mengekspor sebuah fungsi flag <code>isServer</code>. Ini berguna karena kebanyakan bundler dapat melakukan 'treeshake' kepada apapun yang berada di dalam flag ini atau mengimpor hanya digunakan oleh kode di bawah flag ini dari klien bundle kamu.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { isServer } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// kode disini hanya jalan di server saja</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// kode disini hanya jalan di browser saja</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"hydration-script\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hydration-script\">#</a> Hydration Script</h2><p>Untuk bisa meng-hydrate secara progresif bahkan sebelum Solid runtime terload, sebuah script spesial harus di masukkan ke dalam pagenya. Bisa dengan cara digenerate dan dimasukkan melalui <code>generateHydrationScript</code> atau disertakan sebagai bagian dari JSX dengan menggunakan tag <code>&lt;HydrationScript /&gt;</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { generateHydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">app</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;html lang=&quot;en&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;title&gt;🔥 Solid SSR 🔥&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      ${</span><span style=\"color:#6f42c1\">generateHydrationScript</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;/head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;body&gt;${</span><span style=\"color:#24292e\">app</span><span style=\"color:#032f62\">}&lt;/body&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;/html&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { HydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">lang</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;en&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;🔥 Solid SSR 🔥&lt;/</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">charset</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;UTF-8&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;viewport&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">content</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;stylesheet&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;/styles.css&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">HydrationScript</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*... rest of App*/</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ketika meng-hydrate dari document, memasukkan aset-aset (assets) yang tidak tersedia di klien juga dapat mengacaukan beberapa hal. Solid menyediakan komponen <code>&lt;NoHydration&gt;</code> yang dimana turunannya dapat bekerja secara normal di server, tapi tidak akan dihydrate di browser.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {manifest.</span><span style=\"color:#6f42c1\">map</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">m</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;modulepreload&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{m.href} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ))}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"async-dan-streaming-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#async-dan-streaming-ssr\">#</a> Async dan Streaming SSR</h2><p>Mekanisme-mekanisme ini dibuat atas pengetahuan Solid tentang bagaimana aplikasi kamu bekerja. Dengan cara menggunakan Suspense dan Resource API di server, daripada melakukan fetching terlebih dahulu lalu me-rendering. Solid men-fetch bersamaan dengan me-render di server sebagaimana yang dilakukan di klien. Kode kamu dan pola-pola eksekusi akan di tulis dengan cara yang sama persis.</p><p>Rendering asinkron menunggu sampai semua Suspense selesai dan mengirim hasilnya (atau menulisnya ke dalam sebuah file pada kasus seperti &quot;Static Site Generation&quot;).</p><p>Streaming memulai flusing konten synchronous ke browser dengan langsung me-rendering Suspense Fallbacks kamu di server. Lalu saat data asinkron selesai di server dia akan mengirimkan data ke stream yang sama, lalu ke klien untuk menyelesaikan Suspense dimana browser menyelesaikan jobnya dan mengganti fallback dengan konten aslinya.</p><p>Keuntungan dengan cara ini:</p><ul> <li>Server tidak harus mengunggu sampai data asinkron merespon. Aset-aset (Assets) dapat langsung terload lebih cepat di browser, dan user dapat langsung melihat kontennya lebih cepat juga.</li> <li>Dibandingkan dengan &quot;clien fetching&quot; seperti JAMStack, pemuatan data mulai di server secara langsung dan tidak perlu menunggu untuk Javascript klien terload.</li> <li>Semua data telah diserialisasikan dan di pindahkan dari server ke klien secara otomatis.</li> </ul><h2 id=\"kekurangan-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#kekurangan-ssr\">#</a> Kekurangan SSR</h2><p>Solusi &quot;Isomorphic SSR&quot; Solid sangat kuat dimana kamu dapat menulis kode kamu kebanyakan dalam kode basis tunggal (single code base) yang berjalan dengan serupa di kedua lingkungan. Tetapi ada beberapa ekspektasi yang diharapkan dari hydration. Sebagian besar adalah, tampilan yang telah terender di klien akan sama dengan yang terender di server. Tidak perlu sampai dalam hal seperti teksnya, yang penting struktur markupnya harus sama.</p><p>Kami menggunakan marker-marker yang terender di server untuk mencocokkan elemen dan &quot;resource locations&quot; di server. Untuk alasan ini klien dan server harus punya komponen-komponen yang sama. Ini biasanya bukanlah masalah, mengingat Solid merender dengan cara yang sama di klien dan server. Tetapi saat ini belum ada cara untuk merender sesuatu di server yang tidak akan terhydrate di klien. Saat ini, belum ada cara untuk meng-hydrate secara partial seluruh halaman, dan tidak mengenerate marker hydration untuk itu. Bisa dibilang, Hydrate semuanya atau tidak sama sekali. Partial Hydration adalah sesuatu yang kami ingin untuk selidiki lebih dalam di masa yang akan datang.</p><p>Terakhir, semua resources harus di definisikan di dalam <code>render</code> tree. Mereka secara otomatis diserialisasi dan diambil di browser, tapi itu bekerja karena method <code>render</code> dan <code>pipeTo</code> melacak progres dari rendernya. Sesuatu yang tidak bisa kita lakukan jika mereka dibuat di konteks yang terisolasi. Sama halnya dengan tidak ada reaktifitas di server jadi jangan memperbarui signals di render awal dan mengharapkan mereka ter-refleksi di tree yang lebih atas. Meskipun kita memiliki batasan Suspense, SSR Solid pada dasarnya dari atas ke bawah.</p><h2 id=\"memulai-dengan-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#memulai-dengan-ssr\">#</a> Memulai dengan SSR</h2><p>Mengkonfigurasi SSR memang sedikit sulit. Jadi kita mempunyai beberapa contoh di package <a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a>.</p><p>Tetapi, starter baru sedang dalam pembuatan <a href=\"https://github.com/solidjs/solid-start\">SolidStart</a> yang bertujuan untuk membuat semuanya lebih mudah dan lancar dilakukan.</p><h2 id=\"memulai-dengan-static-site-generation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#memulai-dengan-static-site-generation\">#</a> Memulai dengan Static Site Generation</h2><p><a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a> juga mempunyai sebuah utility sederhana untuk mengenerate static atau sites yang telah di render. Baca README-nya untuk informasi yang lebih banya.</p></section><section class=\"mt-10\"><h1 id=\"perbandingan-dengan-library-lainnya\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#perbandingan-dengan-library-lainnya\">#</a> Perbandingan dengan Library lainnya</h1><p>Bagian ini tidak dapat lepas dari beberapa bias tetapi saya pikir penting untuk memahami di mana solusi Solid berada dibandingkan dengan library lain. Ini bukan tentang performa. Untuk melihat yang lebih definitif pada permorfa silahkan lihat ke <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a>.</p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React mempunya pengaruh yang besar kepada Solid. Aliran tidak searah (unidirectional flow) react dan pemisahan yang eksplisit tentang baca dan tulis (read and write) pada Hooks API nya membentuk Solid API. Lebih dari sekedar tujuan untuk menjadi sebuah &quot;Render Library&quot; daripada sebuah framework. Solid punya opini yang kuat pada bagaimana cara mengelola data pada pembuatan aplikasi tapi tidak berusaha membatasi pelaksanaannya.</p><p>Tetapi, walaupun Solid selaras dengan filosofi desain React, ia bekerja berbeda secara fundamental. React menggunakan sebuah Virtual DOM dan Solid tidak. Abstraksi React adalah partisi komponen tingkat atas dimana method render dipanggil berulang kali dan dibandingkan. Sedangkan Solid, me-render tiap Template sekali secara keseluruhan, membangun grafik reaktif dan baru kemudian mengeksekusi instruksi terkait dengan perbuahan fine-grained.</p><h4 id=\"saran-untuk-migrasi%3A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#saran-untuk-migrasi%3A\">#</a> Saran untuk migrasi:</h4><p>Model pembaruan Solid tidaklah sama dengan React, ataupun React + MobX. Daripada memikirkan fungsi komponen sebagai fungsi <code>render</code>, pikirkan mereka sebagai sebuah <code>constructor</code>. Hati-hati terhadap destructuring atau mengakses properti lebih awal hilang reaktifitas. Primitif-primitif Solid tidak mempunyai batasan seperti Aturan Hook (Hook Rules), jadi kamu bebas untuk menyusun (nest) mereka sesuai keinginan kamu. Kamu tidak memerlukan key eksplisit pada list rows untuk mempunya perilaku &quot;keyed&quot;. Terakhir, tidak ada VDOM sehingga API VDOM yang penting seperti <code>React.Children</code> dan <code>React.cloneElement</code> tidak akan masuk akal. Kami menganjurkan untuk mencari cara lain untuk menyelesaikan masalah yang menggunakan API-API itu secara deklaratif.</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Solid tidak terlalu dipengaruhi dengan desain Vue, tapi mereka sebanding pada pendeketannya. Mereka berdua menggunakan Proxies pada sistem Reaktif mereka dengan lacak-otomatis berbasis baca (read based auto-tracking). Tapi disitulah kesamaannya berhenti. Pendeteksi dependency &quot;fine-grained&quot; Vue hanya dimasukkan kedalam Virtual DOM yang kurang &quot;fine-grained&quot; dan sistem Komponen dimana Solid menjaga granularitasnya sampai ke pembaruan DOMnya langsung.</p><p>Vue menghargai kemudahan dimana Solid menghargai transparansi. Meskipun arah baru Vue dengan Vue 3 lebih selaras dengan pendekatan yang diambil Solid. Library-library ini mungkin akan lebih selaras dari waktu ke waktu tergantung pada bagaimana mereka terus berkembang.</p><h4 id=\"saran-untuk-migrasi%3A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#saran-untuk-migrasi%3A-1\">#</a> Saran untuk migrasi:</h4><p>Sebagai library reaktif modern lainnya, melakukan migrasi dari Vue 3 harusnya terasa familiar. Komponen-komponen Solid sangat mirip dengan menandai template di akhir fungsi <code>setup</code> Vue. Berhati-hatilah dengan &quot;overwrapping state derivations&quot; dengan komputasi, coba fungsi. Reaktifitas itu menyebar. Proxy-proxy Solid sengaja dibuat hanya-baca (read-only). Jangan mengetuknya sebelum kamu mencobanya.</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte memelopori &quot;precompiled disappearing&quot; framework yang juga digunakan Solid sampai tingkat tertentu. Kedua library ini benar-benar reaktif dan dapat menghasilkan bundel kode eksekusi yang sangat kecil meskipun Svelte adalah pemenang di sini untuk demo-demo kecil. Solid membutuhkan sedikit lebih eksplisit dalam deklarasinya, kurang mengandalkan analisis implisit dari kompiler, tetapi itu adalah bagian dari apa yang memberikan Solid kinerja superior. Solid juga menyimpan kelebihan lebih banyak di runtime yang skalanya lebih baik di aplikasi yang lebih besar. Implementasi demo RealWorld Solid 25% lebih kecil dari Svelte.</p><p>Kedua library bertujuan untuk membantu developer-developer mereka menulis kode lebih sedikit tetapi melakukan pendekatan yang sama sekali berbeda. Svelte 3 berfokus pada optimalisasi kemudahan menangani perubahan lokal yang berfokus pada interaksi objek biasa dan pengikatan dua arah (two-way binding). Sebaliknya Solid berfokus pada aliran data dengan sengaja merangkul CQRS dan antarmuka yang tidak dapat diubah. Dengan komposisi template yang fungsional, dalam banyak kasus, Solid memungkinkan developer untuk menulis kode yang lebih sedikit daripada Svelte meskipun sintaks template Svelte jelas lebih ringkas.</p><h4 id=\"saran-untuk-migrasi%3A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#saran-untuk-migrasi%3A-2\">#</a> Saran untuk migrasi:</h4><p>Pengalaman developer cukup berbeda sehingga walau beberapa hal mungkin serupa, keduanya adalah pengalaman yang sangat berbeda. Komponen-komponen di Solid itu murah, jadi jangan ragu untuk memilikinya lebih banyak.</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>Library ini berutang keberadaannya kepada Knockout. Modernisasi modelnya untuk deteksi dependency yang &quot;fine-grained&quot; adalah motivasi untuk proyek ini. Knockout dirilis pada tahun 2010 dan mendukung Microsoft Explorer sampai ke IE6 sementara Solid tidak mendukung IE sama sekali.</p><p>Binding di Knockout hanyalah string dalam HTML yang dilewati saat runtime. Mereka bergantung pada konteks kloning ($parent dll...). Sedangkan Solid menggunakan JSX atau Tagged Template Literals untuk memilih template dalam API JavaScript.</p><p>Perbedaan terbesar mungkin adalah pendekatan Solid terhadap perubahan batch yang memastikan sinkronisitas, sedangkan Knockout memiliki deferUpdates yang menggunakan antrian (queue) microtask yang ditangguhkan.</p><h4 id=\"saran-untuk-migrasi%3A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#saran-untuk-migrasi%3A-3\">#</a> Saran untuk migrasi:</h4><p>Jika kamue terbiasa dengan Knockout, primitif Solid mungkin terlihat aneh bagi kamu. Pemisahan baca/tulis-nya disengaja dan bukan hanya untuk membuat hidup lebih sulit. Lihatlah untuk mengadopsi model mental state/action (Flux). Walau library-library ini terlihat serupa, mereka mempromosikan praktik terbaik yang berbeda.</p><h2 id=\"lit-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%26-lighterhtml\">#</a> Lit &amp; LighterHTML</h2><p>Library-library ini sangat mirip dan memiliki pengaruh pada Solid. Sebagian besar kode yang dikompilasi Solid menggunakan metode yang sangat mirip untuk merender DOM secara performa. Mengkloning elemen Template dan menggunakan placeholder komentar adalah sesuatu yang sama-sama dimiliki Solid dan library ini.</p><p>Perbedaan terbesar adalah bahwa sementara library ini tidak menggunakan DOM Virtual, mereka memperlakukan rendering dengan cara yang sama, dari atas ke bawah, membutuhkan partisi komponen untuk menjaga semuanya tetap waras. Sebaliknya, Solid menggunakan Grafik Reaktif fine-grained untuk hanya memperbarui apa yang telah berubah dan dengan demikian hanya membagikan teknik ini untuk render awalnya. Pendekatan ini memanfaatkan kecepatan awal yang hanya tersedia untuk DOM asli dan juga memiliki pendekatan pembaruan yang paling berkinerja.</p><h4 id=\"saran-untuk-migrasi%3A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#saran-untuk-migrasi%3A-4\">#</a> Saran untuk migrasi:</h4><p>Library ini cukup minim dan mudah dibangun di atasnya. Namun, perlu diingat bahwa <code>&lt;MyComp/&gt;</code> bukan hanya HTMLElement (array atau fungsi). Cobalah untuk menyimpan barang-barang kamu di template JSX. Hoisting dapat bekerja untuk sebagian besar, tetapi yang terbaik adalah secara mental memikirkan ini sebagai library render dan bukan pabrik HTMLElement.</p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>Library ini memiliki pengaruh terbesar pada desain reaktif Solid. Solid menggunakan S.js secara internal selama beberapa tahun hingga set fitur menempatkannya di jalur yang berbeda. S.js adalah salah satu library reaktif paling efisien hingga saat ini. Ia memodelkan semuanya dari langkah waktu sinkron seperti sirkuit digital dan memastikan konsistensi tanpa harus melakukan banyak mekanisme yang lebih rumit yang ditemukan di perpustakaan seperti MobX. Reaktivitas Solid pada akhirnya adalah semacam campuran antara S dan MobX. Ini memberikan kinerja yang lebih besar daripada kebanyakan perpustakaan reaktif (Knockout, MobX, Vue) sambil mempertahankan kemudahan model mental untuk para developer. S.js pada akhirnya masih merupakan perpustakaan reaktif yang lebih berkinerja meskipun perbedaannya hampir tidak terlihat tetapi benchmarks sintetis yang melelahkan.</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS adalah library Reaktif. Walau Solid memiliki ide serupa tentang data yang dapat diamati, ia menggunakan aplikasi pola observer yang jauh berbeda. Sementara Signals bisa dibilang versi sederhana dari Observable (hanya yang next), pola deteksi ketergantungan otomatis menggantikan ratusan operator RxJS. Solid bisa mengambil pendekatan ini, dan memang sebelumnya, versi dari library-nya menyertakan operator serupa, tetapi dalam banyak kasus lebih mudah untuk menulis logika transformasi kamu sendiri dalam perhitungan. Di mana Observables adalah cold starting, unicast dan berbasis push (push-based), banyak masalah pada klien memungkinkan hot startup dan menjadi multicast yang merupakan perilaku default Solid.</p><h2 id=\"lainnya\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lainnya\">#</a> Lainnya</h2><p>Angular dan beberapa library populer lainnya tidak ada dalam perbandingan ini. Kurangnya pengalaman menggunakan mereka, mencegah membuat perbandingan yang memadai. Secara umum, Solid memiliki sedikit kesamaan dengan Framework-framework yang lebih besar dan akan jauh lebih sulit untuk membandingkannya secara langsung.</p></section><section class=\"mt-10\"><h1 id=\"faq\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#faq\">#</a> FAQ</h1><h3 id=\"1.-jsx-tanpa-vdom%3F-apa-ini-vaporware%3F-saya-pernah-mendengar-penulis-framewokr-framework-lainnya-mengatakan-ini-tidak-mungkin-bisa-dilakukan.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-jsx-tanpa-vdom%3F-apa-ini-vaporware%3F-saya-pernah-mendengar-penulis-framewokr-framework-lainnya-mengatakan-ini-tidak-mungkin-bisa-dilakukan.\">#</a> 1. JSX tanpa VDOM? Apa ini vaporware? Saya pernah mendengar penulis framewokr-framework lainnya mengatakan ini tidak mungkin bisa dilakukan.</h3><p>Ini memungkinkan untuk dilakukan ketika kamu tidak memiliki model pembaruan seperti React. JSX adalah Template DSL seperti yang lainnya. Hanya satu yang lebih fleksibel dengan cara tertentu. Memasukkan JavaScript arbitrer terkadang sulit, tetapi tidak berbeda dengan mendukung spread operator. Jadi tidak, ini bukan vapourware tetapi pendekatan yang terbukti menjadi salah satu yang paling berkinerja.</p><p>Manfaat sebenarnya ada pada seberapa extensible (dapat diperluas) nya library ini. Kamu memiliki kompiler yang berfungsi untuk memberi kamu pembaruan DOM asli yang optimal tetapi kamu tetap memiliki semua kebebasan library seperti React untuk menulis Komponen menggunakan teknik seperti Render Props dan Komponen Orde Tinggi (Higher Order Components) di samping &quot;hooks&quot; reaktif Anda. Tidak suka cara kerja aliran kontrol Solid? Buat punyamu sendiri.</p><h3 id=\"2.-bagaimana-solid-bisa-sangat-cepat%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-bagaimana-solid-bisa-sangat-cepat%3F\">#</a> 2. Bagaimana Solid bisa sangat cepat?</h3><p>Kami berharap kami dapat menunjukkannya ke satu hal saja, tetapi semua ini benar-benar kombinasi dari banyak keputusan desain penting:</p><ol> <li>Reaktivitas eksplisit sehingga hanya hal-hal yang seharusnya reaktif yang dilacak.</li> <li>Kompilasi dengan mempertimbangkan pembuatan awal. Solid menggunakan heuristik untuk melonggarkan granularitas guna mengurangi jumlah komputasi yang dilakukan tetapi tetap mempertahankan key pembaruan yang terperinci dan berkinerja.</li> <li>Ekspresi reaktif hanyalah fungsi. Ini memungkinkan &quot;Vanishing Components&quot; dengan evaluasi lazy prop yang menghapus pembungkus yang tidak perlu dan overhead sinkronisasi.</li> </ol><p>Ini adalah teknik-teknik unik saat ini dalam kombinasi yang memberi Solid keunggulan dalam persaingan.</p><h3 id=\"3.-apa-ada-semacam-react-compat%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-apa-ada-semacam-react-compat%3F\">#</a> 3. Apa ada semacam React-Compat?</h3><p>Tidak. Dan kemungkinan besar tidak akan pernah ada. Meskipun API serupa dan komponen sering kali dapat dipindahkan dengan sedikit pengeditan, model pembaruannya pada dasarnya berbeda. Komponen-komponen React dirender berulang-ulang sehingga kode di luar Hooks bekerja dengan sangat berbeda. Aturan closures dan hook bukan hanya tidak perlu, tetapi juga dapat digunakan dengan cara yang tidak akan bekerja di sini.</p><p>Vue-compat di sisi lain, itu bisa dilakukan. Meskipun tidak ada rencana untuk diterapkan saat ini.</p><h3 id=\"4.-mengapa-destrukturisasi-tidak-berhasil%3F-saya-menyadari-bahwa-saya-dapat-memperbaikinya-dengan-membungkus-seluruh-komponen-saya-dalam-suatu-fungsi.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-mengapa-destrukturisasi-tidak-berhasil%3F-saya-menyadari-bahwa-saya-dapat-memperbaikinya-dengan-membungkus-seluruh-komponen-saya-dalam-suatu-fungsi.\">#</a> 4. Mengapa destrukturisasi tidak berhasil? Saya menyadari bahwa saya dapat memperbaikinya dengan membungkus seluruh komponen saya dalam suatu fungsi.</h3><p>Reaktivitas terjadi pada akses properti pada objek Prop dan Store. Merujuk (Referencing) mereka di luar komputasi yang mengikat atau reaktif tidak akan dilacak. Melakukan destrukturisasi boleh-boleh saja di dalam mereka.</p><p>Namun, membungkus seluruh komponen kamu dalam suatu fungsi bukanlah hal yang ingin kamu lakukan secara tidak bertanggung jawab. Solid tidak memiliki VDOM. Jadi setiap perubahan yang dilacak akan menjalankan seluruh fungsi lagi menciptakan semuanya. Jangan lakukan itu.</p><h3 id=\"5.-bisakah-kamu-menambahkan-dukungan-untuk-class-komponen%3F-saya-menemukan-lifecycles-lebih-mudah-untuk-dipikirkan.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-bisakah-kamu-menambahkan-dukungan-untuk-class-komponen%3F-saya-menemukan-lifecycles-lebih-mudah-untuk-dipikirkan.\">#</a> 5. Bisakah kamu menambahkan dukungan untuk class komponen? Saya menemukan lifecycles lebih mudah untuk dipikirkan.</h3><p>Bukan niat kami untuk mendukung class komponen. Lifecycles Solid terkait dengan penjadwalan sistem reaktif dan buatan. Kamu bisa membuat kelas darinya, saya kira, tetapi secara efektif semua kode pengendali non-event pada dasarnya dijalankan di konstruktor, termasuk fungsi render. Ini hanya lebih banyak sintaks untuk alasan membuat data kamu kurang terperinci.</p><p>Kamu bisa mengelompokkan data dan perilakunya bersama-sama, daripada lifecycles. Ini adalah praktik terbaik reaktif yang telah berhasil selama beberapa dekade.</p><h3 id=\"6.-saya-sangat-tidak-menyukai-jsx%2C-apakah-ada-kemungkinan-untuk-menggunakan-template-dsl%3F-oh%2C-saya-lihat-kamu-memiliki-tagged-template-literals%2Fhyperscript.-mungkin-saya-akan-menggunakan-mereka-...\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-saya-sangat-tidak-menyukai-jsx%2C-apakah-ada-kemungkinan-untuk-menggunakan-template-dsl%3F-oh%2C-saya-lihat-kamu-memiliki-tagged-template-literals%2Fhyperscript.-mungkin-saya-akan-menggunakan-mereka-...\">#</a> 6. Saya sangat tidak menyukai JSX, apakah ada kemungkinan untuk menggunakan Template DSL? Oh, saya lihat kamu memiliki Tagged Template Literals/HyperScript. Mungkin saya akan menggunakan mereka ...</h3><p>Jangan. Saya menghentikan kamu di sana. Kami menggunakan JSX sebagaimana Svelte menggunakan template mereka, untuk membuat instruksi-intruksi DOM yang telah dioptimalkan. Solusi Tagged Template Literal dan HyperScript mungkin benar-benar mengesankan, tetapi kecuali kamu memiliki alasan nyata seperti persyaratan no-build, mereka lebih rendah dalam segala hal. Bundel yang lebih besar, kinerja yang lebih lambat, dan kebutuhan akan nilai pembungkus solusi manual.</p><p>Memang baik untuk memiliki opsi, tetapi JSX Solid benar-benar solusi terbaik di sini. Template DSL juga bagus, meskipun lebih ketat, tetapi JSX memberi kita banyak hal secara gratis. TypeScript, Parser yang Ada, Syntax Highlighting, TypeScript, Prettier, Code Completion, dan yang terakhir dan tidak kalah pentingnya TypeScript.</p><p>Library-library lain telah menambahkan dukungan untuk fitur-fitur ini tetapi itu merupakan upaya yang sangat besar dan masih belum sempurna dan maintenance yang bikin sakit kepala terus. Ini bisa dibilang mengambil sikap pragmatis.</p><h3 id=\"7.-kapan-saya-menggunakan-signal-vs-store%3F-mengapa-mereka-berbeda%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-kapan-saya-menggunakan-signal-vs-store%3F-mengapa-mereka-berbeda%3F\">#</a> 7. Kapan saya menggunakan Signal vs Store? Mengapa mereka berbeda?</h3><p>Stores secara otomatis membungkus nilai bersarang (nested values) sehingga ideal untuk struktur data yang dalam, dan untuk hal-hal seperti model-model. Untuk sebagian besar hal lainnya, Signals itu ringan dan melakukan pekerjaan dengan luar biasa.</p><p>Kami juga sangat ingin membungkus/menjadikan mereka sebagai satu hal yang sama, tapi kita tidak bisa memproksikan primitif. Fungsi adalah antarmuka paling sederhana, dan ekspresi reaktif apa pun (termasuk akses state) dapat digabungkan menjadi satu, saat pengangkutan sehingga ini menyediakan API universal. Kamu dapat memberi nama sinyal dan state kamu sesuai pilihan dan mereka tetap minimal. Hal terakhir yang ingin kita lakukan adalah memaksa mengetik <code>.get()</code> <code>.set()</code> pada pengguna akhir (end user) atau lebih buruk lagi <code>.value</code>. Setidaknya yang signal bisa dialiaskan (aliased) untuk singkatnya, sedangkan yang terakhir hanyalah cara yang paling singkat untuk memanggil suatu fungsi.</p><h3 id=\"8.-mengapa-saya-tidak-bisa-memberikan-nilai-ke-solid's-store-seperti-yang-saya-bisa-lakukan-di-vue%2C-svelte%2C-atau-mobx%3F-di-mana-pengikatan-2-arah-(2-way-bindings)-nya%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.-mengapa-saya-tidak-bisa-memberikan-nilai-ke-solid's-store-seperti-yang-saya-bisa-lakukan-di-vue%2C-svelte%2C-atau-mobx%3F-di-mana-pengikatan-2-arah-(2-way-bindings)-nya%3F\">#</a> 8. Mengapa saya tidak bisa memberikan nilai ke Solid's Store seperti yang saya bisa lakukan di Vue, Svelte, atau MobX? Di mana pengikatan 2 arah (2-way bindings) nya?</h3><p>Reaktivitas adalah alat yang ampuh tetapi juga berbahaya. MobX mengetahui hal ini dan memperkenalkan mode Ketat (Strict Mode) dan Actions untuk membatasi di mana/kapan pembaruan terjadi. Dalam Solid, yang berhubungan dengan seluruh pohon komponen data, sesuatu hal yang jelas bahwa kita dapat belajar sesuatu dari React di sini. Kamu tidak perlu benar-benar menjadikannya immutable selama kamu menyediakan sarana untuk memiliki kontrak yang sama.</p><p>Mampu melewati kemampuan untuk memperbarui state bisa dibilang lebih penting daripada memutuskan untuk mengoper state. Jadi, kemampuan untuk memisahkan itu penting, dan hanya mungkin jika membaca (reading) tidak dapat diubah (immutable). Kami juga tidak perlu membayar biaya dari (immutability) jika kami masih dapat memperbarui secara terperinci. Untungnya ada banyak karya sebelumnya di sini antara ImmutableJS dan Immer. Ironisnya Solid sebagian besar bertindak sebagai Immer terbalik dengan internal yang dapat berubah (mutable) dan antarmuka yang tidak dapat diubah (immutable).</p><h3 id=\"9.-bisakah-saya-menggunakan-reaktivitas-solid-sendiri%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-bisakah-saya-menggunakan-reaktivitas-solid-sendiri%3F\">#</a> 9. Bisakah saya menggunakan reaktivitas Solid sendiri?</h3><p>Tentu saja. Meskipun kami belum mengekspor packagenya secara mandiri/terpisah, mudah bagi kamu untuk menginstal Solid tanpa kompiler dan hanya menggunakan primitif reaktif. Salah satu manfaat reaktivitas granular adalah library agnostik. Dalam hal ini, hampir setiap perpustakaan reaktif bekerja dengan cara ini. Itulah yang mengilhami <a href=\"https://github.com/solidjs/solid\">Solid</a> dan <a href=\"https://github.com/ryansolid/dom-expressions\">DOM Expressions library</a> yang mendasarinya untuk membuat penyaji murni dari sistem reaktif.</p><p>Beberapa hal yang kamu dapat coba: <a href=\"https://github.com/solidjs/solid\">Solid</a>, <a href=\"https://github.com/mobxjs/mobx\">MobX</a>, <a href=\"https://github.com/knockout/knockout\">Knockout</a>, <a href=\"https://github.com/sveltejs/svelte\">Svelte</a>, <a href=\"https://github.com/adamhaile/S\">S.js</a>, <a href=\"https://github.com/Riim/cellx\">CellX</a>, <a href=\"https://github.com/ds300/derivablejs\">Derivable</a>, <a href=\"https://github.com/luwes/sinuous\">Sinuous</a>, dan bahkan baru-baru ini <a href=\"https://github.com/vuejs/vue\">Vue</a>. Lebih banyak lagi yang dilakukan untuk membuat library reaktif daripada menandainya ke perender seperti, <a href=\"https://github.com/Polymer/lit-html\">lit-html</a> misalnya, tetapi ini adalah cara yang baik untuk merasakannya.</p><h3 id=\"10.-apakah-solid-memiliki-library-seperti-next.js-atau-material-components-yang-dapat-saya-gunakan%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-apakah-solid-memiliki-library-seperti-next.js-atau-material-components-yang-dapat-saya-gunakan%3F\">#</a> 10. Apakah Solid memiliki library seperti Next.js atau Material Components yang dapat saya gunakan?</h3><p>Tidak sepengetahuan kami. Jika kamu tertarik untuk membuatnya, kami siap tersedia di <a href=\"https://discord.com/invite/solidjs\">Discord</a> kami untuk membantu membangunnya. Kami sudah memiliki dasar-dasarnya dan hanya perlu membangunnya dari dasar-dasar itu.</p></section>"
}