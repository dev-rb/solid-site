{
  "sections": [
    {
      "slug": "pendahuluan",
      "title": "Pendahuluan",
      "level": 1,
      "children": [
        {
          "slug": "mencoba-solid",
          "title": "Mencoba Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "belajar-solid",
          "title": "Belajar Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "berpikir-dengan-cara-solid",
          "title": "Berpikir dengan cara Solid",
          "level": 2,
          "children": [
            {
              "slug": "1.-data-yang-deklaratif",
              "title": "1. Data yang Deklaratif",
              "level": 3,
              "children": []
            },
            {
              "slug": "2.-komponen-yang-hilang",
              "title": "2. Komponen yang Hilang",
              "level": 3,
              "children": []
            },
            {
              "slug": "3.-pemisahan-membaca%2Fmenulis",
              "title": "3. Pemisahan Membaca/Menulis",
              "level": 3,
              "children": []
            },
            {
              "slug": "4.-sederhana-lebih-baik-daripada-mudah",
              "title": "4. Sederhana lebih baik daripada mudah",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "web-components",
          "title": "Web Components",
          "level": 2,
          "children": []
        },
        {
          "slug": "me-render-di-server",
          "title": "Me-render di Server",
          "level": 2,
          "children": []
        },
        {
          "slug": "tanpa-kompilasi%3F",
          "title": "Tanpa Kompilasi?",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "reaktifitas",
      "title": "Reaktifitas",
      "level": 1,
      "children": [
        {
          "slug": "memperkenalkan-primitif-primitif",
          "title": "Memperkenalkan Primitif-primitif",
          "level": 2,
          "children": []
        },
        {
          "slug": "bagaimana-mereka-bekerja",
          "title": "Bagaimana mereka Bekerja",
          "level": 2,
          "children": []
        },
        {
          "slug": "hal-yang-perlu-dipertimbangkan",
          "title": "Hal yang perlu dipertimbangkan",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendering",
      "title": "Rendering",
      "level": 1,
      "children": [
        {
          "slug": "kompilasi-jsx",
          "title": "Kompilasi JSX",
          "level": 2,
          "children": []
        },
        {
          "slug": "attributes-dan-props",
          "title": "Attributes dan Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "entry",
          "title": "Entry",
          "level": 2,
          "children": []
        },
        {
          "slug": "komponen-komponen",
          "title": "Komponen-komponen",
          "level": 2,
          "children": []
        },
        {
          "slug": "props",
          "title": "Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "turunan-(children)",
          "title": "Turunan (Children)",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendering-di-server",
      "title": "Rendering di Server",
      "level": 1,
      "children": [
        {
          "slug": "hydration-script",
          "title": "Hydration Script",
          "level": 2,
          "children": []
        },
        {
          "slug": "async-dan-streaming-ssr",
          "title": "Async dan Streaming SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "kekurangan-ssr",
          "title": "Kekurangan SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "memulai-dengan-ssr",
          "title": "Memulai dengan SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "memulai-dengan-static-site-generation",
          "title": "Memulai dengan Static Site Generation",
          "level": 2,
          "children": []
        }
      ]
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"pendahuluan\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pendahuluan\">#</a> Pendahuluan</h1><h2 id=\"mencoba-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mencoba-solid\">#</a> Mencoba Solid</h2><p>Sejauh ini cara termudah untuk mulai menggunakan Solid adalah dengan mencobanya secara online. REPL kami di <a href=\"https://playground.solidjs.com\">https://playground.solidjs.com</a> adalah cara terbaik untuk mencoba ide-ide kamu. Sama halnya dengan <a href=\"https://codesandbox.io/\">https://codesandbox.io/</a> dimana kamu dapat mengubah semua contoh yang kami sediakan.</p><p>Atau, kamu juga dapat menggunakan template-template <a href=\"https://vitejs.dev/\">Vite</a> sederhana kami dengan menjalankan perintah-perintah dibawah ini pada terminal kamu:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/js my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"></span></code></pre><p>Atau untuk pengguna TypeScript:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/ts my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># or yarn or pnpm</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"belajar-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#belajar-solid\">#</a> Belajar Solid</h2><p>Solid pada dasarnya adalah bagian-bagian kecil yang dapat di komposisikan sehingga kamu dapat menggunakannnya sebagai blok-blok bangunan untuk membuat sebuahaplikasi. Bagian-bagian ini pada umumnya terdiri dari fungsi-fungsi yang terbuat dari API tingkat-atas yang dangkal. Untungnya, kamu tidak perlu tahu tentang semua hal itu untuk memulai.</p><p>Dua tipe utama dari blok-blok bangunan yang kamu punya adalah Komponen dan Primitif-Primitif Reaktif.</p><p>Komponen adalah fungsi yang dapat menerima properti objek dan mengembalikan elemen JSX termasuk elemen DOM asli dan komponen lainnya. Mereka dapat di ekspresikan sebagai elemen JSX dalam bentuk PascalCase:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Hello {props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Solid&quot;</span><span style=\"color:#24292e\"> /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Komponen itu ringan karena mereka tidak stateful dan tidak memiliki instance. Sebaliknya, mereka berfungsi sebagai factory functions untuk element DOM dan Primitif-Primitif Reaktif.</p><p>Reaktivitas halus dari Solid dibangun di atas 3 primitif sederhana: Signals, Memo, dan Effects. Bersama-sama, mereka membentuk mesin pelacakan sinkronisasi otomatis yang memastikan tampilan kamu tetap terbarui. Komputasi-komputasi reaktif mengambil bentuk sebagai ekspresi-ekspresi yang terbungkus fungsi yang dieksekusi secara bersamaan.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">first</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setFirst</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;JSON&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">last</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setLast</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Bourne&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">first</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">last</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><p>Kamu dapat mempelajari lebih dalam tentang <a href=\"#reaktifitas\">Reaktifitas pada Solid</a> dan <a href=\"#rendering\">Rendering pada Solid</a>.</p><h2 id=\"berpikir-dengan-cara-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#berpikir-dengan-cara-solid\">#</a> Berpikir dengan cara Solid</h2><p>Desain Solid mengambil beberapa pendapat tentang prinsip dan nilai yang dapat membantu kita membuat website dan aplikasi yang terbaik. Akan lebih mudah untuk mempelajari dan menggunakan Solid ketika kamu paham tentang filosofi dibaliknya.</p><h3 id=\"1.-data-yang-deklaratif\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-data-yang-deklaratif\">#</a> 1. Data yang Deklaratif</h3><p>Data yang deklaratif adalah praktik mengikat deskripsi dari sebuah perilaku data ke deklarasinya. Ini memungkinkan untuk komposisi yang mudah dengan mengemas semua aspek perilaku dari data tersebut pada satu tempat.</p><h3 id=\"2.-komponen-yang-hilang\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-komponen-yang-hilang\">#</a> 2. Komponen yang Hilang</h3><p>Sudah cukup sulit untuk menyusun komponen-komponen kamu tanpa perlu mempertimbangkan pembaruan. Pembaruan di Solid betul-betul tidak bergantung terhadap komponen. Fungsi komponen hanya dipanggil satu kali saja lalu tidak ada lagi. Komponen-komponen ada hanya untuk mengatur kode kamu dan sedikit hal lainnya.</p><h3 id=\"3.-pemisahan-membaca%2Fmenulis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-pemisahan-membaca%2Fmenulis\">#</a> 3. Pemisahan Membaca/Menulis</h3><p>Kontrol yang presisi dan dapat diprediksi membuat sistem menjadi lebih baik. Kita tidak membutuhkan immutability yang sesungguhnya untuk memaksakan unidirectional flow, kita hanya perlu kemampuan untuk membuat keputusan sadar, yang mana yang mungkin ditulis dan yang mana yang tidak, oleh kostumer.</p><h3 id=\"4.-sederhana-lebih-baik-daripada-mudah\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-sederhana-lebih-baik-daripada-mudah\">#</a> 4. Sederhana lebih baik daripada mudah</h3><p>Sebuah pelajaran yang dapat diambil dari Reaktifitas halus (fine-grained). Konvensi yang eksplisit dan konsisten bahkan jika membutuhkan lebih banyak usaha tidak akan sia-sia. Karena tujuannya adalah menyediakan alat-alat minimal sebagai dasar/pondasi untuk membangun.</p><h2 id=\"web-components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#web-components\">#</a> Web Components</h2><p>Solid lahir dengan keinginan untuk membuat Web Components sebagai &quot;first class citizens&quot;. Seiring waktu, desain dari solid berkembang dan tujuannya pun berganti. Tetapi, Solid tetap menjadi pilihan yang cocok untuk pengguna Web Components. <a href=\"https://github.com/solidjs/solid/tree/main/packages/solid-element\">Solid Element</a> membolehkan kamu untuk menulis dan membungkus fungsi komponen Solid untuk menghasilkan Web Components yang kecil dan mempunyai performa baik. Didalam aplikasi Solid, Solid Element tetap dapat memanfaatkan Context API dari Solid, dan dukungan Shadow DOM isolated styling dari Solid Portals.</p><h2 id=\"me-render-di-server\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#me-render-di-server\">#</a> Me-render di Server</h2><p>Solid memiliki solusi untuk melakukan render di server yang dynamic yang memungkinkan kamu mendapatkan pengalaman isomorphic development yang sesungguhnya. Melalui penggunaan Resource Primitif kami, async data requests dapat dengan mudah dibuat dan yang lebih penting, secara otomatis diserialisasi dan disingkronkan antara klien dan browser.</p><p>Karena Solid mendukung rendering secara asinkron dan streaming di server, kamu dapat menulis kode kamu dengan satu cara dan membuatnya dapat dieksekusi di server. Yang berarti fitur seperti <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\">render-as-you-fetch</a> dan pemecahan kode dapat bekerja begitu saja di Solid.</p><p>Untuk informasi lebih lanjut, silahkan baca <a href=\"#rendering-di-server\">Panduan Server</a></p><h2 id=\"tanpa-kompilasi%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tanpa-kompilasi%3F\">#</a> Tanpa Kompilasi?</h2><p>Membenci JSX? Tidak keberatan melakukan pekerjaan manual untuk membungkus ekspresi-ekspresi, kinerja yang lebih buruk, dan ukuran bundel yang lebih besar? Secara alternatif, kamu dapat membuat aplikasi Solid menggunakan Tagged Template Literals atau HyperScript di lingkungan tanpa kompilasi.</p><p>Kamu dapat menjalankan langsung dari browser menggunakan <a href=\"https://www.skypack.dev/\">Skypack</a>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#24292e\">=</span><span style=\"color:#032f62\">&quot;module&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        createSignal,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        onCleanup,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> html </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/html&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">          </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">html</span><span style=\"color:#032f62\">`&lt;div&gt;${</span><span style=\"color:#24292e\">count</span><span style=\"color:#032f62\">}&lt;/div&gt;`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      };</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.body);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Ingat kamu tetap harus memerlukan library DOM Expressions yang sesuai untuk membuat mereka bekerja dengan TypeScript. Kamu dapat menggunakan Tagged Template Literals dengan <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/lit-dom-expressions\">Lit DOM Expressions</a> atau HyperScript dengan <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/hyper-dom-expressions\">Hyper DOM Expressions</a>.</p></section><section class=\"mt-10\"><h1 id=\"reaktifitas\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reaktifitas\">#</a> Reaktifitas</h1><p>Manajemen data pada Solid dibuat dari seperangkat primitif-primitif reaktif yang fleksibel yang akan bertanggung jawab untuk semua pembaruan. Ini hampir sama yang dilakukan MobX atau Vue kecuali kita tidak mengorbankan granularitas untuk VDOM. Dependencies secara otomatis akan dilacak ketika kamu mengakses nilai reaktif kamu di Effects kamu dan kode JSX View.</p><p>Primitif-primitif pada Solid datang dengan berbentuk panggilan fungsi <code>create</code> yang biasanya mengembalikan tuples, dimana secara umum elemen pertamanya adalah primitif yang dapat dibaca dan yang keduanya sebuah &quot;setter&quot;. Itu sesuatu yang umum untuk merujuk ke bagian yang dapat dibaca dengan nama primitifnya.</p><p>Berikut adalah penghitung kenaikan otomatis dasar yang diperbarui berdasarkan pengaturan signal <code>count</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal, onCleanup } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"memperkenalkan-primitif-primitif\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#memperkenalkan-primitif-primitif\">#</a> Memperkenalkan Primitif-primitif</h2><p>Solid terbentuk dari 3 primitif utama, Signal, Memo, dan Effect. Mereka mempunyai pola Observer dimana Signal (dan Memo) akan dilacak dengan membungkus Memo dan Effect.</p><p>Signal adalah primitif yang paling sederhana. Dia memiliki fungsi nilai, dan get dan set supaya kita dapat menangkap ketika mereka dipanggil atau diganti.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Effect adalah fungsi yang membungkus read dari signal kita dan mengeksekusi ulang ketika nilai yang bergantung ke Signal terganti. Ini berguna saat kita membuat side effect, seperti rendering.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;The latest count is&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>Yang terakhir, Memo adalah nilai turunan yang di-cache. Mereka berbagi properti dengan Signal dan Effect. Mereka melacak Signal, yang bergantung kepada mereka, sendiri dan mengeksekusi ulang hanya ketika mereka terganti, dan mereka sendiri adalah Signal yang dapat dilacak.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fullName</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">firstName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">lastName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"bagaimana-mereka-bekerja\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#bagaimana-mereka-bekerja\">#</a> Bagaimana mereka Bekerja</h2><p>Signal adalah &quot;event emitters&quot; yang menyimpan daftar dari subscription. Mereka memberitahu subscribers mereka setiap kali nilai mereka berganti.</p><p>Yang lebih menariknya adalah bagaimana subscriptions ini terjadi. Solid menggunakan pelacakan dependency otomatis. Pembaruan terjadi secara otomatis setiap kali data berganti.</p><p>Triknya adalah tumpukan global saat runtime. Sebelum Effect atau Memo mengeksekusi (atau mengeksekusi ulang) fungsi yang telah disediakan developer, dia akan menumpukkan diri ke tumpukan tersebut. Lalu, setiap Signal yang membaca akan mengecek apakah ada listener di tumpukan dan jika ada tambahkan listener tersebut ke subscriptions mereka.</p><p>Kamu dapat memikirkannya seperti ini:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">subscribers</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">Set</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">read</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">listener</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">getCurrentListener</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (listener) subscribers.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(listener);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">nextValue</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> nextValue;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">for</span><span style=\"color:#24292e\"> (</span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sub</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">of</span><span style=\"color:#24292e\"> subscribers) sub.</span><span style=\"color:#6f42c1\">run</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> [read, write];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Sekarang ketika kita melakukan pembaruan, Signal kita tahu mana Effect yang akan dijalankan ulang. Sederhana tapi efektif. Implementasi sebenarnya jauh lebih kompleks tapi seperti itulah inti dari bagaimana mereka bekerja.</p><p>Untuk memahami lebih detail bagaimana Reaktifitas bekerja, berikut artikel-artikel yang mungkin berguna untuk kamu:</p><p><a href=\"https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf\">A Hands-on Introduction to Fine-Grained Reactivity</a></p><p><a href=\"https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p\">Building a Reactive Library from Scratch</a></p><p><a href=\"https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering\">SolidJS: Reactivity to Rendering</a></p><h2 id=\"hal-yang-perlu-dipertimbangkan\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hal-yang-perlu-dipertimbangkan\">#</a> Hal yang perlu dipertimbangkan</h2><p>Pendekatan reaktifitas seperti ini bisa dibilang sangat kuat dan dinamis. Cara ini bisa menghandel dependencies yang berubah begitu saja dengan mengeksekusi cabang berbeda dari kode kondisional. Ia juga dapat bekerja pada banyak level indirection. Setiap fungsi yang tereksekusi didalam cakupan pelacakan akan dilacak juga.</p><p>Tetapi, ada beberapa kunci perilaku dan pertukaran yang perlu kita waspadai.</p><ol> <li> <p>Semua reaktifitas akan terlacak dari panggilan fungsi mau itu secara langsung atau tersembunyi dibawah getter/proxy dan dapat dipicu oleh pengaksesan properti objek. Ini berarti tempat kamu mengakses properti objek reaktifitas sangatlah penting.</p> </li> <li> <p>Komponen dan callbacks dari control flows bukanlah cakupan pelacakan dan hanya akan tereksekusi satu kali. Ini berarti meng-destructure atau melakukan tingkat-atas logika di komponen-komponen kamu tidak dapat ter-eksekusi ulang. Kamu harus mengakses Signal, Store, dan properti-properti ini dari dalam primitif-primitif reaktif lain atau JSX dari bagian kode itu untuk mengevaluasi ulang.</p> </li> <li> <p>Pendekatan ini hanya melacak secara sinkron. Jika kamu punya sebuah <code>setTimeout</code> atau menggunakan fungsi asinkron di Effect, kode yang mengeksekusi asinkron setelah itu tidak akan terlacak.</p> </li> </ol></section><section class=\"mt-10\"><h1 id=\"rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h1><p>Solid mendukung templating dalam 3 bentuk, JSX, Tagged Template Literals dan variasi HyperScript Solid, walaupun JSX yang paling paling dominan digunakan. Kenapa? Karena JSX adalah DSL yang dibuat untuk kompilasi. Dia memiliki syntax yang jelas, mendukung TypeScript, dapat bekerja dengan Babel dan mendukung alat-alat lain seperti Code Syntax Highlighting dan Prettier. Jadi hal yang wajar untuk menggunakan alat yang pada dasarnya memberikan semua itu secara gratis. Sebagai solusi yang dikompilasi ia memberikan DX (Developer Experience) yang baik. Jadi kenapa harus menyusahkan diri dengan custom Syntax DSLs ketika kamu bisa menggunakan pilihan yang didukung secara luas?</p><h2 id=\"kompilasi-jsx\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#kompilasi-jsx\">#</a> Kompilasi JSX</h2><p>Rendering melibatkan prakompilasi template-template JSX kedalam kode native js yang dioptimalkan. Konstruksi dari kode JSX:</p><ul> <li>Elemen-elemen Template DOM yang dikloning pada setiap instansiasi</li> <li>Serangkaian deklarasi referensi hanya menggunakan <code>firstChild</code> dan <code>nextSibling</code></li> <li>Komputasi fine-grained untuk memperbarui elemen-elemen yang telah dibuat.</li> </ul><p>Pendekatan ini lebih berkinerja dan menghasilkan kode yang lebih sedikit daripada ketika kita membuat tiap elemen, satu per satu, dengan <code>document.createElement</code>.</p><h2 id=\"attributes-dan-props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attributes-dan-props\">#</a> Attributes dan Props</h2><p>Solid mencoba untuk mencerminkan konvensi HTML sebisa mungkin termasuk kasus insensitifitas dari attributes.</p><p>Mayoritas dari semua attributes pada elemen asli dari JSX telah terset sebagai attributes dari DOM. Nilai-nilai statis dibangun langsung ke dalam template yang dikloning. Tapi ada beberapa pengecualian seperti <code>class</code>, <code>style</code>, <code>value</code>, <code>innerHTML</code> yang menyediakan fungsionalitas tambahan.</p><p>Namun, elemen-elemen kustom (dengan pengecualian dari native built-in) default ke properti saat dinamis. Ini untuk menangani tipe-tipe data yang lebih kompleks. Ia melakukan konversi ini dengan mengubah nama-nama attribute snake case standar (seperti <code>some-attr</code>) menjadi camel case (seperti <code>someAttr</code>).</p><p>Namun, hal yang memungkinkan untuk mengontrol perilaku ini secara langsung dengan namespace directives. Kamu bisa memaksanya mejadi attribute dengan <code>attr:</code> atau prop dengan <code>prop:</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">UniqACC</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.value} </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.title} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Note:</strong> Attributes statis dibuat sebagai bagian dari template html yang telah dikloning. Ekspresi-ekspresi tetap dan dinamis akan diaplikasikan di urutan binding JSX. Walau ini mungkin baik-baik saja di sebagian besar elemen-elemen DOM, ada beberapa seperti elemen input dengan <code>type='range'</code>, dimana urutan sangatlah penting. Ingat hal ini ketika kamu mem-binding elemen-elemen.</p> </blockquote><h2 id=\"entry\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#entry\">#</a> Entry</h2><p>Cara termudah untuk memasang Solid adalah dengan mengimpor <code>render</code> method dari <code>solid-js/web</code>. <code>render</code> membutuhkan fungsi sebagai argumen pertamanya dan mounting container sebagai argumen keduanya dan akan mengembalikan sebuah method disposal. <code>render</code> ini akan secara otomatis membuat root reaktif dan akan menangani rendering ke dalam container mountnya. Untuk performa yang terbaik gunakan elemen yang tidak memiliki turunan.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;main&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Important</strong> Argumen pertama haruslah sebuah fungsi. Jika tidak, Solid tidak akan bisa melacak dan meng-schedule sistem reaktifnya dengan baik. Kesalahan yang sederhana ini dapat menyebabkan Effect kamu tidak dapat bekerja.</p> </blockquote><h2 id=\"komponen-komponen\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#komponen-komponen\">#</a> Komponen-komponen</h2><p>Komponen-komponen di Solid hanyalah fungsi-fungsi yang memiliki nama dengan PascalCase (huruf awal yang dikapitalisasi). Argumen pertamanya adalah objek properti dan mengembalikan node-node asli DOM.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Karena semua node-node JSX adalah sebuah node-node asli DOM, responsibilitas dari komponen-komponen tingkat atas hanyalah menambahkannya ke DOM.</p><h2 id=\"props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#props\">#</a> Props</h2><p>Sama halnya seperti React, Vue, Angular dan framework-framework lainnya, Solid memperbolehkan kamu untuk menentukan properti di komponen-komponen kamu untuk dioper ke turunan dari komponen-komponennya. Pada contoh dibawah, parent mengoper string &quot;Hello&quot; ke komponent <code>Label</code> melalui properti <code>greeting</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Pada contoh diatas, nilai yang terset di <code>greeting</code> adalah nilai statis, tapi kita juga bisa menset nilai yang dinamis. Sebagai contoh:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setGreeting</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">greeting</span><span style=\"color:#24292e\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Komponen-komponen dapat mengakses properti-properti yang dioper ke komponen tersebut melalui argumen <code>props</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Tidak seperti beberapa framework lainnya, kamu tidak bisa menggunakan &quot;object destructuring&quot; pada <code>props</code> dari komponen. Ini karena objek <code>props</code>, di belakangnya, bergantung kepada getter-getter objek untuk secara malas mengambil nilai-nilainya. Menggunakan &quot;object destructuring&quot; akan menghancurkan reaktifitas pada objek <code>props</code>.</p><p>Contoh dibawah ini menunjukkan cara yang &quot;benar&quot; untuk mengakses props di Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Disini, `props.name` akan memperbarui seperti yang kamu ekspektasikan</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Contoh dibawah ini menunjukkan cara yang tidak benar untuk mengakses props di Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Ini buruk</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Disini, `props.name` tidak akan memperbarui (yang berarti tidak reaktif) karena dia destructure ke `name` variabel</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> ({ </span><span style=\"color:#e36209\">name</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Meskipun objek <code>props</code> terlihat seperti objek biasa ketika kamu menggunakannya (dan pengguna Typescript mungkin akan mengatakan itu typed seperti objek normal pada umumnya), tapi nyatanya dia reaktif - sedikit mirip dengan Signal. Ini memiliki beberapa implikasi.</p><p>Karena tidak seperti kebanyakan framework-framework JSX, fungsi komponen di Solid hanya untuk di eksekusi satu kali (bukan setiap siklus render), contoh berikut tidak akan bekerja seperti yang kita ekspektasikan.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">default</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#e36209\"> </span><span style=\"color:#6f42c1\">Form</span><span style=\"color:#e36209\">() </span><span style=\"color:#24292e\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">input</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">oninput</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(e.currentTarget.value)} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Di contoh ini, apa yang kita mungkin ingin terjadai adalah agar <code>BasicComponent</code> bisa memunculkan nilai saat ini yang di ketikkan ke <code>input</code>. Namun, sebagai pengingat, fungsi <code>BasicComponent</code> hanya akan tereksekusi satu kali saja ketika componennya pertama kali dibuat. Di saat ini (saat pembuatan), <code>props.value</code> akan sama saja dengan <code>''</code>. Ini berarti <code>const value</code> di <code>BasicComponent</code> akan menjadi <code>'default'</code> dan tidak akan pernah ter-update. Walau mungkin objek <code>props</code> itu reaktif, mengakses props di <code>const value = props.value || 'default';</code> adalah diluar lingkup dari observable Solid, jadi dia tidak akan secara otomatis ter-evaluasi ulang ketika props terganti.</p><p>Terus bagiamana kita memperbaiki masalah ini?</p><p>Yah, secara umum, kita perlu mengakses <code>props</code> ditempat dimana Solid dapat meng-observenya. Biasanya ini berarti didalam JSX atau didalam <code>createMemo</code>, <code>createEffect</code>, atau thunk(<code>() =&gt; ...</code>). Berikut salah satu solusi yang akan bekerja sesuai harapan kita:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ini, secara ekuavilen, dapat di hoist menjadi sebuah fungsi:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Pilihan lain, jika kamu memiliki komputasi yang kompleks atau expensive, adalah dengan menggunakan <code>createMemo</code>. Sebagai contoh:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Atau menggunakan sebuah bantuan</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ value: </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Sebagai peringatan, contoh berikut ini <em>tidak</em> akan bekerja:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// buruk</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">: </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// buruk</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> prop.value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Komponen-komponen dari Solid adalah bagian kunci dari performanya. Pendekatan Solid yaitu, &quot;Menghilangkan&quot; (&quot;Vanishing&quot;) Komponen-komponen, dapat dibuat dengan mengevaluasi secara malas propertinya. Daripada mengevaluasi ekspresi prop secara langsung dan meneruskan nilainya, eksekusi akan di tahan sampai properti di akses didalam turunannya. Dengan begitu kita menghambat eksekusi sampai momen terakhir, biasanya tepat saat binding DOM terjadi, dan memaksimalkan performa. Ini juga meratakan hirearki dan menghilangkan kebutuhan untuk memelihara susunan Komponen-komponen.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Component</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop1</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop2</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.dynamic} /&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// kira-kira terkompilasi ke:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// kita meng-untrack badan komponen untuk mengisolasinya dan menghindari update yang mahal</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Component</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    prop1: </span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6a737d\">// ekspresi dinamis jadi kita membungkusnya di dalam getter</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">prop2</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> state.dynamic;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Untuk membantu memelihara reaktifitas, Solid mempunya beberapa fungsi bantuan untuk prop:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// default props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// clone props</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">newProps</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// merge props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// split props into multiple props objects</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;className&quot;</span><span style=\"color:#24292e\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#005cc5\">className</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">cx</span><span style=\"color:#24292e\">(local.className, theme.komponen)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"turunan-(children)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#turunan-(children)\">#</a> Turunan (Children)</h2><p>Solid menangani JSX Children mirip seperti React. Satu child adalah satu nilai di <code>props.children</code> dan banyak children akan di handel melalui nilai-nilai array. Biasanya, kamu akan mengoper mereka melalui view JSX. Tetapi, jika kamu mau berinteraksi dengan mereka metode yang kami sarankan adalah menggunakan bantuan <code>children</code> dimana akan menyelesaikan setiap downstream control flows dan mengembalikan sebuah memo.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// single child</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">class</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;label&quot;</span><span style=\"color:#24292e\">&gt;Hi, { props.children }&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;&lt;</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;Josie&lt;/</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// multi child</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.children}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;First&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {state.expression}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;Judith&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// map children</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.children}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// modify and map children using helper</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// children helper memoizes value and resolves all intermediate reactivity</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">memo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">children</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    children.</span><span style=\"color:#6f42c1\">forEach</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c.classList.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;list-child&quot;</span><span style=\"color:#24292e\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">()}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p><strong>Important:</strong> Solid memperlakukan child tags sebagai ekspresi yang expensive dan membungkus mereka sama seperti ekspresi-ekspresi reaktif dinamis. Ini berarti mereka ter-evaluasi secara malas ketika <code>props</code> diakses. Hati-hati ketika mengakses mereka berkali-kali atau men-destructure ditempat sebelum kamu menggunakan mereka di tampilannya. Ini karena Solid tidak mempunya kemewahan dari membuat node-node Virtual DOM sebelum waktunya lalu melakukan diffing ke mereka, jadi resolusi dari <code>props</code> ini adalah harus malas dan deliberate. Gunakan fungsi bantuan <code>children</code> jika kamu berharap untuk melakukan ini karenaia akan me-memoize mereka.</p></section><section class=\"mt-10\"><h1 id=\"rendering-di-server\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering-di-server\">#</a> Rendering di Server</h1><p>Solid menghandel rendering di Server dengan mengkompilasi template JSX menjadi kode string yang akan ditambahkan yang sangat effisien. Kita dapat melakukannya dengan menggunakan plugin babel atau dengan memasukkan <code>generate: &quot;ssr&quot;</code> ke presetnya. Untuk mengenerasi kode hydration yang cocok untuk klien dan server kamu bisa memasukkan <code>hydratable: true</code>.</p><p>Runtime <code>solid-js</code> dan <code>solid-js/web</code> ditukar dengan non-reaktif counterparts mereka ketika dijalankan di lingkungan node. Untuk lingkungan-lingkungan yang lain kamu harus membundel kode servernya dengan mengeset kondisional eksport ke <code>node</code>. Kebanyakan bundlers punya cara masing-masing untuk melakukan ini. Secara umum, kami juga menyarankan untuk menggunakan kondisional eksport <code>solid</code> karena kami menyarankan untuk tiap library mengirimkan source mereka dibawah export <code>solid</code>.</p><p>Membangun untuk SSR pastinya akan membutuhkan sedikit lebih banyak konfigurasi karena kita akan mengenerate ke 2 bundle yang terpisah. Untuk entry klien harus menggunakan <code>hydrate</code>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { hydrate } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document);</span></span>\n<span class=\"line\"></span></code></pre><p><em>Catatan: Kamu bisa merender dan meng-hydrate langsung dari root Document-nya. Ini memungkinkan kita untuk menggambarkan view kita secara utuh di JSX</em></p><p>Entry server dapat menggunakan satu dari empat pilihan rendering yang sediakan oleh Solid. Tiap pilihan akan menghasilkan output dan sebuah script tag yang nantinya akan di masukkan ke bagian <code>head</code> dari <code>document</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToString,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToStringAsync,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToNodeStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToWebStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Synchronous string rendering</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Asynchronous string rendering</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Node Stream API</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Web Stream API (Untuk seperti Cloudflare Workers)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, writable);</span></span>\n<span class=\"line\"></span></code></pre><p>Untuk memudahkan kamu, <code>solid-js/web</code> juga mengekspor sebuah fungsi flag <code>isServer</code>. Ini berguna karena kebanyakan bundler dapat melakukan 'treeshake' kepada apapun yang berada di dalam flag ini atau mengimpor hanya digunakan oleh kode di bawah flag ini dari klien bundle kamu.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { isServer } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// kode disini hanya jalan di server saja</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// kode disini hanya jalan di browser saja</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"hydration-script\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hydration-script\">#</a> Hydration Script</h2><p>Untuk bisa meng-hydrate secara progresif bahkan sebelum Solid runtime terload, sebuah script spesial harus di masukkan ke dalam pagenya. Bisa dengan cara digenerate dan dimasukkan melalui <code>generateHydrationScript</code> atau disertakan sebagai bagian dari JSX dengan menggunakan tag <code>&lt;HydrationScript /&gt;</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { generateHydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">app</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;html lang=&quot;en&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;title&gt;🔥 Solid SSR 🔥&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      ${</span><span style=\"color:#6f42c1\">generateHydrationScript</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;/head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;body&gt;${</span><span style=\"color:#24292e\">app</span><span style=\"color:#032f62\">}&lt;/body&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;/html&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { HydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">lang</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;en&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;🔥 Solid SSR 🔥&lt;/</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">charset</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;UTF-8&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;viewport&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">content</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;stylesheet&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;/styles.css&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">HydrationScript</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*... rest of App*/</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ketika meng-hydrate dari document, memasukkan aset-aset (assets) yang tidak tersedia di klien juga dapat mengacaukan beberapa hal. Solid menyediakan komponen <code>&lt;NoHydration&gt;</code> yang dimana turunannya dapat bekerja secara normal di server, tapi tidak akan dihydrate di browser.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {manifest.</span><span style=\"color:#6f42c1\">map</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">m</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;modulepreload&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{m.href} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ))}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"async-dan-streaming-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#async-dan-streaming-ssr\">#</a> Async dan Streaming SSR</h2><p>Mekanisme-mekanisme ini dibuat atas pengetahuan Solid tentang bagaimana aplikasi kamu bekerja. Dengan cara menggunakan Suspense dan Resource API di server, daripada melakukan fetching terlebih dahulu lalu me-rendering. Solid men-fetch bersamaan dengan me-render di server sebagaimana yang dilakukan di klien. Kode kamu dan pola-pola eksekusi akan di tulis dengan cara yang sama persis.</p><p>Rendering asinkron menunggu sampai semua Suspense selesai dan mengirim hasilnya (atau menulisnya ke dalam sebuah file pada kasus seperti &quot;Static Site Generation&quot;).</p><p>Streaming memulai flusing konten synchronous ke browser dengan langsung me-rendering Suspense Fallbacks kamu di server. Lalu saat data asinkron selesai di server dia akan mengirimkan data ke stream yang sama, lalu ke klien untuk menyelesaikan Suspense dimana browser menyelesaikan jobnya dan mengganti fallback dengan konten aslinya.</p><p>Keuntungan dengan cara ini:</p><ul> <li>Server tidak harus mengunggu sampai data asinkron merespon. Aset-aset (Assets) dapat langsung terload lebih cepat di browser, dan user dapat langsung melihat kontennya lebih cepat juga.</li> <li>Dibandingkan dengan &quot;clien fetching&quot; seperti JAMStack, pemuatan data mulai di server secara langsung dan tidak perlu menunggu untuk Javascript klien terload.</li> <li>Semua data telah diserialisasikan dan di pindahkan dari server ke klien secara otomatis.</li> </ul><h2 id=\"kekurangan-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#kekurangan-ssr\">#</a> Kekurangan SSR</h2><p>Solusi &quot;Isomorphic SSR&quot; Solid sangat kuat dimana kamu dapat menulis kode kamu kebanyakan dalam kode basis tunggal (single code base) yang berjalan dengan serupa di kedua lingkungan. Tetapi ada beberapa ekspektasi yang diharapkan dari hydration. Sebagian besar adalah, tampilan yang telah terender di klien akan sama dengan yang terender di server. Tidak perlu sampai dalam hal seperti teksnya, yang penting struktur markupnya harus sama.</p><p>Kami menggunakan marker-marker yang terender di server untuk mencocokkan elemen dan &quot;resource locations&quot; di server. Untuk alasan ini klien dan server harus punya komponen-komponen yang sama. Ini biasanya bukanlah masalah, mengingat Solid merender dengan cara yang sama di klien dan server. Tetapi saat ini belum ada cara untuk merender sesuatu di server yang tidak akan terhydrate di klien. Saat ini, belum ada cara untuk meng-hydrate secara partial seluruh halaman, dan tidak mengenerate marker hydration untuk itu. Bisa dibilang, Hydrate semuanya atau tidak sama sekali. Partial Hydration adalah sesuatu yang kami ingin untuk selidiki lebih dalam di masa yang akan datang.</p><p>Terakhir, semua resources harus di definisikan di dalam <code>render</code> tree. Mereka secara otomatis diserialisasi dan diambil di browser, tapi itu bekerja karena method <code>render</code> dan <code>pipeTo</code> melacak progres dari rendernya. Sesuatu yang tidak bisa kita lakukan jika mereka dibuat di konteks yang terisolasi. Sama halnya dengan tidak ada reaktifitas di server jadi jangan memperbarui signals di render awal dan mengharapkan mereka ter-refleksi di tree yang lebih atas. Meskipun kita memiliki batasan Suspense, SSR Solid pada dasarnya dari atas ke bawah.</p><h2 id=\"memulai-dengan-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#memulai-dengan-ssr\">#</a> Memulai dengan SSR</h2><p>Mengkonfigurasi SSR memang sedikit sulit. Jadi kita mempunyai beberapa contoh di package <a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a>.</p><p>Tetapi, starter baru sedang dalam pembuatan <a href=\"https://github.com/solidjs/solid-start\">SolidStart</a> yang bertujuan untuk membuat semuanya lebih mudah dan lancar dilakukan.</p><h2 id=\"memulai-dengan-static-site-generation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#memulai-dengan-static-site-generation\">#</a> Memulai dengan Static Site Generation</h2><p><a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a> juga mempunyai sebuah utility sederhana untuk mengenerate static atau sites yang telah di render. Baca README-nya untuk informasi yang lebih banya.</p></section>"
}