{
  "sections": [
    {
      "slug": "%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80",
      "title": "响应式基础",
      "level": 1,
      "children": [
        {
          "slug": "createsignal",
          "title": "createSignal",
          "level": 2,
          "children": []
        },
        {
          "slug": "createeffect",
          "title": "createEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "creatememo",
          "title": "createMemo",
          "level": 2,
          "children": []
        },
        {
          "slug": "createresource",
          "title": "createResource",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",
      "title": "生命周期",
      "level": 1,
      "children": [
        {
          "slug": "onmount",
          "title": "onMount",
          "level": 2,
          "children": []
        },
        {
          "slug": "oncleanup",
          "title": "onCleanup",
          "level": 2,
          "children": []
        },
        {
          "slug": "onerror",
          "title": "onError",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0",
      "title": "响应式工具函数",
      "level": 1,
      "children": [
        {
          "slug": "untrack",
          "title": "untrack",
          "level": 2,
          "children": []
        },
        {
          "slug": "batch",
          "title": "batch",
          "level": 2,
          "children": []
        },
        {
          "slug": "on",
          "title": "on",
          "level": 2,
          "children": []
        },
        {
          "slug": "createroot",
          "title": "createRoot",
          "level": 2,
          "children": []
        },
        {
          "slug": "mergeprops",
          "title": "mergeProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "splitprops",
          "title": "splitProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "usetransition",
          "title": "useTransition",
          "level": 2,
          "children": []
        },
        {
          "slug": "observable",
          "title": "observable",
          "level": 2,
          "children": []
        },
        {
          "slug": "maparray",
          "title": "mapArray",
          "level": 2,
          "children": []
        },
        {
          "slug": "indexarray",
          "title": "indexArray",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8",
      "title": "状态存储",
      "level": 1,
      "children": [
        {
          "slug": "createstore",
          "title": "createStore",
          "level": 2,
          "children": [
            {
              "slug": "getters",
              "title": "Getters",
              "level": 3,
              "children": []
            },
            {
              "slug": "%E6%9B%B4%E6%96%B0-store",
              "title": "更新 Store",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "produce",
          "title": "produce",
          "level": 2,
          "children": []
        },
        {
          "slug": "reconcile",
          "title": "reconcile",
          "level": 2,
          "children": []
        },
        {
          "slug": "createmutable",
          "title": "createMutable",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E7%BB%84%E4%BB%B6-api",
      "title": "组件 API",
      "level": 1,
      "children": [
        {
          "slug": "createcontext",
          "title": "createContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "usecontext",
          "title": "useContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "children",
          "title": "children",
          "level": 2,
          "children": []
        },
        {
          "slug": "lazy",
          "title": "lazy",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E7%AC%AC%E4%BA%8C-primitive",
      "title": "第二 Primitive",
      "level": 1,
      "children": [
        {
          "slug": "createdeferred",
          "title": "createDeferred",
          "level": 2,
          "children": []
        },
        {
          "slug": "createcomputed",
          "title": "createComputed",
          "level": 2,
          "children": []
        },
        {
          "slug": "createrendereffect",
          "title": "createRenderEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "createselector",
          "title": "createSelector",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E6%B8%B2%E6%9F%93",
      "title": "渲染",
      "level": 1,
      "children": [
        {
          "slug": "render",
          "title": "render",
          "level": 2,
          "children": []
        },
        {
          "slug": "hydrate",
          "title": "hydrate",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostring",
          "title": "renderToString",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostringasync",
          "title": "renderToStringAsync",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetonodewritable",
          "title": "pipeToNodeWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetowritable",
          "title": "pipeToWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "isserver",
          "title": "isServer",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E6%8E%A7%E5%88%B6%E6%B5%81",
      "title": "控制流",
      "level": 1,
      "children": [
        {
          "slug": "%3Cfor%3E",
          "title": "<For>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cshow%3E",
          "title": "<Show>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cswitch%3E%2F%3Cmatch%3E",
          "title": "<Switch>/<Match>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cindex%3E",
          "title": "<Index>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cerrorboundary%3E",
          "title": "<ErrorBoundary>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspense%3E",
          "title": "<Suspense>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspenselist%3E-(%E5%AE%9E%E9%AA%8C)",
          "title": "<SuspenseList> (实验)",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cdynamic%3E",
          "title": "<Dynamic>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cportal%3E",
          "title": "<Portal>",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E7%89%B9%E6%AE%8A%E7%9A%84-jsx-%E5%B1%9E%E6%80%A7",
      "title": "特殊的 JSX 属性",
      "level": 1,
      "children": [
        {
          "slug": "ref",
          "title": "ref",
          "level": 2,
          "children": []
        },
        {
          "slug": "classlist",
          "title": "classList",
          "level": 2,
          "children": []
        },
        {
          "slug": "style",
          "title": "style",
          "level": 2,
          "children": []
        },
        {
          "slug": "innerhtml%2Ftextcontent",
          "title": "innerHTML/textContent",
          "level": 2,
          "children": []
        },
        {
          "slug": "on___",
          "title": "on___",
          "level": 2,
          "children": []
        },
        {
          "slug": "on%3A___%2Foncapture%3A___",
          "title": "on:___/oncapture:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "use%3A___",
          "title": "use:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "prop%3A___",
          "title": "prop:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "attr%3A___",
          "title": "attr:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "%2F*-%40once-*%2F",
          "title": "/* @once */",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83",
      "title": "与其他库进行比较",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A",
              "title": "迁移建议：",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-1",
              "title": "迁移建议：",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-2",
              "title": "迁移建议：",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-3",
              "title": "迁移建议：",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%26-lighterhtml",
          "title": "Lit & LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-4",
              "title": "迁移建议：",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "%E5%85%B6%E4%BB%96",
          "title": "其他",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98",
      "title": "常见问题",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80\">#</a> 响应式基础</h1><h2 id=\"createsignal\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createsignal\">#</a> <code>createSignal</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>这是最基本的反应式原语 (primitive)，用于跟踪随时间变化的单个值。 create 函数返回一对 get 和 set 函数来访问和更新信号 (signal)。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 读取值</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 设置值</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(nextValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 使用 setter 函数设置值</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> prev </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> next);</span></span>\n<span class=\"line\"></span></code></pre><p>如果您希望值对更新做出响应，请记住在跟踪范围内访问信号。跟踪范围是传递给计算的函数，如 <code>createEffect</code> 或 JSX 表达式。</p><blockquote> <p>如果你希望在 Signal 中存储函数，则必须使用函数的形式：</p> <pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> myFunction);</span></span>\n<span class=\"line\"></span></code></pre> </blockquote><h2 id=\"createeffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createeffect\">#</a> <code>createEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> })</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>创建一个新的计算来自动跟踪依赖项并在依赖项发生变化的每次渲染之后运行。非常适合使用 <code>ref</code>s 和管理其他副作用。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">a</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setA</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 依赖于 signal `a` 的 effect</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">doSideEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>effect 函数可以拿到上次执行返回的值。可以在第二个可选参数设置该值得初始化值。这可以让我们不用创建额外闭包的情况下就可以进行差异对比。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (sum </span><span style=\"color:#d73a49\">!==</span><span style=\"color:#24292e\"> prev) console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(sum);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> sum;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"creatememo\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#creatememo\">#</a> <code>createMemo</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>创建一个只读派生的 signal，每当执行代码的依赖项被更新时，该 signal 就会重新计算其值。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">computeExpensiveValue</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">(), </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 读取</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p>使用 memo 函数上次执行返回的值调用 memo 函数。该值可以初始化为可选的第二个参数。这对于减少计算很有用。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">input</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> prev, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createresource\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createresource\">#</a> <code>createResource</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">loading</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">error</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>创建一个可以管理异步请求的 signal。<code>fetcher</code> 是一个异步函数，它接收 <code>source</code> 的返回值（如果提供）并返回一个 Promise，其解析值设置在 resource 中。fetcher 不是响应式的，因此如果希望它运行多次，请传入第一个可选参数。如果源解析为 false、null 或 undefined，则不会执行获取操作。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">data</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">mutate</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">refetch</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">(getQuery, fetchData);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 读取值</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">data</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 检查是否加载中</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.loading;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 检查是否加载错误</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.error;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 无需创建 promise 直接设置值</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#24292e\">(optimisticValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 重新执行最后的请求</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p><code>loading</code> 和 <code>error</code> 是响应式 getter，可以被跟踪。</p><h1 id=\"%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">#</a> 生命周期</h1><h2 id=\"onmount\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onmount\">#</a> <code>onMount</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>注册一个在初始话化渲染和元素挂载完成后运行的方法。非常适合使用 <code>ref</code> 或者管理其他的一次性副作用。它相当于一个没有任何依赖的 <code>createEffect</code>。</p><h2 id=\"oncleanup\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#oncleanup\">#</a> <code>onCleanup</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>注册一个清理方法，它会在当前响应范围内执行销毁或重新计算时候被触发。可用于任何组件或 Effect。</p><h2 id=\"onerror\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onerror\">#</a> <code>onError</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onError</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>注册一个错误处理函数，它会在子作用域抛出错误时执行。但是最近的范围的错误处理函数才会执行。重新抛出可以向上触发。</p><h1 id=\"%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0\">#</a> 响应式工具函数</h1><p>有了这些工具函数，我们可以更好地调度更新以及控制响应式跟踪行为。</p><h2 id=\"untrack\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#untrack\">#</a> <code>untrack</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>忽略跟踪执行代码块中的任何依赖项并返回值。</p><h2 id=\"batch\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#batch\">#</a> <code>batch</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">batch</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>暂持块作用域内提交的更新直到块作用域结束以避免不必要的重新计算。这意味着下一行的读取到的值还没有被更新。Solid Store 的 set 方法和 Effect 会自动将它们的代码打包成一个批次来进行更新。</p><h2 id=\"on\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on\">#</a> <code>on</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">), </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">deps</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevInput</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">defer</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>on</code> 主要用来将其传递到计算行为中以使其依赖项更加清晰明了。如果传递依赖项是数组，则 <code>input</code> 和 <code>prevInput</code> 也是数组。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, </span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">())));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 等同于</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">v</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>你也可以不用立即执行计算，而是通过将 defer 选项设置为 true 来选择仅在更改时运行计算。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 不会立即运行</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, </span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v), { defer: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setA</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;new&quot;</span><span style=\"color:#24292e\">); </span><span style=\"color:#6a737d\">// 现在会运行了</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createroot\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createroot\">#</a> <code>createRoot</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRoot</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">dispose</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>创建一个崭新的，不自动处理的，非跟踪上下文。在嵌套响应式上下文的情况下，如果你不希望在父级重新求值时释放资源这个特性会很有用。这是一种强大的缓存模式。</p><p>所有 Solid 代码都应被 createRoot 包裹，因为它们确保释放所有内存/计算。通常你不需要担心这个，因为 <code>createRoot</code> 被嵌入到所有的 <code>render</code> 入口函数中。</p><h2 id=\"mergeprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mergeprops\">#</a> <code>mergeProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">sources</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>响应式对象的合并 <code>merge</code> 方法。用于为组件设置默认 props 以防调用者不提供这些属性值。或者克隆包含响应式的属性的 props 对象。</p><p>此方法的运作原理是使用代理并以相反的顺序解析属性。这可以对首次合并 props 对象时不存在的属性进行动态跟踪。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 设置默认 props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 克隆 props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">newProps </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 合并 props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"splitprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#splitprops\">#</a> <code>splitProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">keys</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;(</span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)[]&gt;)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">parts</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Partial</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p><code>splitProps</code> 是解构的替代品。<code>splitProps</code> 在保持响应性的同时通过键来拆分响应式对象。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;children&quot;</span><span style=\"color:#24292e\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">Child {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#e36209\">div</span><span style=\"color:#24292e\">&gt;{local.children}</span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;/&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"usetransition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usetransition\">#</a> <code>useTransition</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">, (</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">cb</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>用于在所有异步处理完成后在延迟提交事务中批量异步更新。这与 Suspense 有所关联，并且仅跟踪在 Suspense 边界下读取的资源。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">isPending</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">start</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 检查是否在 transition 中</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">isPending</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 包裹在 transition 中</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">start</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setSignal</span><span style=\"color:#24292e\">(newValue), () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/* transition 完成 */</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"observable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#observable\">#</a> <code>observable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>这个方法接受一个 signal 并产生一个简单的 Observable。从你选择的 Observable 库中使用它，通常使用 <code>from</code> 操作符。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { from } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;rxjs&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">s</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">set</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">obsv$</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">from</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">(s));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">obsv$.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"maparray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#maparray\">#</a> <code>mapArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>响应式映射工具函数，通过引用缓存每个子项，以减少不必要的映射更新。它只为每个值运行一次映射函数，然后根据需要移动或删除它。index 参数是一个 signal。映射函数本身没有被跟踪。</p><p><code>mapArray</code> 也是<code>&lt;For&gt;</code> 组件控制流程的底层工具函数</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.name);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">description</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setDescription</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.description);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    id: model.id,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setName,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setDescription</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"indexarray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#indexarray\">#</a> <code>indexArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>类似于 <code>mapArray</code>，除了它按索引映射。每个子项都是 signal，索引是常量。</p><p><code>indexArray</code> 也是 <code>&lt;Index&gt;</code> 组件控制流程的底层工具函数</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">id</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().id</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">firstInitial</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().firstName[</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8\">#</a> 状态存储</h1><p>以下 API 可以从<code>solid-js/store</code> 导入。</p><h2 id=\"createstore\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstore\">#</a> <code>createStore</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">SetStoreFunction</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p><code>createStore</code> 创建一个 Signal 树作为代理，允许独立跟踪嵌套数据结构中的各个值。create 函数返回一个只读代理对象和一个 setter 函数。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 读取值</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 设置值</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ merge: </span><span style=\"color:#032f62\">&quot;thisValue&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;path&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;to&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;value&quot;</span><span style=\"color:#24292e\">, newValue);</span></span>\n<span class=\"line\"></span></code></pre><p>Store 代理对象仅跟踪访问的属性。并在访问 Store 时递归地生成嵌套数据上的嵌套 Store 对象。但是它只包装数组和普通对象。类不包装。所以像 <code>Date</code>、<code>HTMLElement</code>、<code>RegExp</code>、<code>Map</code>、<code>Set</code> 之类的东西都不是响应式粒度的。此外，如果不访问对象上的属性，则无法跟踪顶级状态对象。因此它不适用于迭代对象，因为添加新键或索引无法触发更新。因此，将数组放在键上，而不是尝试使用状态对象本身。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 将列表作为状态对象的键</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ list: [] });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 访问 state 对象上的 `list` 属性</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/*...*/</span><span style=\"color:#24292e\">}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"getters\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#getters\">#</a> Getters</h3><p>Store 对象支持使用 getter 来存储计算值。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>以下是简单的 getter，所以如果你想缓存一个值，你仍然需要使用 Memo；</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> fullName;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">fullName </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"%E6%9B%B4%E6%96%B0-store\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9B%B4%E6%96%B0-store\">#</a> 更新 Store</h3><p>更改状态可以采用传递先前状态并返回新状态或值的函数的形式。对象总是浅合并的。将值设置为 <code>undefined</code> 以将属性从 Store 中删除。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">, lastName: </span><span style=\"color:#032f62\">&quot;Miller&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ firstName: </span><span style=\"color:#032f62\">&quot;Johnny&quot;</span><span style=\"color:#24292e\">, middleName: </span><span style=\"color:#032f62\">&quot;Lee&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Miller&#39; })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">state</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ preferredName: state.firstName, lastName: </span><span style=\"color:#032f62\">&quot;Milner&quot;</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, preferredName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Milner&#39; })</span></span>\n<span class=\"line\"></span></code></pre><p>setState 支持的路径包括键数组、对象范围和过滤器函数。</p><p>setState 还支持嵌套设置，你可以在其中指明要修改的路径。在嵌套的情况下，要更新的状态可能是非对象值。对象仍然合并，但其他值（包括数组）将会被替换。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  counter: </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  list: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">23</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Birds&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">27</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Fish&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;counter&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">l</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">l, {id: </span><span style=\"color:#005cc5\">43</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Marsupials&#39;</span><span style=\"color:#24292e\">}]);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&#39;read&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   counter: 3,</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 27, title: &#39;Fish&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 43, title: &#39;Marsupials&#39;, read: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><p>路径可以是字符串键、键数组、迭代对象（{from、to、by}）或过滤器函数。这为描述状态变化提供了令人难以置信的表达能力。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  todos: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Finish work&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Go grocery shopping&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Make dinner&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, [</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">], </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, { from: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, to: </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\"> }, </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">c);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> todo.completed, </span><span style=\"color:#032f62\">&#39;task&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">t</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> t </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;!&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, {}, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ marked: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">todo.completed }))</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"produce\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#produce\">#</a> <code>produce</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Immer 启发了 Solid 的 Store 对象的 <code>produce</code> API，它允许本地修改状态。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">s</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.user.name </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;Frank&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Pencil Crayon&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"reconcile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reconcile\">#</a> <code>reconcile</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">key</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">merge</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> { key: </span><span style=\"color:#032f62\">&quot;id&quot;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>当对比数据变更时，我们不能应用粒度更新。<code>reconcile</code> 在处理来自 store 或巨大 API 响应这些不可变数据时很有用。</p><p>该键在可用于匹配项目时使用。默认情况下，<code>merge</code> 为 <code>false</code> 会在可能的情况下进行引用检查以确定相等，并替换不引用相等的数据。<code>merge</code> 为 <code>true</code> 时，<code>reconcile</code> 会将所有差异推送到叶子节点，并高效地将先前的数据修改为新值。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 订阅一个 observable</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">unsubscribe</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> store.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">(({ </span><span style=\"color:#e36209\">todos</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">(todos)));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">unsubscribe</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createmutable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createmutable\">#</a> <code>createMutable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"></span></code></pre><p><code>createMutable</code> 创建一个新的可变 Store 代理对象。Store 仅在值更改时触发更新。跟踪是通过拦截属性访问来完成的，并通过代理自动跟踪深度嵌套数据。</p><p><code>createMutable</code> 用于集成外部系统或作为与 MobX/Vue 的兼容层会很有用。</p><blockquote> <p><strong>注意：</strong> 由于可变状态可以在任何地方传递和修改，这会使其更难以遵循并且更容易打破单向流，因此通常建议使用 <code>createStore</code> 代替。<code>produce</code> 修饰符可以提供许多相同的好处而没有任何缺点。</p> </blockquote><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 读取值</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 设置值</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">5</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(anotherValue);</span></span>\n<span class=\"line\"></span></code></pre><p>Mutables 支持同时设置 setter 和 getter。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">set</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    [</span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.firstName, </span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.lastName] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> value.</span><span style=\"color:#6f42c1\">split</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot; &quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E7%BB%84%E4%BB%B6-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BB%84%E4%BB%B6-api\">#</a> 组件 API</h1><h2 id=\"createcontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcontext\">#</a> <code>createContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">id</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">symbol</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Provider</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>在 Solid 中，Context 提供了一种依赖注入的形式。它可以用来避免需要通过中间组件将数据作为 props 传递的情况。</p><p>该函数创建了一个新的上下文对象，可以通过 <code>useContext</code> 来使用，并提供 <code>Provider</code> 控制流。当在层次结构的上方找不到 <code>Provider</code> 时，将使用默认上下文。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">CounterContext</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">([{ count: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> }, {}]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">CounterProvider</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ count: props.count </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">store</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    state,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">increment</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">decrement</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">-</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">CounterContext</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Provider</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">={</span><span style=\"color:#e36209\">store</span><span style=\"color:#24292e\">}&gt;{props.children}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">CounterContext.Provider</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>传递给 provider 的值按原样传递给 <code>useContext</code>。这意味着包装为响应性的表达式将不起作用。你应该直接传入 Signal 和 Store，而不是在 JSX 中访问它们。</p><h2 id=\"usecontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usecontext\">#</a> <code>useContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">context</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>用于获取上下文以允许深层传递 props，而不必通过每个组件函数传递它们。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">increment</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">decrement</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">(CounterContext);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"children\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#children\">#</a> <code>children</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Used to make it easier to interact with <code>props.children</code>. This helper resolves any nested reactivity and returns a memo. Recommended approach to using <code>props.children</code> in anything other than passing directly through to JSX.</p><p>用于更容易地与<code>props.children</code>交互。这个工具函数解决层级嵌套的响应性并返回一个 Memo。除了直接传递值给 JSX 这种情况之外，推荐使用 <code>props.children</code> 的方法。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">list</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 用 list 做点什么 </span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"lazy\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lazy\">#</a> <code>lazy</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt;&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;{ </span><span style=\"color:#e36209\">default</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> }&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">preload</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; };</span></span>\n<span class=\"line\"></span></code></pre><p>用于延迟加载组件以允许代码拆分。组件在渲染之前不会加载。延迟加载的组件可以与静态导入的组件同样使用，接收 props 等...... 延迟加载的组件还会触发 <code>&lt;Suspense&gt;</code>。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 保证导入</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ComponentA</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;./ComponentA&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 在 JSX 中使用</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">ComponentA title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.title} </span><span style=\"color:#d73a49\">/&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E7%AC%AC%E4%BA%8C-primitive\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%AC%AC%E4%BA%8C-primitive\">#</a> 第二 Primitive</h1><p>你的第一个 app 可能不需要它们，但这些有用的工具也不可或缺。</p><h2 id=\"createdeferred\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createdeferred\">#</a> <code>createDeferred</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createDeferred</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>创建只读值，仅在浏览器空闲时通知下游变更。<code>timeoutMs</code> 是强制更新前等待的最长时间。</p><h2 id=\"createcomputed\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcomputed\">#</a> <code>createComputed</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createComputed</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> })</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>创建一个新的计算，自动跟踪依赖关系并在渲染之前立即运行。使用它来编写其他响应式 primitive。如果可能，请使用 <code>createMemo</code> 代替，因为写入中间更新的 signal 可能会导致其他计算需要重新计算。</p><h2 id=\"createrendereffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createrendereffect\">#</a> <code>createRenderEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>创建一个新的计算，自动跟踪依赖项并在渲染阶段运行，因为 DOM 元素被创建和更新但不一定连接。所有内部 DOM 更新都在此时发生。</p><h2 id=\"createselector\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createselector\">#</a> <code>createSelector</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">a</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">b</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>创建一个条件 signal，仅在进入或退出时键与值匹配时通知订阅者。处理委托选择状态很有用。因为它使得操作复杂度是 O(2) 而不是 O(n)。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isSelected</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">(selectedId);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">()}</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">classList</span><span style=\"color:#24292e\">={{ </span><span style=\"color:#e36209\">active</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">isSelected</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">id</span><span style=\"color:#24292e\">) }}&gt;{item.name}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">li</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E6%B8%B2%E6%9F%93\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%B8%B2%E6%9F%93\">#</a> 渲染</h1><p>These imports are exposed from <code>solid-js/web</code>.</p><p>以下导入是从 <code>solid-js/web</code> 暴露的。</p><h2 id=\"render\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#render\">#</a> <code>render</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">code</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>render</code> 是浏览器应用程序入口点。它需要提供顶级组件定义或函数以及需要挂载的元素。建议该元素为空，因为返回的 dispose 函数将清理所有子元素。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"hydrate\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hydrate\">#</a> <code>hydrate</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">node</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>此方法类似于 <code>render</code>，只是它会尝试重新注水到已经渲染到 DOM 的内容。在浏览器中初始化时，页面已被服务器渲染。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostring\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostring\">#</a> <code>renderToString</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>同步渲染为字符串。该函数还为渐进式注水生成脚本标签。选项包括在页面加载之前侦听并在注水时回放的 eventNames，以及放在脚本标签上的 nonce。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostringasync\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostringasync\">#</a> <code>renderToStringAsync</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>与 <code>renderToString</code> 相同，除了它在返回结果之前会等待所有 <code>&lt;Suspense&gt;</code> 边界解析。资源数据会自动序列化到脚本标签中，并会在客户端加载时注水。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"pipetonodewritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetonodewritable\">#</a> <code>pipeToNodeWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">startWriting</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>此方法渲染出 Node 流。它同步渲染内容，包括任何 Suspense 回退占位符，然后在完成时继续从任何异步资源流式传输数据。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span></code></pre><p><code>onReady</code> 选项用来写入核心应用程序渲染的流很有用。请记住，如果你想要使用 <code>onReady</code> 手动调用 <code>startWriting</code> 的话。</p><h2 id=\"pipetowritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetowritable\">#</a> <code>pipeToWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">script</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">WritableStream</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> }, </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> }, </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>此方法渲染到 Web 流。它同步渲染内容，包括任何 Suspense 回退占位符，然后在完成时继续从任何异步资源流式传输数据。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(App, writable);</span></span>\n<span class=\"line\"></span></code></pre><p><code>onReady</code> 选项对于写入围绕核心应用程序渲染的流很有用。请记住，如果你需要使用 <code>onReady</code> 手动调用 <code>startWriting</code></p><h2 id=\"isserver\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#isserver\">#</a> <code>isServer</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isServer</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>这指明了代码是在服务器运行还是在浏览器运行。由于底层运行时将其导出为常量布尔值，所以它允许构建工具从相应的包中消除代码及其使用的导入代码。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// 永远不会进入浏览器打包代码</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// 不会在服务器上运行；</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E6%8E%A7%E5%88%B6%E6%B5%81\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8E%A7%E5%88%B6%E6%B5%81\">#</a> 控制流</h1><p>Solid 使用组件来控制流。原因是为了提高响应式性能，我们必须控制元素的创建方式。例如，对于列表而言，简单的 <code>map</code> 效率低下，因为它总是映射所有内容。这意味着需要一个辅助函数。</p><p>将这些包装在组件中既能很方便地简化模板，也允许用户组合和构建自己的控制流。</p><p>这些内置的控制流将被自动导入。除了 <code>Portal</code> 和 <code>Dynamic</code> 之外的所有内容都是从 <code>solid-js</code> 导出的。这两个 DOM 特定的组件由 <code>solid-js/web</code> 导出。</p><blockquote> <p>注意：控制流的所有回调/渲染函数子项都是非跟踪性的。这允许创建嵌套状态，并更好地隔离响应。</p> </blockquote><h2 id=\"%3Cfor%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cfor%3E\">#</a> <code>&lt;For&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">For</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>简单的引用键控循环控制流程。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>第二个可选参数是索引 signal：</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{</span><span style=\"color:#6f42c1\">index</span><span style=\"color:#24292e\">()} {item}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cshow%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cshow%3E\">#</a> <code>&lt;Show&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Show</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Show 控制流用于有条件地渲染视图的一部分。它跟三元运算符（<code>a ? b : c</code>）类似，但非常适合模板 JSX。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.count </span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Show 还可以用来将区块控到特定数据模型。每当用户数据模型被替换时，该函数就会重新执行。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.user} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span><span style=\"color:#e36209\">user</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{user.firstName}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cswitch%3E%2F%3Cmatch%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cswitch%3E%2F%3Cmatch%3E\">#</a> <code>&lt;Switch&gt;</code>/<code>&lt;Match&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Switch</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> })</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Match</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;);</span></span>\n<span class=\"line\"></span></code></pre><p>当有 2 个以上的互斥条件时会很有用。可以用来做一些简单的路由之类的事情。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Not Found&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;home&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Home</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;settings&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Settings</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Match 还支持函数子项作为键映射流程。</p><h2 id=\"%3Cindex%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cindex%3E\">#</a> <code>&lt;Index&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Index</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p><code>&lt;Index&gt;</code> 在无 key 列表迭代时（或者说 index 作为 key）时很有用，比如数据是 primitive 并且是固定的索引而不是值。</p><p>该项是一个 signal：</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>第二个可选参数是索引号：</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{index} {</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cerrorboundary%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cerrorboundary%3E\">#</a> <code>&lt;ErrorBoundary&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">ErrorBoundary</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reset</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>捕获未捕获的错误并渲染回退内容。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Something went terribly wrong&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>还支持回调函数的形式传参，函数传入了错误和重置函数。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">err</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">reset</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{reset}&gt;Error: {err}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspense%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspense%3E\">#</a> <code>&lt;Suspense&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Suspense</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> })</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>&lt;Suspense&gt;</code> 是一个跟踪其下所有读取资源并显示回退占位符状态的组件，直到它们被解析。<code>Suspense</code> 与 <code>Show</code> 的不同之处在于它是非阻塞的，即使当前不在 DOM 中，两个分支也可以同时存在。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">AsyncComponent</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspenselist%3E-(%E5%AE%9E%E9%AA%8C)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspenselist%3E-(%E5%AE%9E%E9%AA%8C)\">#</a> <code>&lt;SuspenseList&gt;</code> (实验)</h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">SuspenseList</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">revealOrder</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;backwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;together&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">tail</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;hidden&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>SuspenseList</code> 可以协调多个并行的 <code>Suspense</code> 和 <code>SuspenseList</code> 组件。它控制显示内容的顺序以减少布局抖动，并且可以通过选项控制折叠或隐藏回退状态。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">revealOrder</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">tail</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">ProfileDetails</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.user} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading posts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTimeline</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">posts</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.posts} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading fun facts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTrivia</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">trivia</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.trivia} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>SuspenseList 仍处于试验阶段，并没有完整的 SSR 支持。</p><h2 id=\"%3Cdynamic%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cdynamic%3E\">#</a> <code>&lt;Dynamic&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Dynamic</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">component</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">IntrinsicElements</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>该组件允许你插入任意组件或标签并将 props 传递给它。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Dynamic</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">component</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.component} </span><span style=\"color:#005cc5\">someProp</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.something} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cportal%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cportal%3E\">#</a> <code>&lt;Portal&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Portal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">mount</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Node</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">useShadow</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">isSVG</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Text</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>&lt;Portal&gt;</code> 会在挂载节点中插入元素。用于在页面布局之外插入模态框。事件仍然通过组件层次结构传播。</p><p>除非目标是 document head，否则 portal 挂载在<code>&lt;div&gt;</code> 中。<code>useShadow</code> 将元素放在 Shadow Root 中以进行样式隔离，如果插入到 SVG 元素中，则需要 <code>isSVG</code> 避免不插入 <code>&lt;div&gt;</code>。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mount</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;modal&quot;</span><span style=\"color:#24292e\">)}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"%E7%89%B9%E6%AE%8A%E7%9A%84-jsx-%E5%B1%9E%E6%80%A7\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%89%B9%E6%AE%8A%E7%9A%84-jsx-%E5%B1%9E%E6%80%A7\">#</a> 特殊的 JSX 属性</h1><p>一般来说，Solid 试图和 DOM 习惯保持一致。大多数 props 被视为原生元素的属性和 Web Components 的属性，但其中一些具有特殊的行为。</p><p>使用 TypeScript 自定义命名空间属性时，你需要扩展 Solid 的 JSX 命名空间：</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// use:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitProperties</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// prop:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitAttributes</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// attr:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// on:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomCaptureEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// oncapture:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"ref\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ref\">#</a> <code>ref</code></h2><p>Refs 是一种访问 JSX 中底层 DOM 元素的方式。虽然确实可以将一个元素分配给一个变量，但将组件留在 JSX 流中更为理想。Refs 在渲染时（在元素连接到 DOM 之前）分配。它有 2 种写法。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 简单赋值</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 连接到 DOM 后使用 onMount 或 createEffect 进行读取</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv));</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 或者，使用回调函数（在元素连接到 DOM 之前调用）</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(el)} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Refs 也可以用于组件。它们仍然需要连接到另一侧。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComp</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.ref} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv.clientWidth));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"classlist\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#classlist\">#</a> <code>classList</code></h2><p><code>classList</code> 借助于 <code>element.classList.toggle</code>。它接受一个键为 class 名的对象，并在解析值为 true 时分配它们。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">classList</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ active: state.active, editing: state.currentId </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> row.id }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"style\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#style\">#</a> <code>style</code></h2><p>Solid 的样式工具可以处理字符串或对象。与 React 的版本不同，Solid 在底层使用了 <code>element.style.setProperty</code>。这意味着支持 CSS 变量，但也意味着我们使用较底层的、破折号版本的属性。这实际上会带来更好的性能并能 SSR 输出保持一致。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 字符串</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#032f62\">`color: green; background-color: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">color</span><span style=\"color:#032f62\">}; height: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">height</span><span style=\"color:#032f62\">}px`</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// 变量</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  color: </span><span style=\"color:#032f62\">&quot;green&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#032f62\">&quot;background-color&quot;</span><span style=\"color:#24292e\">: state.color,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  height: state.height </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\"> }}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// css 变量</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ </span><span style=\"color:#032f62\">&quot;--my-custom-color&quot;</span><span style=\"color:#24292e\">: state.themeColor }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"innerhtml%2Ftextcontent\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#innerhtml%2Ftextcontent\">#</a> <code>innerHTML</code>/<code>textContent</code></h2><p>它们的工作原理与它们的等效属性相同。设置一个字符串，它们将被设置到 HTML 中。<strong>小心!!</strong> 任何数据设置为 <code>innerHTML</code> 都可能暴露给终端用户，因此它可能成为恶意攻击的载体。<code>textContent</code> 虽然通常不需要，但实际上是一种性能优化，因为它绕过了通用对比差异例程，因此子项将只是文本。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">textContent</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.text} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on___\">#</a> <code>on___</code></h2><p>Solid 中的事件处理程序通常采用 <code>onclick</code> 或 <code>onClick</code> 形式，具体取决于风格。事件名称总是小写。Solid 对组合和冒泡的常见 UI 事件使用半合成事件委托。这样提高了这些常见事件的性能。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(e.currentTarget)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Solid 还支持将数组传递给事件处理句柄以将值绑定到事件处理句柄的第一个参数。这不用使用<code>bind</code> 或创建额外的闭包，因此它是一种高度优化的事件委托方式。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">handler</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">itemId</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">/*...*/</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[handler, item.id]} /&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>事件不能被重新绑定并且绑定不是响应式。原因是添加/移除侦听器通常更消耗性能。由于事件自然地会被调用，因此不需要响应性，如果需要，只需跟下面一样简单处理你的事件句柄。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// 如果定义了就会调用，否则不会。</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.</span><span style=\"color:#6f42c1\">handleClick</span><span style=\"color:#24292e\">?.()} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on%3A___%2Foncapture%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on%3A___%2Foncapture%3A___\">#</a> <code>on:___</code>/<code>oncapture:___</code></h2><p>对其他的事件，可能是名称不寻常或者你不希望被委托，且有 <code>on</code> 命名空间。那你只需要逐字添加事件侦听器。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">on</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">Weird-Event</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">alert</span><span style=\"color:#24292e\">(e.detail)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"use%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#use%3A___\">#</a> <code>use:___</code></h2><p><code>use:___</code> 是自定义指令。从某种意义上说，这只是 ref 上的语法糖，但允许我们轻松地将多个指令附加到单个元素。指令只是一个具有以下签名的函数：</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">directive</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">accessor</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>这些函数在渲染时运行，你可以在其中执行任何操作。创建 signal 和 effects，注册清理函数，随心所欲。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">field</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setField</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (el.value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">field</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  el.</span><span style=\"color:#6f42c1\">addEventListener</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;input&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setField</span><span style=\"color:#24292e\">(e.target.value));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">input type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">use</span><span style=\"color:#24292e\">:model</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[name, setName]} /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>注册 TypeScript 扩展 JSX 命名空间。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">model</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"prop%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#prop%3A___\">#</a> <code>prop:___</code></h2><p>强制将 prop 视为 property 而不是 attribute。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">scrollTop</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.scrollPos </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"attr%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attr%3A___\">#</a> <code>attr:___</code></h2><p>强制将 prop 视为 attribute 而不是 property。对于要设置 attribute 的 Web 组件很有用。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">status</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.status} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%2F*-%40once-*%2F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%2F*-%40once-*%2F\">#</a> <code>/* @once */</code></h2><p>Solid 的编译器使用简单的启发式方法对 JSX 表达式进行响应式包装和惰性求值。判断它是否包含函数调用、属性访问或 JSX？ 如果是，我们在传递给组件时将其包装在 getter 中，或者如果传递给原生元素，则将其包装在 effect 中。</p><p>知道了这一点，我们可以通过在 JSX 之外访问它们来减少我们知道永远不会改变的东西的开销。一个简单的变量永远不会被包装。我们还可以通过以注释修饰符 <code>/_ @once _/</code> 开头的表达式来告诉编译器不要包装它们。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">static</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>对 children 同样有效。</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate}&lt;/</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre></section><section class=\"mt-10\"><h1 id=\"%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%8E%E5%85%B6%E4%BB%96%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83\">#</a> 与其他库进行比较</h1><p>本节无法避免一些偏见，但我认为了解 Solid 的解决方案与其他库的差异很重要。这与性能无关。要对性能有明确的了解，请查看 <a href=\"https://github.com/krausest/js-framework-benchmark\">JS 框架基准测试</a>。</p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React 对 Solid 产生了很大的影响。React Hooks API 中的单向数据流和明确的读写分离影响了 Solid 的 API。Solid 更加像是一个 “渲染库” 而不是一个框架。Solid 对如何在应用程序开发中管理数据有着独到的看法，但并不试图约束执行。</p><p>然而，尽管 Solid 与 React 的设计理念保持一致，但它的底层运作方式完全不同。React 使用 Virtual DOM 而 Solid 没有。React 的抽象是自上而下的组件分区，其中渲染方法被重复调用和差异对比。相反，Solid 将每个模板整体渲染一次，构建其响应图，然后才执行与细粒度更改相关的指令。</p><h4 id=\"%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A\">#</a> 迁移建议：</h4><p>Solid 的更新模型完全不像 React，甚至不像 React + MobX。不要将函数组件视为 <code>render</code> 函数，而是将它们视为 <code>constructor</code>。注意解构或提前属性访问会丢失响应性。Solid 的 primitive 没有像 Hook 规则这样的限制，因此你可以根据需要自由嵌套它们。你不需要使用列表行上的显式 key 来实现具有 key 的行为。最后，没有 VDOM，所以像 <code>React.Children</code> 和 <code>React.cloneElement</code> 这样的命令式 VDOM API 毫无意义。我鼓励寻找不同的方法来解决以声明方式使用这些方法的问题。</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Solid 在设计方面并没有特别受到 Vue 的影响，但它们在方法上来讲是可以进行比较的。他们都在响应式系统中使用 Proxy，并能基于读取的自动跟踪。但这就是所有的相似之处。Vue 的细粒度依赖检测只是提供给一个细粒度的虚拟 DOM 和组件系统，而 Solid 将其粒度保持在它的直接 DOM 更新上。</p><p>Vue 重视简单，而 Solid 重视透明度。尽管 Vue 与 Vue 3 的新方向更符合 Solid 所采用的方法。这些库可能会随着时间的推移更加一致，这取决于它们如何继续发展。</p><h4 id=\"%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-1\">#</a> 迁移建议：</h4><p>作为另一个现代响应式库的 Vue 3， 迁移起来你应该会感觉很熟悉。Solid 的组件非常类似于在 Vue 的 <code>setup</code> 函数末尾标记模板。小心地同函数来计算覆盖状态推导。响应性无处不在。Solid 的代理有意设置为只读。在你尝试之前不要批评它。</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte 开创了 Solid 在一定程度上也采用的预编译消失型框架。这两个库都是真正的响应式，可以生成非常小的执行代码包，尽管 Svelte 是小型 demo 的赢家。Solid 需要在其声明中更加明确，更少依赖编译器的隐式分析，但这正是 Solid 卓越性能的一部分。Solid 还在运行时保留了更多东西，这在更大的应用程序中可以更好地扩展。Solid 的 RealWorld 演示实现比 Svelte 的小 25%。</p><p>这两个库都旨在帮助他们的开发人员编写更少的代码，但方法却完全不同。Svelte 3 专注于优化处理本地化更改的易用性，重点是普通对象交互和双向绑定。相比之下，Solid 通过故意采用 CQRS 和不可变接口来专注于数据流。通过功能模板组合，在许多情况下，Solid 允许开发人员编写比 Svelte 更少的代码，尽管 Svelte 的模板语法绝对更简洁。</p><h4 id=\"%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-2\">#</a> 迁移建议：</h4><p>开发体验非常不同，虽然有些东西是相似的，但这是一种非常不同的体验。Solid 中的组件消耗低，所以不要担心拥有更多的组件。</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>这个库的存在归功于 Knockout。该项目的动机是将其用于细粒度依赖性检测的模型现代化。Knockout 于 2010 年发布，支持 Microsoft Explorer 回到 IE6，而 Solid 的大部分内容根本不支持 IE。</p><p>Knockout 的绑定只是在运行时遍历的 HTML 中的字符串。它们取决于克隆上下文（$parent 等...）。而 Solid 使用 JSX 或 JavaScript API 的标签模板字面量来模板化。</p><p>最大的区别可能是 Solid 的批处理更改方法可确保同步性，而 Knockout 具有使用延迟微任务队列的 deferUpdates。</p><h4 id=\"%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-3\">#</a> 迁移建议：</h4><p>如果你习惯了 Knockout，Solid 的 primitive 对你来说可能看起来很奇怪。读/写分离是有意的，而不仅仅是为了让生活更艰难。可以采用状态/动作 (Flux) 心智模型。虽然这些库看起来相似，但它们提倡不同的最佳实践。</p><h2 id=\"lit-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%26-lighterhtml\">#</a> Lit &amp; LighterHTML</h2><p>这些库非常相似，并且对 Solid 产生了一些影响。大多数情况下，Solid 的编译代码使用非常相似的方法来高效地初始渲染 DOM。克隆模板元素和使用注释占位符是 Solid 和这些库的共同点。</p><p>最大的区别是，虽然这些库不使用虚拟 DOM，但它们以相同的方式处理渲染，自上而下，需要组件分区以保持正常。相比之下，Solid 使用其细粒度的响应式图仅更新已更改的内容，并且这样做仅在其初始渲染中技术与之雷同。这种方法利用了仅适用于原生 DOM 的初始速度，并且还具有最高性能的更新方法。</p><h4 id=\"%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%BF%81%E7%A7%BB%E5%BB%BA%E8%AE%AE%EF%BC%9A-4\">#</a> 迁移建议：</h4><p>这些库非常小，而且很容易在上面构建。但是，请记住，<code>&lt;MyComp/&gt;</code> 不仅仅是 HTMLElement（数组或函数）。尝试将你的东西保存在 JSX 模板中。提升在大多数情况下都有效，但最好在心理上将其视为渲染库而不是 HTMLElement 工厂。</p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>这个库对 Solid 的反应式设计影响最大。Solid 在内部使用了 S.js 几年，直到特征需求使它们走上了不同的道路。S.js 是迄今为止最高效的响应式库之一。它像数字电路一样对所有同步时间步长进行建模，并确保一致性，而无需执行诸如 MobX 之类的库中的许多更复杂的机制。Solid 的反应性归根结底是 S 和 MobX 之间的一种混合。这使它比大多数反应式库（Knockout、MobX、Vue）具有更高的性能，同时为开发人员保留了易于使用的心智模型。S.js 最终仍然是性能更高的反应式库，尽管除了最严厉的综合基准测试之外，差异几乎不明显。</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS 是一个响应式库。虽然 Solid 对 Observable 数据有类似的想法，但它有着许多观察者模式不同的应用。虽然 Signal 就像一个 Observable 的简单版本（只有 next），但自动依赖检测的模式取代了 RxJS 的一百个左右的操作符。Solid 有能力采用这种方法，事实上，该库的早期版本也包含类似的运算符，但在大多数情况下，在计算中编写自己的转换逻辑更为直接。在 Observable 是冷启动、单播和基于推送的情况下，客户端上的许多情况都是热启动和多播，这也是 Solid 的默认行为。</p><h2 id=\"%E5%85%B6%E4%BB%96\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%85%B6%E4%BB%96\">#</a> 其他</h2><p>Angular 和其他一些流行的库在这个比较中明显缺失。缺乏对这些库的使用经验会妨碍进行任何充分的比较。一般来说，Solid 与较大的框架几乎没有共同之处，而且很难直接比较它们。</p></section><section class=\"mt-10\"><h1 id=\"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">#</a> 常见问题</h1><h3 id=\"1.-%E6%B2%A1%E6%9C%89-vdom-%E7%9A%84-jsx%EF%BC%9F-%E8%BF%99%E6%98%AF-%E9%9B%BE%E4%BB%B6%E5%90%97%EF%BC%9F-%E6%88%91%E5%90%AC%E8%BF%87%E5%83%8F%E5%85%B6%E4%BB%96%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%9C%E8%80%85%E5%BC%BA%E8%B0%83%E8%AF%B4%E8%BF%99%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%9A%84%E3%80%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-%E6%B2%A1%E6%9C%89-vdom-%E7%9A%84-jsx%EF%BC%9F-%E8%BF%99%E6%98%AF-%E9%9B%BE%E4%BB%B6%E5%90%97%EF%BC%9F-%E6%88%91%E5%90%AC%E8%BF%87%E5%83%8F%E5%85%B6%E4%BB%96%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%9C%E8%80%85%E5%BC%BA%E8%B0%83%E8%AF%B4%E8%BF%99%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%9A%84%E3%80%82\">#</a> 1. 没有 VDOM 的 JSX？ 这是 <a href=\"https://zh.wikipedia.org/wiki/%E9%9C%A7%E4%BB%B6\">雾件</a>吗？ 我听过像其他框架的作者强调说这是不可能的。</h3><p>当你没有 React 的更新模型时，这是可能的。JSX 是一个模板 DSL，就像任何其他的模板一样。只是在某些方面更灵活的一种。插入任意 JavaScript 有时可能具有挑战性，但与支持扩展运算符没有什么不同。所以不，这不是雾件，而是一种被证明是最高效的方法。</p><p>真正的好处在于它的可扩展性。你有编译器为你工作，为你提供最佳的原生 DOM 更新，但你拥有像 React 这样的库的所有自由，可以使用诸如 Render Props 和高阶组件之类的技术以及响应式钩子来编写组件。不喜欢 Solid 的流程控制？ 写你自己的。</p><h3 id=\"2.-solid-%E7%9A%84%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-solid-%E7%9A%84%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95%EF%BC%9F\">#</a> 2. Solid 的性能如何？</h3><p>我希望我只需要指出一件事，但它确实是最重要的许多选择决定的：</p><ol> <li>显式响应性，因此只跟踪应该反应性的事物。</li> <li>编译时考虑到初始创建。Solid 使用启发式算法来松散粒度以减少计算次数，同时保持关键更新的粒度和性能。</li> <li>响应式表达式只是函数。这使得 &quot;消失的组件&quot; 能够通过惰性 props 求值移除不必要的包装器和同步开销。</li> </ol><p>这些是目前独特的技术组合，使 Solid 在竞争中具有优势。</p><h3 id=\"3.-%E6%9C%89-react-%E5%85%BC%E5%AE%B9%E5%8C%85%E5%90%97%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-%E6%9C%89-react-%E5%85%BC%E5%AE%B9%E5%8C%85%E5%90%97%3F\">#</a> 3. 有 React 兼容包吗?</h3><p>不会。而且可能永远不会有。虽然 API 是相似的，并且组件通常可以通过小的编辑距离策略来移动，但更新模型根本不同。React 组件会一遍又一遍地渲染，因此 Hooks 之外的代码的运行方式非常不同。闭包和钩子规则不仅是不必要的，它们还可以以在 Solid 不起作用的方式使用。</p><p>另一方面，Vue-compat 是可行的。虽然目前没有实施的计划。</p><h3 id=\"4.-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A7%A3%E6%9E%84%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%EF%BC%9F%E6%88%91%E8%A7%89%E5%BE%97%E5%88%B0%E6%88%91%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%B0%86%E6%95%B4%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%8C%85%E8%A3%85%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%B8%AD%E6%9D%A5%E4%BF%AE%E5%A4%8D%E5%AE%83%E3%80%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A7%A3%E6%9E%84%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%EF%BC%9F%E6%88%91%E8%A7%89%E5%BE%97%E5%88%B0%E6%88%91%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%B0%86%E6%95%B4%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%8C%85%E8%A3%85%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%B8%AD%E6%9D%A5%E4%BF%AE%E5%A4%8D%E5%AE%83%E3%80%82\">#</a> 4. 为什么解构不起作用？我觉得到我可以通过将整个组件包装在一个函数中来修复它。</h3><p>响应性发生在 Prop 和 Store 对象的属性访问上。在绑定或响应式计算之外引用它们将不会被跟踪。在这些情况下，解构正常工作。</p><p>但是，将整个组件包装在一个函数中并不是你想不负责任地做的事情。Solid 没有 VDOM。因此，任何跟踪的更改都会再次运行整个函数，重新创建所有内容。不要这样做。</p><h3 id=\"5.-%E4%BD%A0%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%AF%B9-class-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%97%EF%BC%9F-%E6%88%91%E5%8F%91%E7%8E%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9B%B4%E5%AE%B9%E6%98%93%E6%8E%A8%E7%90%86%E3%80%82\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-%E4%BD%A0%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%AF%B9-class-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%97%EF%BC%9F-%E6%88%91%E5%8F%91%E7%8E%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9B%B4%E5%AE%B9%E6%98%93%E6%8E%A8%E7%90%86%E3%80%82\">#</a> 5. 你能添加对 Class 组件的支持吗？ 我发现生命周期更容易推理。</h3><p>不打算支持类组件。Solid 的生命周期与调度反应系统相关，并且是人为的。我想你可以用它创建一个类，但实际上所有非事件处理器代码基本上都在构造函数中运行，包括渲染函数。这只是你不细化数据要求更多语法的借口。</p><p>将数据及其行为组合在一起，而不是将生命周期组合在一起。这是一种已经奏效了数十年的响应式最佳实践。</p><h3 id=\"6.-%E6%88%91%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%96%9C%E6%AC%A2-jsx%EF%BC%8C%E6%A8%A1%E6%9D%BF-dsl-%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%90%97%EF%BC%9F-%E5%93%A6%EF%BC%8C%E6%88%91%E7%9C%8B%E5%88%B0%E4%BD%A0%E6%A0%87%E8%AE%B0%E4%BA%86%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F%2Fhyperscript%E3%80%82%E4%B9%9F%E8%AE%B8%E6%88%91%E4%BC%9A%E7%94%A8%E9%82%A3%E4%BA%9B...\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-%E6%88%91%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%96%9C%E6%AC%A2-jsx%EF%BC%8C%E6%A8%A1%E6%9D%BF-dsl-%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%90%97%EF%BC%9F-%E5%93%A6%EF%BC%8C%E6%88%91%E7%9C%8B%E5%88%B0%E4%BD%A0%E6%A0%87%E8%AE%B0%E4%BA%86%E6%A0%87%E7%AD%BE%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F%2Fhyperscript%E3%80%82%E4%B9%9F%E8%AE%B8%E6%88%91%E4%BC%9A%E7%94%A8%E9%82%A3%E4%BA%9B...\">#</a> 6. 我真的不喜欢 JSX，模板 DSL 有机会吗？ 哦，我看到你标记了标签模板字面量/HyperScript。也许我会用那些...</h3><p>别。我会马上阻止你。我们像 Svelte 使用他们的模板一样使用 JSX 来创建优化的 DOM 指令。标签模板字面量 和 HyperScript 解决方案确实令人印象深刻，但除非你有真正的理由，例如无构建要求，否则它们在各方面都较差。较大的包、较慢的性能以及需要手动解决方法包装值。</p><p>有选择是件好事，但 Solid 的 JSX 确实是最好的解决方案。模板 DSL 也很棒，虽然限制更多，但 JSX 为我们免费提供了很多。现有解析器、语法高亮、TypeScript、Prettier、代码完成，以及最后但并非最不重要的 TypeScript。</p><p>我知道其他库一直在增加对这些功能的支持，但这是一项巨大的努力，但仍然不完美，并且一直是维护问题。这也确实是一种务实的态度。</p><h3 id=\"7.-%E6%88%91%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8-signal-%E6%88%96%E8%80%85-store%3F-%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-%E6%88%91%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8-signal-%E6%88%96%E8%80%85-store%3F-%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%3F\">#</a> 7. 我什么时候使用 Signal 或者 Store? 它们有何不同?</h3><p>存储自动包装嵌套值，使其成为深层数据结构，是数据模型的理想选择。对于大多数其他情况，Signal 是轻量级的，并且可以出色地完成工作。</p><p>尽管我很想将这些包装在一起作为一个单一的 API，但你不能代理基本数据类型。函数是最简单的接口，任何响应式式表达式（包括状态访问）都可以在传输时包装成一个，如果这提供了一个通用 API。你可以随意命名你的 signal 和状态，并且它保持最小。我想要做的最后一件事是在用户端强制键入 <code>.get()</code> <code>.set()</code> 或更糟的 <code>.value</code>。为了简洁起见，至少前者可以使用别名，而后者只是调用函数的最简单的方法。</p><h3 id=\"8.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%B8%8D%E8%83%BD%E5%83%8F%E5%9C%A8-vue.js-svelte-mobx-%E4%B8%AD%E9%82%A3%E6%A0%B7%E4%B8%BA-solid-%E7%9A%84-store-%E8%B5%8B%E5%80%BC%EF%BC%9F-%E6%9C%89%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E4%B9%88%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%B8%8D%E8%83%BD%E5%83%8F%E5%9C%A8-vue.js-svelte-mobx-%E4%B8%AD%E9%82%A3%E6%A0%B7%E4%B8%BA-solid-%E7%9A%84-store-%E8%B5%8B%E5%80%BC%EF%BC%9F-%E6%9C%89%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E4%B9%88%EF%BC%9F\">#</a> 8.为什么我不能像在 Vue.js Svelte MobX 中那样为 Solid 的 Store 赋值？ 有双向绑定么？</h3><p>响应性是一种强大的工具，但也是一种危险的工具。MobX 知道这一点并引入了严格模式和 Action 来限制更新发生的位置/时间。在 Solid 处理整个组件数据树时，我意识到我们可以从 React 中学到一些东西。只要你提供拥有相同约定的方法，你就不需要实际上是不可变的数据。</p><p>能够传递更新状态的能力可以说比决定传递状态更重要。因此，能够将其分开很重要，而且只有在读取不可变的情况下才有可能。如果我们仍然可以粒度更新，我们也不需要付出不可变的成本。幸运的是，ImmutableJS 和 Immer 有大量的现有技术。具有讽刺意味的是，Solid 主要用作具有可变内部结构和不可变接口，和 Immer 刚好相反。</p><h3 id=\"9.-%E6%88%91%E5%8F%AF%E4%BB%A5%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8-solid-%E7%9A%84%E5%93%8D%E5%BA%94%E6%80%A7%E5%90%97%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-%E6%88%91%E5%8F%AF%E4%BB%A5%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8-solid-%E7%9A%84%E5%93%8D%E5%BA%94%E6%80%A7%E5%90%97%EF%BC%9F\">#</a> 9. 我可以单独使用 Solid 的响应性吗？</h3><p>当然。虽然我没有导出一个独立的包，但很容易在没有编译器的情况下安装 Solid，只需使用反应 primitive。粒度响应性的好处之一是它与库无关。就此而言，几乎每个反应式库都是这样工作的。这启发了 <a href=\"https://github.com/solidjs/solid\">Solid</a> ，Solid 内部使用 <a href=\"https://github.com/ryansolid/dom-expressions\">DOM 表达式库</a> 并根据纯粹的响应式系统来创建的渲染器。</p><p>列出一些可尝试的库: <a href=\"https://github.com/solidjs/solid\">Solid</a>, <a href=\"https://github.com/mobxjs/mobx\">MobX</a>, <a href=\"https://github.com/knockout/knockout\">Knockout</a>, <a href=\"https://github.com/sveltejs/svelte\">Svelte</a>, <a href=\"https://github.com/adamhaile/S\">S.js</a>, <a href=\"https://github.com/Riim/cellx\">CellX</a>, <a href=\"https://github.com/ds300/derivablejs\">Derivable</a>, <a href=\"https://github.com/luwes/sinuous\">Sinuous</a>, 甚至最近的 <a href=\"https://github.com/vuejs/vue\">Vue</a>. 制作响应式库比将其标记到渲染器上工作量要多得多，例如 <a href=\"https://github.com/Polymer/lit-html\">lit-html</a>，但这有助于帮你找到感觉。</p><h3 id=\"10.-solid-%E6%9C%89%E6%88%91%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%9A%84-next.js-%E6%88%96-material-components-%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%BA%93%E5%90%97%EF%BC%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-solid-%E6%9C%89%E6%88%91%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%9A%84-next.js-%E6%88%96-material-components-%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%BA%93%E5%90%97%EF%BC%9F\">#</a> 10. Solid 有我可以使用的 Next.js 或 Material Components 之类的库吗？</h3><p>据我所知没有。如果你有兴趣构建一个，我可以随时在我们的 <a href=\"https://discord.com/invite/solidjs\">Discord</a> 上帮助你构建它们。我们有基础，只需要在这些基础上再接再厉。</p></section>"
}