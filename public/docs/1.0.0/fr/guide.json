{
  "sections": [
    {
      "slug": "pour-commencer",
      "title": "Pour commencer",
      "level": 1,
      "children": [
        {
          "slug": "essayer-solid",
          "title": "Essayer Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "comprendre-solid",
          "title": "Comprendre Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "penser-solid",
          "title": "Penser Solid",
          "level": 2,
          "children": [
            {
              "slug": "1.-donn%C3%A9es-d%C3%A9claratives",
              "title": "1. Données déclaratives",
              "level": 3,
              "children": []
            },
            {
              "slug": "2.-disparition-de-composants",
              "title": "2. Disparition de composants",
              "level": 3,
              "children": []
            },
            {
              "slug": "3.-s%C3%A9paration-lecture%2F%C3%A9criture",
              "title": "3. Séparation Lecture/Écriture",
              "level": 3,
              "children": []
            },
            {
              "slug": "4.-privil%C3%A9gier-la-simplicit%C3%A9-%C3%A0-la-facilit%C3%A9",
              "title": "4. Privilégier la simplicité à la facilité",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "web-components",
          "title": "Web Components",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendu-c%C3%B4t%C3%A9-serveur",
          "title": "Rendu côté serveur",
          "level": 2,
          "children": []
        },
        {
          "slug": "pas-de-compilation-%3F",
          "title": "Pas de Compilation ?",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "r%C3%A9activit%C3%A9",
      "title": "Réactivité",
      "level": 1,
      "children": [
        {
          "slug": "introduction-aux-primitives",
          "title": "Introduction aux primitives",
          "level": 2,
          "children": []
        },
        {
          "slug": "comment-%C3%A7a-marche",
          "title": "Comment ça marche",
          "level": 2,
          "children": []
        },
        {
          "slug": "consid%C3%A9rations",
          "title": "Considérations",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendu",
      "title": "Rendu",
      "level": 1,
      "children": [
        {
          "slug": "compilation-de-jsx",
          "title": "Compilation de JSX",
          "level": 2,
          "children": []
        },
        {
          "slug": "attributs-et-props",
          "title": "Attributs et Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "point-d'entr%C3%A9e",
          "title": "Point d'entrée",
          "level": 2,
          "children": []
        },
        {
          "slug": "composants",
          "title": "Composants",
          "level": 2,
          "children": []
        },
        {
          "slug": "props",
          "title": "Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "enfants",
          "title": "Enfants",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendu-c%C3%B4t%C3%A9-serveur",
      "title": "Rendu Côté Serveur",
      "level": 1,
      "children": [
        {
          "slug": "script-d'hydratation",
          "title": "Script d'Hydratation",
          "level": 2,
          "children": []
        },
        {
          "slug": "async-et-streaming-c%C3%B4t%C3%A9-serveur",
          "title": "Async et Streaming côté serveur",
          "level": 2,
          "children": []
        },
        {
          "slug": "limitations-du-rendu-c%C3%B4t%C3%A9-serveur",
          "title": "Limitations du rendu côté serveur",
          "level": 2,
          "children": []
        },
        {
          "slug": "commencer-avec-le-rendu-c%C3%B4t%C3%A9-serveur",
          "title": "Commencer avec le Rendu Côté Serveur",
          "level": 2,
          "children": []
        },
        {
          "slug": "commencer-avec-la-g%C3%A9n%C3%A9ration-de-site-statique",
          "title": "Commencer avec la Génération de Site Statique",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "comparaison-avec-les-autres-librairies",
      "title": "Comparaison avec les autres librairies",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "conseil-de-migration%3A",
              "title": "Conseil de migration:",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "conseil-de-migration%3A-1",
              "title": "Conseil de migration:",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "conseil-de-migration%3A-2",
              "title": "Conseil de migration:",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "conseil-de-migration%3A-3",
              "title": "Conseil de migration:",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%26-lighterhtml",
          "title": "Lit & LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "conseil-de-migration%3A-4",
              "title": "Conseil de migration:",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "autres",
          "title": "Autres",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "faq",
      "title": "FAQ",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"pour-commencer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pour-commencer\">#</a> Pour commencer</h1><h2 id=\"essayer-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#essayer-solid\">#</a> Essayer Solid</h2><p>La manière la plus simple de commencer avec Solid est d'essayer en ligne. Notre REPL sur <a href=\"https://playground.solidjs.com\">https://playground.solidjs.com</a> est la meilleure façon d'expérimenter, ainsi que sur <a href=\"https://codesandbox.io/\">https://codesandbox.io/</a> où vous pouvez modifier <a href=\"https://github.com/solidjs/solid/blob/main/documentation/resources/examples.md\">nos différents exemples</a>. Sinon, vous pouvez utiliser simplement notre template <a href=\"https://vitejs.dev/\">vite</a> en lançant ces commandes dans votre terminal :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/js mon-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> mon-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"></span></code></pre><p>Ou avec TypeScript:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/ts mon-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> mon-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"comprendre-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#comprendre-solid\">#</a> Comprendre Solid</h2><p>Solid est fondamentalement construit autour de petites pièces composables qui servent à créer les fondations de nos applications. Ces pièces sont principalement des fonctions qui sont utilisées pour beaucoup d'APIs de niveau superficiel. Heureusement, vous n'avez pas besoin de connaître la majorité pour commencer.</p><p>Les deux principaux piliers de ces fondations sont les Composants et les Primitives Réactives.</p><p>Les Composants sont des fonctions qui acceptent des props en tant qu'objet et retournent des éléments JSX incluant des éléments natifs du DOM et d'autres composants. Ils peuvent s'écrire en tant qu'élément JSX en utilisant le PascalCase:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Hello {props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Solid&quot;</span><span style=\"color:#24292e\"> /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Les Composants sont légers dans le sens où ils ne possèdent pas eux-mêmes d'état (not stateful) et n'ont pas d'instances. À la place, ils servent de fonctions de construction (factory) pour les éléments du DOM et des primitives réactives.</p><p>La réactivité de précision (fined-grained reactivity) est construite sur 3 primitives simples : Signaux, Mémos et Effets. Ensemble, ils forment un système de synchronisation automatiquement suivi qui s'assure que votre vue reste à jour. Le calcul de la réactivité prend forme de simple expression enrober dans des fonctions qui s'exécutent de manière synchrone.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">first</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setFirst</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;JSON&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">last</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setLast</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Bourne&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">first</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">last</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><p>Vous pouvez en apprendre plus sur <a href=\"https://www.solidjs.com/docs/latest#reactivity\">le système de réactivité de Solid</a> et <a href=\"https://www.solidjs.com/docs/latest#rendering\">le système de rendu de Solid</a>.</p><h2 id=\"penser-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#penser-solid\">#</a> Penser Solid</h2><p>Le design de Solid a été créé avec certaines opinions sur les principes et les valeurs qui nous aident à construire de meilleurs sites internet et applications. Il est plus simple d'apprendre et d'utiliser Solid quand vous connaissez la philosophie derrière son design.</p><h3 id=\"1.-donn%C3%A9es-d%C3%A9claratives\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-donn%C3%A9es-d%C3%A9claratives\">#</a> 1. Données déclaratives</h3><p>Les &quot;données déclaratives&quot; est le concept de lier la description des données au comportement de leurs déclarations. Cela permet de facilement grouper le comportement des données dans un seul endroit.</p><h3 id=\"2.-disparition-de-composants\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-disparition-de-composants\">#</a> 2. Disparition de composants</h3><p>Il est déjà difficile de structurer vos composants sans prendre en compte les mises à jour de ceux-ci. Le système de mise à jour de Solid est complètement indépendant des composants. Les Composants sont des fonctions qui sont appelées une fois et ensuite cessent d'exister. Les Composants n'existent que dans l'unique but d'organiser votre code, ni plus, ni moins.</p><h3 id=\"3.-s%C3%A9paration-lecture%2F%C3%A9criture\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-s%C3%A9paration-lecture%2F%C3%A9criture\">#</a> 3. Séparation Lecture/Écriture</h3><p>Le contrôle précis et la prévisibilité créent de meilleurs systèmes. Nous n'avons pas besoin d'immutabilité stricte pour forcer un flux unidirectionnel, juste de la possibilité de prendre une décision consciente de savoir quelle pièce peut écrire et laquelle ne peut pas.</p><h3 id=\"4.-privil%C3%A9gier-la-simplicit%C3%A9-%C3%A0-la-facilit%C3%A9\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-privil%C3%A9gier-la-simplicit%C3%A9-%C3%A0-la-facilit%C3%A9\">#</a> 4. Privilégier la simplicité à la facilité</h3><p>Une leçon que nous apprenons à la dure avec un système de réactivité détaillé. Les conventions explicites et constantes même si elles demandent plus d'efforts en valent la peine. Le but est de fournir un minimum d'outils pour servir à la base sur la quel construire.</p><hr><h2 id=\"web-components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#web-components\">#</a> Web Components</h2><p>Solid est né d'un désire de mettre les Web Components en tant qu'acteur principal. Au fur et à mesure du temps, le design de Solid a évolué et ses objectifs ont changé. Cependant, Solid reste une bonne alternative pour les auteurs de Web Components. <a href=\"https://github.com/solidjs/solid/tree/main/packages/solid-element\">Solid Element</a> permets d'écrire et d'enrober des fonctions Composants en Solid pour produire des Web Components petits et performants. Au sain d'une application en Solid, Solid Element est capable d'utiliser l'API de Contexte et les Portails sont supportés dans le Shadow DOM avec l'isolation de style.</p><h2 id=\"rendu-c%C3%B4t%C3%A9-serveur\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendu-c%C3%B4t%C3%A9-serveur\">#</a> Rendu côté serveur</h2><p>Solid propose une solution dynamique de rendu côté serveur qui permet une vraie expérience isomorphe. Avec l'utilisation de la primitive &quot;Resource&quot;, les requêtes asynchrones sont facilement faites et, plus importantes, automatiquement sérialisées et synchronisées entre le client et le navigateur.</p><p>Comme Solid supporte le fonctionnement asynchrone et le stream rendering côté serveur, vous pouvez écrire votre code d'une seule manière et l'exécuter côté serveur. Ce qui veut dire que des fonctionnalités comme <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\">render-as-you-fetch</a> et le fractionnement de code vont fonctionner sans effort avec Solid.</p><p>Pour plus d'information, n'hésitez pas à lire le <a href=\"https://www.solidjs.com/docs/latest#server-side-rendering\">guide serveur</a>.</p><h2 id=\"pas-de-compilation-%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pas-de-compilation-%3F\">#</a> Pas de Compilation ?</h2><p>Vous n'aimez pas JSX ? Cela ne vous gêne pas de faire du travail manuel pour enrober vos expressions, d'avoir de moins bonne performance et des paquets plus gros ? Il est possible de créer des applications Solid en utilisant des Tagged Template Literals ou HyperScript dans un environnement non compilé.</p><p>Vous pouvez les exécuter directement depuis le navigateur en utilisant <a href=\"https://www.skypack.dev/\">Skypack</a>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#24292e\">=</span><span style=\"color:#032f62\">&quot;module&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        createSignal,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        onCleanup,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> html </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/html&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">          </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">html</span><span style=\"color:#032f62\">`&lt;div&gt;${</span><span style=\"color:#24292e\">count</span><span style=\"color:#032f62\">}&lt;/div&gt;`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      };</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.body);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>N'oubliez pas, vous aurez quand même besoin de la librairie utilisée pour l'expression du DOM pour que cela fonctionne avec TypeScript. Vous pouvez utiliser les Tagged Template Literals avec <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/lit-dom-expressions\">Lit DOM Expressions</a> ou HyperScript avec <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/hyper-dom-expressions\">Hyper DOM Expressions</a>.</p></section><section class=\"mt-10\"><h1 id=\"r%C3%A9activit%C3%A9\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#r%C3%A9activit%C3%A9\">#</a> Réactivité</h1><p>La gestion des données avec Solid est construite avec une collection de primitives réactives flexibles qui sont responsables de toutes les mises à jour. L'approche est très similaire à MobX ou Vue sauf qu'elle ne sacrifie jamais la granularité pour un VDOM.</p><p>Les primitives de Solid sont sous la forme d'appel de <code>create</code> qui vont souvent retourner des tuples, où généralement le premier élément est une primitive de lecture et la seconde d'écriture. Il est commun de référer seulement à la partie lisible par le nom de la primitive.</p><p>Ci-dessous un exemple basique d'un compteur auto-incrémenter qui se met à jour après modification du signal <code>count</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal, onCleanup } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"introduction-aux-primitives\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-aux-primitives\">#</a> Introduction aux primitives</h2><p>Solid est construit sur 3 principales primitives, Signal, Mémo et Effet. Au cœur de ces primitives, nous utilisons le pattern Observer.</p><p>Les Signaux sont les primitives les plus basiques. Elles contiennent des valeurs et des fonctions de lecture et écriture que nous pouvons intercepter quand elles sont lues et réécrites.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Les Effets sont des fonctions qui enrobe les fonctions de lecture de nos signaux et se réexécuté quand la valeur d'un Signal dépendant change. Ceci est utile lorsque l'on veut créer des effets secondaires, comme le rendu.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;The latest count is&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>Enfin, les Mémos sont des valeurs dérivées mises en cache. Ils partagent des propriétés avec les Signaux et les Effets. Ils vont surveiller leurs propres Signaux dépendants, se réexécuter seulement quand ceux-ci changent et sont des Signaux surveillés.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fullName</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">firstName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">lastName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"comment-%C3%A7a-marche\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#comment-%C3%A7a-marche\">#</a> Comment ça marche</h2><p>Les Signaux sont des émetteurs d'évènement qui possèdent une liste d'abonnés. Ils notifient ses abonnés lorsque leurs valeurs changent.</p><p>Ce qui est intéressant, c'est de savoir comment ces abonnements se font. Solid utilise un système automatique de surveillance de dépendance. Les mises à jour se font automatiquement lorsque la donnée change.</p><p>L'astuce est une pile globale à l'exécution. Avant qu'un Effet ou Mémo s'exécute (ou réexécute) sa fonction fournie par le développeur, il va s'ajouter lui-même à la pile. Puis tous les Signaux qui sont lus vont vérifier s’il y a un écouteur actuellement dans la pile et si c'est le cas, il va ajouter cet écouteur dans ses abonnés.</p><p>Vous pouvez le conceptualiser comme ceci :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">subscribers</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">Set</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">read</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">listener</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">getCurrentListener</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (listener) subscribers.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(listener);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">nextValue</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> nextValue;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">for</span><span style=\"color:#24292e\"> (</span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sub</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">of</span><span style=\"color:#24292e\"> subscribers) sub.</span><span style=\"color:#6f42c1\">run</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> [read, write];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Maintenant quand le Signal se met à jour, nous savons quels Effets se réexécutent. Simple, mais efficace. La vraie implémentation est plus compliquée, mais c'est le cœur de ce qu'il se passe.</p><p>Pour plus de détails au sujet de la Réactivité et de son fonctionnent, ces articles vous seront utiles :</p><p><a href=\"https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf\">A Hands-on Introduction to Fine-Grained Reactivity</a></p><p><a href=\"https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p\">Building a Reactive Library from Scratch</a></p><p><a href=\"https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering\">SolidJS: Reactivity to Rendering</a></p><h2 id=\"consid%C3%A9rations\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#consid%C3%A9rations\">#</a> Considérations</h2><p>Cette approche à la réactivité est très puissante et dynamique. Elle permet de gérer des dépendances changeantes à la volée en exécutant différentes branches de code conditionnel. Cela fonctionne aussi sur plusieurs niveaux d'indirection. N'importe quelle fonction exécutée à l'intérieur d'une portée surveillée est aussi surveillée.</p><p>Cependant, il existe des comportements clés et des compromis dont nous devons être conscients.</p><ol> <li> <p>Toute réactivité est surveillée par des appels de fonction que ce soit directement ou cacher derrière un getter/proxy et déclenchée par l'accès à une propriété. Cela veut dire que d'où vous accédez aux propriétés dans un objet réactif est important.</p> </li> <li> <p>Composants et fonction de rappel du contrôle du flux ne sont pas des portées surveillées et sont seulement exécutés une seule fois. Cela signifie que la déstructuration ou exécuter de la logique dans vos composants ne va pas se réexécuter. Vous devez accéder aux Signaux, Stores et props depuis d'autres primitives ou du JSX pour cette partie du code pour réévaluer.</p> </li> <li> <p>Cette approche va seulement surveiller de manière synchrone. Si vous avez un setTimeout ou utilisez une fonction asynchrone dans votre Effet, le code qui s'exécute de manière asynchrone après les faits ne sera pas surveillé.</p> </li> </ol></section><section class=\"mt-10\"><h1 id=\"rendu\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendu\">#</a> Rendu</h1><p>Solid supporte 3 formes de template JSX, Tagged Template Literals et sa propre variation de HyperScript, même si JSX est la forme prédominante. Pourquoi ? JSX est un super DSL fait pour la compilation. Il possède une syntaxe claire, supporte TypeScript, fonctionne avec Babel et supporte d'autres outils comme le Surlignage Syntaxique et Prettier. Il est pragmatique d'utiliser un outil qui vous donne tout cela inclus. En tant que solution compilée, il offre une expérience développeur géniale. Pourquoi s'embêter avec une syntaxe DSL personnalisée quand vous pouvez en utiliser une qui est déjà supportée à grande échelle ?</p><h2 id=\"compilation-de-jsx\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#compilation-de-jsx\">#</a> Compilation de JSX</h2><p>Le rendu implique une précompilation de template JSX en code JS natif optimisé. Le code JSX produit :</p><ul> <li>Le template des éléments DOM qui sont clonés pour chaque instanciation</li> <li>Une série de déclarations de référence utilisée seulement pour firstChild et nextSibling</li> <li>Un calcul précis des mises à jour des éléments créées</li> </ul><p>Cette approche est plus performante et produit moins de code que la création de chaque élément, un par un, avec <code>document.createElement</code>.</p><h2 id=\"attributs-et-props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attributs-et-props\">#</a> Attributs et Props</h2><p>Solid essaye de refléter les conventions HTML autant que possible en incluant des noms d'attributs insensibles aux majuscules et minuscules.</p><p>La majorité des attributs sur les éléments JSX natifs sont les mêmes que ceux du DOM. Les valeurs statiques sont incluses directement dans le template qui est cloné. Il y a un quelques exceptions comme <code>class</code>, <code>style</code>, <code>value</code>, <code>innerHTML</code> qui fournissent des fonctionnalités supplémentaires.</p><p>Cependant, les éléments personnalisés (à l'exception des éléments natifs) vont utiliser par défaut les propriétés dynamiques. Cela permet de gérer des types de données plus complexes. On utilise la convention camelCase au lieu du standard snake-case pour les attributs, <code>some-attr</code> deviens <code>someAttr</code>.</p><p>Il est aussi possible de contrôler le comportement directement avec un espace de noms de directives. Vous pouvez forcer un attribut <code>attr:</code> ou forcer une prop <code>prop:</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">UniqACC</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.value} </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.title} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Note :</strong> Les attributs statiques sont créés en tant que template HTML qui sont clonés. Les expressions fixe et dynamique sont appliquées après dans le l'ordre JSX associé. Bien que cela soit correct, pour la plupart des éléments du DOM, il y en a certain, comme les champs de saisis avec <code>type='range'</code>, où l'ordre est important. Garder cela en tête pendant l'association d'élément.</p> </blockquote><h2 id=\"point-d'entr%C3%A9e\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#point-d'entr%C3%A9e\">#</a> Point d'entrée</h2><p>La manière la plus simple de monter Solid est d'importer <code>render</code> depuis le module <code>solid-js/web</code>. <code>render</code> prends une fonction en tant que premier argument et l'élément englobant pour le second argument et retourne une méthode de destruction. Pour de meilleure performance, utiliser un élément sans enfant.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;main&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Important</strong> Le premier argument a besoin d'être une fonction. Autrement, nous ne pouvons pas surveiller les propriétés et activer le système de réactivité. Ce simple oubli va faire que vos Effets ne vont pas s'exécuter.</p> </blockquote><h2 id=\"composants\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#composants\">#</a> Composants</h2><p>Les Composants dans Solid sont des fonctions en PascalCase (Majuscule). Leur premier argument est un objet props et ils doivent retourner des nœuds de DOM.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Comme chaque nœud JSX est en réalité un nœud DOM, la seule responsabilité des Composants de haut niveau est de les ajouter dans le DOM.</p><h2 id=\"props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#props\">#</a> Props</h2><p>Comme React, Vue, Angular et d'autres frameworks, Solid permet de définir des propriétés dans vos composants pour passer des données aux composants enfants. Ci-dessous, un parent passe une chaîne de caractère &quot;Bonjour&quot; au composant <code>Label</code> via une propriété <code>greeting</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Bonjour&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Dans l'exemple au-dessus, la valeur attribuée à <code>greeting</code> est statique, mais nous pouvons aussi utilisé des valeurs dynamiques. Par exemple :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setGreeting</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Bonjour&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">greeting</span><span style=\"color:#24292e\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Les Composants ont accès aux propriétés qui leur sont données via l'argument <code>props</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>À la différence des autres frameworks, vous ne pouvez pas utiliser la déstructuration d'objet sur les <code>props</code> d'un composant. Cela est dû au fait que l'objet <code>props</code>, en coulisse, va s'appuyer sur les Object getters pour paresseusement récupérer des valeurs. Utiliser la déstructuration d'objet casse la réactivité des <code>props</code>.</p><p>Cet exemple montre la &quot;bonne&quot; manière d'accéder aux props dans Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Ici, `props.name` va se mettre à jour comme prévu</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Cet exemple montre la mauvaise manière d'accéder aux props dans Solid :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Cela n&#39;est pas bon</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Ici, `props.name` ne va pas se mettre à jour (n&#39;est pas réactif) à cause de la déstructuration de `name`</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> ({ </span><span style=\"color:#e36209\">name</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Même si l'objet <code>props</code> ressemble à un objet normal (et les utilisateurs de Typescript noteront que le typage est similaire à un objet normal), quand il est utilisé, il est en réalité réactif - en quelque sorte similaire aux Signaux. Cela a quelques implications.</p><p>Contrairement aux autres frameworks JSX, les fonctions Composants de Solid sont seulement exécutées une fois (plutôt qu'à chaque cycle de rendu), l'exemple ci-dessous ne va pas fonctionner comme prévu.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">default</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#e36209\"> </span><span style=\"color:#6f42c1\">Form</span><span style=\"color:#e36209\">() </span><span style=\"color:#24292e\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">input</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">oninput</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(e.currentTarget.value)} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Dans cet exemple, nous voulons probablement que le <code>BasicComponent</code> affiche la valeur actuelle saisie dans l'<code>input</code>. Mais, comme dit plus tôt, la fonction <code>BasicComponent</code> ne va s'exécuter qu'une seule fois quand le composant est initialement créé. À ce moment-là (à la création), <code>props.value</code> aura une valeur <code>''</code>. Cela veut dire que <code>const value</code> dans <code>BasicComponent</code> va être affecté <code>'default'</code> et ne jamais se mettre à jour. Pendant ce temps, l'objet <code>props</code> peut changer, accéder à props dans <code>const value = props.value || 'default';</code> est hors du champ observable de Solid, donc il ne se réévalue pas automatique quand l'objet props change.</p><p>Alors comment règle-t-on ce problème ?</p><p>Et bien, en général, nous voulons accéder à <code>props</code> quelque part où Solid peut l'observer. En général, cela veut dire à l'intérieur de JSX ou à l'intérieur d'une fonction <code>createMemo</code>, <code>createEffect</code> ou thunk(<code>() =&gt; ...</code>). Ci-dessous une solution qui marche comme prévu :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ceci est un équivalent et peut être mis dans une fonction</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Une autre option, lorsque le calcul est coûteux, est d'utiliser <code>createMemo</code>. Par exemple :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ou d'utiliser la fonction d'aide :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ value: </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Souvenez-vous, l'exemple ci-dessous ne fonctionne <em>pas</em> :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// mauvais</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">: </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// mauvais</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> prop.value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Les Composants en Solid sont une partie essentielle à ses performances. L'approche de &quot;Disparition&quot; des Composants de Solid est possible grâce à l'évaluation paresseuse des props. Au lieu d'évaluer les expressions props immédiatement et de passer en valeurs, l'exécution est reportée jusqu'à ce que la prop est accédée par son enfant. En faisant ça, nous reportons l'exécution jusqu'au dernier moment, typiquement au moment de l'association avec le DOM, ce qui maximise les performances. Cela permet d'aplatir la hiérarchie et de retirer le besoin de maintenir un arbre de Composants.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Component</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop1</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop2</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.dynamic} /&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Compile à peu près en</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Nous surveillons le contenu du composant pour l&#39;isoler et éviter des mises à jour coûteuse</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Component</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    prop1: </span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6a737d\">// expression dynamique, donc nous enrobons dans un function d&#39;accès</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">prop2</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> state.dynamic;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Pour aider à maintenir la réactivité, Solid fournit quelque fonction d'aide pour les props:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// props par défaut</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// clone les props</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">newProps</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// fusionne les props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Sépare les props en plusieurs objet</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;className&quot;</span><span style=\"color:#24292e\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#005cc5\">className</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">cx</span><span style=\"color:#24292e\">(local.className, theme.component)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"enfants\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#enfants\">#</a> Enfants</h2><p>Solid gère les enfants JSX comme React. Un enfant unique est une valeur unique dans <code>props.children</code> et plusieurs enfants sont géré comme un tableau de valeur. Normalement, vous les passez par la vue JSX. Cependant, si vous voulez interagir avec eux, la méthode suggérée est d'utiliser la fonction d'aide <code>children</code> qui va résoudre tous les contrôles de flux en aval et retourner un Mémo.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// enfant unique</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">class</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;label&quot;</span><span style=\"color:#24292e\">&gt;Hi, { props.children }&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;&lt;</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;Josie&lt;/</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// plusieurs enfants</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.children}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;First&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {state.expression}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;Judith&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// itération sur chaque enfant</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.children}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// modification et itération en utilisant la fonction d&#39;aide</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// la fonction d&#39;aide &quot;children&quot; mémorise la valeur et resouds toutes les dépendances réactives intermédiaires</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">memo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">children</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    children.</span><span style=\"color:#6f42c1\">forEach</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c.classList.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;list-child&quot;</span><span style=\"color:#24292e\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">()}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p><strong>Important:</strong> Le traitement des balises enfants dans Solid sont des expressions coûteuses et sont englobé de la même manière que des expressions réactives dynamiques. Cela veut dire qu'ils sont évalués paresseusement sur l'accès de <code>prop</code>. Soyez prudent quand vous accédez y accéder plusieurs fois ou déstructurer avant l'endroit où vous voulez l'utiliser dans la vue. Cela est dû au fait que Solid n'a pas le luxe de se créer un des nœuds de DOM Virtuel en avance et de trouver les différences, donc la résolution de ces <code>props</code> doit être faite quand nécessaire et de manière délibérée. Utilisez la fonction d'aide <code>children</code> si vous souhaitez le faire afin de les mémoriser.</p></section><section class=\"mt-10\"><h1 id=\"rendu-c%C3%B4t%C3%A9-serveur\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendu-c%C3%B4t%C3%A9-serveur\">#</a> Rendu Côté Serveur</h1><p>Solid gère le rendu côté serveur en compilant les templates JSX pour que l'ajout de code soit ultra efficace. Cela est fait grâce au plug-in Babel ou au preset en passant <code>generate: &quot;ssr&quot;</code>. Pour le côté client et serveur, vous devez passer <code>hydratable: true</code> pour générer du code d'hydratation compatible.</p><p>Le moteur d'exécution de <code>solid-js</code> et <code>solid-js/web</code> sont interchangé pour des équivalents non réactifs à l'exécution du code dans un environnement Node. Pour les autres environnements, vous allez avoir besoin d'empaqueter (nous utilisons le terme bundle dans la suite de la doc) le code serveur avec des exports spécifiques à <code>node</code>. La plupart des bundlers ont une manière de le faire. En général, nous recommandons aussi d'utiliser les conditions d'export <code>solid</code> en plus, car il est recommandé que les libraires fournissent leurs sources sous l'export <code>solid</code>.</p><p>Construire pour le Rendu Côté Serveur va demander un peu plus de configuration, car il faudra générer 2 bundles séparés. Le point d'entré côté client devra utiliser <code>hydrate</code>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { hydrate } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document);</span></span>\n<span class=\"line\"></span></code></pre><p><em>Note: Il est possible d'effectuer le rendu et l'hydratation depuis la racine du Document. Cela nous permet de décrire une vue entière en JSX.</em></p><p>Le point d'entrée serveur peut utiliser une des quatre options de rendu offertes par Solid. Chacun va produire un résultat et une balise script qui sera insérée dans l'entête du document.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToString,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToStringAsync,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToNodeStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToWebStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Chaîne de caractère pour le rendu synchrone</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Chaîne de caractère pour le rendu asynchrone</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// API Node Stream</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// API Web Stream (pour Cloudflare Workers par example)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, writable);</span></span>\n<span class=\"line\"></span></code></pre><p>Pour vous faciliter la vie, <code>solid-js/web</code> exportent une condition <code>isServer</code>. C'est utile pour la plupart des bundlers qui seront capable de (<em>tree shake</em>)[<a href=\"https://developer.mozilla.org/fr/docs/Glossary/Tree_shaking\">https://developer.mozilla.org/fr/docs/Glossary/Tree_shaking</a>] (procédé permettant de supprimer les exports non exploités) avec cette condition ou d'importer seulement ce qui est utilisé par le code sous cette condition dans votre bundle client.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { isServer } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// N&#39;exécuter ce code que côté serveur</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// N&#39;exécuter ce code que dans le navigateur</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"script-d'hydratation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#script-d'hydratation\">#</a> Script d'Hydratation</h2><p>Dans le but de progressivement hydrater avant même que le code d'exécution de Solid ne se charge, un script spécial a besoin d'être inséré sur la page. Il peut soit être généré soit insérer via <code>generateHydrationScript</code> ou alors inclut comme une partie du JSX en utilisant la balise <code>&lt;HydratationScriptp /&gt;</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { generateHydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">app</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;html lang=&quot;en&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;title&gt;🔥 Solid SSR 🔥&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      ${</span><span style=\"color:#6f42c1\">generateHydrationScript</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;/head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;body&gt;${</span><span style=\"color:#24292e\">app</span><span style=\"color:#032f62\">}&lt;/body&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;/html&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { HydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">lang</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;en&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;🔥 Solid SSR 🔥&lt;/</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">charset</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;UTF-8&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;viewport&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">content</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;stylesheet&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;/styles.css&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">HydrationScript</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*... rest of App*/</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Lorsque l'on hydrate depuis le document qui inclut des ressources qui ne sont pas disponibles pendant l'exécution du client, cela peut poser problème. Solid fourni un composant <code>&lt;NoHydratation /&gt;</code> dont les enfants vont fonctionner normalement côté serveur, mais ne seront pas hydratés dans le navigateur.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {manifest.</span><span style=\"color:#6f42c1\">map</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">m</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;modulepreload&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{m.href} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ))}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"async-et-streaming-c%C3%B4t%C3%A9-serveur\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#async-et-streaming-c%C3%B4t%C3%A9-serveur\">#</a> Async et Streaming côté serveur</h2><p>Ces mécanismes sont construits sur les connaissances que Solid possède de votre application. Cela fonctionne en utilisant les &quot;Suspenses&quot; et l'API &quot;Resource&quot; sur le serveur, au lieu de récupérer des données en avance puis d'effectuer le rendu. Solid va récupérer les données pendant qu'il effectue le rendu sur le serveur de la même manière que du côté client. Votre code ainsi que le schéma d'exécution sont écrits exactement de la même manière.</p><p>Le rendu asynchrone attend jusqu'à ce que toutes les limites des &quot;Suspenses&quot; soit résolu et ensuite envoi les résultats (ou les écrits dans un fichier dans le cas de la Génération de Site Statique)</p><p>Le Streaming commence à envoyer le contenu synchrone au navigateur qui va immédiatement afficher le contenu de repli (ex un indicateur de chargement) côté serveur. Puis au fur et à mesure que les données asynchrones finissent de se charger, le serveur envoi les données dans le même flux au client pour résoudre le Suspense où le navigateur finit le travail et va remplacer le contenu de repli avec le vrai contenu.</p><p>Les avantages de cette approche :</p><ul> <li>Le serveur n'a pas besoin d'attendre les données asynchrones pour répondre. Les ressources peuvent être chargées plus tôt dans le navigateur et l'utilisateur commence à voir le contenu plus tôt.</li> <li>Comparer à la récupération des données côté client comme dans la JAMStack, le chargement des données commence sur le serveur immédiatement et n'a pas besoin d'attendre que le client charge le JavaScript.</li> <li>Toutes les données sont sérialisées et transportées du serveur vers le client automatiquement.</li> </ul><h2 id=\"limitations-du-rendu-c%C3%B4t%C3%A9-serveur\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#limitations-du-rendu-c%C3%B4t%C3%A9-serveur\">#</a> Limitations du rendu côté serveur</h2><p>La solution de rendu côté serveur isomorphe de Solid est très puissante, car vous pouvez écrire votre code en général en tant qu'un seul et même code source qui va s'exécuter de la même manière dans les deux environnements. Cependant, il y a des attentes demandées pour l'hydratation. Principalement que la vue affichée dans le client soit la même que celle rendue sur le serveur. Il n'y a pas besoin que ce soit exactement le même texte, mais la structure de votre balisage HTML doit être le même.</p><p>Nous utilisons des marqueurs rendus par le serveur pour comparer les éléments et la localisation des ressources sur le serveur. Pour cette raison, le Client et le Serveur ont les mêmes composants. Cela n'est pas forcément un problème vu que Solid interprète de la même façon sur le client et le serveur. Mais actuellement, il n'y a aucun moyen d'interpréter quelque chose côté serveur qui ne soit pas ensuite envoyé et afficher par le client. Actuellement, il n'y aucun moyen d'hydrater partiellement une page entière, et de ne pas générer de marqueurs d'hydratation associés. C'est une approche tout ou rien. L'Hydratation Partielle est un point que nous voulons explorer dans le futur.</p><p>Enfin, toutes les ressources ont besoin d'être définies sous l'arbre de <code>render</code>. Ils sont automatiquement sérialisés et récupérés par le navigateur, mais cela fonctionnera grâce à la méthode <code>render</code> ou <code>pipeTo</code> qui grade trace des progrès du rendu. Une chose que nous ne pouvons pas faire s’ils sont créés en isolation du contexte. De manière similaire, il n'y a pas de réactivité sur le serveur, donc ne faites pas de changement de vos signaux au rendu initial et attendez-vous à ce qu'il se reflète un peu plus haut dans l'arbre. Bien que nous ayons des limitations de Suspense, le rendu côté serveur de Solid est basiquement du haut vers le bas.</p><h2 id=\"commencer-avec-le-rendu-c%C3%B4t%C3%A9-serveur\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#commencer-avec-le-rendu-c%C3%B4t%C3%A9-serveur\">#</a> Commencer avec le Rendu Côté Serveur</h2><p>La configuration du rendu côté serveur n'est pas tout à fait terminée. Nous avons quelques exemples dans le package <a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a>.</p><p>Toutefois, un nouveau kit de démarrage est en progression <a href=\"https://github.com/solidjs/solid-start\">SolidStart</a> qui vise à rendre cette expérience beaucoup plus harmonieuse.</p><h2 id=\"commencer-avec-la-g%C3%A9n%C3%A9ration-de-site-statique\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#commencer-avec-la-g%C3%A9n%C3%A9ration-de-site-statique\">#</a> Commencer avec la Génération de Site Statique</h2><p><a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a> fournis aussi un simple utilitaire pour générer des sites statiques ou prérendus. Lisez le README pour plus d'information.</p></section><section class=\"mt-10\"><hr><h1 id=\"comparaison-avec-les-autres-librairies\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#comparaison-avec-les-autres-librairies\">#</a> Comparaison avec les autres librairies</h1><p>Cette section sera implicitement biaisée, mais je pense qu’il est important de comprendre où Solid se situe comparé aux autres librairies. Ce n’est pas une question de performance. Pour un aperçu complet des performances, vous pouvez vous référer au <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a></p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React a eu une grande influence sur Solid. Son flux unidirectionnel et sa séparation explicite de lecture et écriture dans l’API des Hooks ont influencé l’API de Solid bien plus que l’objectif d’être juste une &quot;librairie de Rendu&quot; au lieu d’un framework. Solid possède des opinions bien arrêtées sur la manière d’approcher la gestion des données dans le développement d’application, mais ne cherche pas à contraindre dans son exécution.</p><p>Bien que Solid s’aligne sur la philosophie de React, Solid fonctionne fondamentalement différemment. React utilise un Virtual DOM alors que Solid non. L’abstraction de React est une approche des composants du haut vers le bas en appelant les méthodes de rendu de manière répéter en ensuite en faisant une différence. Solid calcule le rendu de chaque template une fois dans son ensemble, en construisant une graphique de ses réactivités et n’exécuté seulement les instructions liées aux changements détectés.</p><h3 id=\"conseil-de-migration%3A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conseil-de-migration%3A\">#</a> Conseil de migration:</h3><p>La modèle de mise à jour de Solid n’a rien à voir avec React, ou même React + MobX. À la place de penser aux fonctions composantes comme des fonctions de rendue, il faut les considérer comme des constructeurs. Faites attention à la décomposition ou l’accès prématuré des propriétés réactive. Les primitives de Solid n’ont pas de restrictions comme les Hook donc nous sommes libre de les imbriqué comme bon vous semble. Vous n’avez pas besoin de clés explicites sur les lignes d’une liste pour avec le comportement &quot;keyed&quot; des autres frameworks. Enfin, il n'y a pas de VDOM (Virtual DOM), donc les opérations sur l’API VDOM comme <code>React.Children</code> ou <code>React.cloneElement</code> n'ont pas de sens. Il est encouragé de trouver différent moyen de résoudre ces problèmes en utilisant qui utilise une approche plus déclarative.</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Solid n’est pas particulièrement influencé par Vue d’un point de vue design, mais ils utilisent tous les deux des approches comparables. Les deux frameworks utilisent les Proxies dans leurs systèmes de réactivité avec de l’auto-traçabilité basée sur la lecture. Mais c’est là que les similarités s’arrêtent. La détection de dépendances se base sur une approche utilisant un Virtual DOM et un système de composant alors que Solid gardent un plus grand contrôle avec ses mises à jour directement dans sur le DOM.</p><p>Vue met en avant la facilité du framework là où Solid préfère une approche plus transparente. Bien que Vue s’aligne sur l’approche de Solid depuis Vue 3, ces librairies pourraient s’aligner de plus en plus avec le temps en fonction de leurs évolutions dans le futur.</p><h3 id=\"conseil-de-migration%3A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conseil-de-migration%3A-1\">#</a> Conseil de migration:</h3><p>Comme Vue 3 est une autre librairie réactive moderne, la migration devrait être familière. Les composants de Solid ressemble beaucoup à un marquage à la fin de Vue fonction <code>setup</code>. Faites attention à ne pas trop enrober vos dérivations d’état avec des calculs, essayer plutôt d’utiliser des fonctions. La réactivité est persuasive. Les proxies dans Solid sont intentionnellement en lecture seule. Ne jugez pas avant d’avoir essayé !</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte est le pionnier de l’approche pré-compilé qui permet au framework de disparaître, la même approche que Solid emploi de manière plus ou moins extensible. Les deux librairies sont vraiment réactives et peuvent produire de petit bundle de code d’exécution même si Svelte est le gagnant quand il s’agit de petite démo. Solid demande un peu plus d’explicité dans ses déclarations, se reposant moins sur l’analyse implicite du compilateur, mais cela fait partie des raisons qui permet les performances supérieures de Solid. Solid garde aussi plus de code d’exécution, ce qui permet de meilleure performance dans de larges applications. La démo RealWorld est 25 % plus petite que celle de Svelte.</p><p>Les deux librairies visent à aider les développeurs à écrire moins de code, mais avec une approche totalement différente. Svelte 3 se concentre sur l’optimisation de la facilité à des changements locaux en se concentrant sur des objets d’interaction simple et une liaison de données bidirectionnelle. Alors que Solid se concentre sur les flux de données en utilisant délibérément une approche CQRS et une interface immuable. Avec une composition de template fonctionnelle, dans beaucoup de cas, Solid permet aux développeurs d’écrire encore moins de code que Svelte même si la syntaxe de template de Svelte est définitivement plus compact.</p><h3 id=\"conseil-de-migration%3A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conseil-de-migration%3A-2\">#</a> Conseil de migration:</h3><p>L’expérience développeur est assez différente, bien que les choses soient analogues, c’est une expérience différente. Les composants dans Solid sont assez peu coûteux, donc n’ayez pas peur d’en avoir plus si besoin.</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>Cette librairie doit son existence à Knockout. La modernisation de son modèle pour la détection de dépendance était la motivation de ce projet. Knockout a été publié en 2010 et supportait Microsoft Explorer jusqu’à IE6, bien que Solid ne supporte pas du tout IE.</p><p>Les liaisons de données de Knockout ne sont que des chaînes de caractères dans le HTML et qui sont lu lors de l’exécution. Elles se reposent sur un système de clonage de contexte ($parent, etc.). Alors que Solid utilise JSX ou un système de Tagged Template Literals pour son système de templating en se reposant sur l’API JavaScript.</p><p>La plus grosse différence est que l’approche de Solid groupe les changements pour s’assurer de la synchronicité alors que Knockout possède <code>deferUpdates</code> qui utilise un report de microtask dans la queue.</p><h3 id=\"conseil-de-migration%3A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conseil-de-migration%3A-3\">#</a> Conseil de migration:</h3><p>Si vous avez utilisé Knockout, les primitives de Solid pourrait paraître étrange de prime abord. La séparation de la lecture et de l’écriture est intentionnelle et n’est pas là pour vous rendre la vie plus difficile. Essayer d’adopter une manière de réfléchir au Flux avec des state/action. Même si la librairie a l’air similaire, elles promouvaient différentes bonnes pratiques.</p><h2 id=\"lit-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%26-lighterhtml\">#</a> Lit &amp; LighterHTML</h2><p>Ces librairies sont incroyablement similaires et ont eu une influence sur Solid. En majorité, car le code compilé généré par Solid utilise une méthode très similaire pour initialiser de manière performante le rendu du DOM. Cloner les éléments du template et utiliser des commentaires placeholders est un des points commun que Solid et ses librairies partagent.</p><p>La plus grosse différence est que bien que ces librairies n’utilise pas de Virtual DOM, elles traitent le rendu de la même manière, du haut vers le bas, en ayant besoin de partitionner les composants pour les rendre gérable. Alors que Solid utilise une approche de Graphique Réactif détaillée qui ne met à jour ce qui a été changé et partage ainsi cette technique avec pour le rendu initial. Cette approche tire avantage de la vitesse du rendu initial seulement disponible aux éléments natifs du DOM et est l’approche la plus performante pour les mises à jour.</p><h3 id=\"conseil-de-migration%3A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conseil-de-migration%3A-4\">#</a> Conseil de migration:</h3><p>Ces librairies sont très minimales et facile à utiliser. Cependant, garder en tête que <code>&lt;Comp/&gt;</code> n’est pas juste un HTMLElement (tableau ou fonction). Essayer de garder votre code dans le template JSX. Le hoisting fonctionne pour la majeure partie, mais il est préférable de penser à celui-ci en tant que librairie de rendue et pas un factory de HTMLElement.</p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>Cette librairie a eut la plus grosse influence sur le design du système de réactivité de Solid. Solid a utilisé S.js en interne pendant quelques années avant de diverger. S.js est une des librairies réactive le plus efficace à ce jour. Elle modélise tout sur des étapes en temps synchrone similaire à un circuit numérique et s’assure de la cohérence sans avoir à utiliser de mécanisme plus complexe que l’on peut retrouver dans MobX. Le système de réactivité de Solid est une sorte d’hybride entre S et MobX. Cela lui donne de meilleure performance que la plupart des librairies réactivent (Knockout, MobX, Vue) tout en gardant un modèle mental facile pour les développeurs. Finalement, S.js reste toujours la librairie de réactivité la plus performante même si la différence est presque imperceptible dans la grande majorité des cas.</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS est une librairie réactive. Même si Solid a une idée similaire des données Observable, son application du pattern Observer est très différent. Les Signaux sont comme de simple version d’un Observable (seulement le <code>next</code>), le pattern de détection automatique de dépendance supplante les centaines d’opérateurs de RxJS. Solid aurait pu adopter cette approche, et à d’ailleurs inclut des opérateurs similaires dans une version antérieure, mais dans la plupart des cas, il est plus simple d’écrire vos propres logiques de transformation dans un calcul. Là où les Observables sont démarrés à froid, monodiffusion et basé sur les push, beaucoup de problème sur le client se prête plutôt à un démarrage à chaud et ont besoin d’être multidiffusion ce qui est exactement le fonctionnement par défaut de Solid.</p><h2 id=\"autres\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#autres\">#</a> Autres</h2><p>Angular et d’autres librairies populaires sont absent dans cette comparaison dû à un manque d’expérience avec ces librairies qui ne permet pas de faire une comparaison adéquate. Généralement, Solid a très peu en commun avec les frameworks plus large et il est beaucoup plus dur de les comparer.</p></section><section class=\"mt-10\"><h1 id=\"faq\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#faq\">#</a> FAQ</h1><h3 id=\"1.-jsx-sans-vdom-%3F-est-ce-que-cela-n%E2%80%99est-pas-juste-un-concept-%3F-j%E2%80%99ai-entendu-des-personnalit%C3%A9s-comme-des-auteurs-d%E2%80%99autres-frameworks-dire-que-c%E2%80%99%C3%A9tait-impossible.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-jsx-sans-vdom-%3F-est-ce-que-cela-n%E2%80%99est-pas-juste-un-concept-%3F-j%E2%80%99ai-entendu-des-personnalit%C3%A9s-comme-des-auteurs-d%E2%80%99autres-frameworks-dire-que-c%E2%80%99%C3%A9tait-impossible.\">#</a> 1. JSX sans VDOM ? Est-ce que cela n’est pas juste un concept ? J’ai entendu des personnalités comme des auteurs d’autres frameworks dire que c’était impossible.</h3><p>C’est possible quand nous n’utilisons pas le modèle de mise à jour de React. JSX est un Template DSL comme les autres. Juste un qui est plus flexible sur certains points. Insérer du JavaScript de manière arbitraire peut être un vrai challenge dans certains cas, mais n’est pas différent de supporté les opérateurs spread. Donc non, ce n’est pas juste un concept, mais une approche qui a été prouvé d’être l’un des plus performants.</p><p>Le vrai atout vient de l’extensibilité possible. Vous avez le compilateur qui travail pour vous en vous donnant des mises à jour du DOM natifs optimaux, mais vous avez toute la liberté d’une librairie comme React pour écrire des composants en utilisant des techniques de props de rendu et des composants d'ordre supérieur en complément de vos &quot;hooks&quot; réactifs. Vous n’aimez pas le flux de contrôle de Solid ? Écrivez-les vous-même.</p><h3 id=\"2.-comment-se-fait-il-que-solid-soit-aussi-performant-%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-comment-se-fait-il-que-solid-soit-aussi-performant-%3F\">#</a> 2. Comment se fait-il que Solid soit aussi performant ?</h3><p>Nous aurions aimé pouvoir donner une seule raison, mais la réalité est que cela vient surtout d’une combinaison de plusieurs décisions de design importantes :</p><ol> <li>Réactivité explicite pour que seulement les choses qui ont besoin d’être réactive soit traqué.</li> <li>Compile avec la création initiale en tête. Solid utilise un processus heuristique pour réduire la granularité et réduire ainsi le nombre de calculs fait tout en gardant les mises à jour clés flexible et performante.</li> <li>Les expressions réactives sont juste des fonctions. Cela permet d'avoir des composants qui &quot;disparaissent&quot; avec des évaluations faignante de prop qui retire l’enrobage inutile synchronisation non utilisé.</li> </ol><p>Ce sont actuellement ces techniques uniques combinés qui donne à Solid un avantage par rapport à la compétition.</p><h3 id=\"3.-est-ce-qu%E2%80%99il-y-a-un-react-compat-%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-est-ce-qu%E2%80%99il-y-a-un-react-compat-%3F\">#</a> 3. Est-ce qu’il y a un React-Compat ?</h3><p>Non. Et il se pourrait qu’il n’y en aura jamais. Bien que l’API soit similaire et les composants peuvent souvent être converti avec des ajustements mineurs, le système de mise à jour est fondamentalement différent. Les composants de React s’exécute encore et encore donc le code en dehors de Hooks fonctionnent très différemment. Les closures et les règles de hook ne sont pas seulement inutile, mais elles peuvent être utilisées d’une manière qui ne fonctionne pas dans notre cas.</p><p>D’autre part, Vue-compat est complètement faisable. Même s’il n’y a pas de plan de l’implémenter actuellement.</p><h3 id=\"4.-pourquoi-la-d%C3%A9structuration-ne-fonctionne-pas-%3F-je-comprends-que-je-peux-r%C3%A9gler-le-probl%C3%A8me-en-enrobant-un-composant-entier-dans-une-fonction.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-pourquoi-la-d%C3%A9structuration-ne-fonctionne-pas-%3F-je-comprends-que-je-peux-r%C3%A9gler-le-probl%C3%A8me-en-enrobant-un-composant-entier-dans-une-fonction.\">#</a> 4. Pourquoi la déstructuration ne fonctionne pas ? Je comprends que je peux régler le problème en enrobant un composant entier dans une fonction.</h3><p>La réactivité s’exécute lors de l’accès d’une propriété sur les objets Prop et Store. Les référencés en dehors de cette association ou d’un calcul réactif ne permet pas de les traqués. La déstructuration est parfaitement supportée à l’intérieur.</p><p>Cependant, enrobé un composant entier dans une fonction n’est pas ce que l’on voudrait faire sans réfléchir. Solid n’a pas de VDOM. Donc n’importe quel changement traqué va réexécuter la fonction entière en recréant tout son contenu. Ne faites pas ça.</p><h3 id=\"5.-pouvez-vous-ajouter-les-composants-classe-%3F-je-trouve-que-le-cycle-de-vie-sont-plus-facile-%C3%A0-comprendre\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-pouvez-vous-ajouter-les-composants-classe-%3F-je-trouve-que-le-cycle-de-vie-sont-plus-facile-%C3%A0-comprendre\">#</a> 5. Pouvez-vous ajouter les composants classe ? Je trouve que le cycle de vie sont plus facile à comprendre</h3><p>Nous n’avons aucune intention d’ajouter les composants classe. Le cycle de vie de Solid est lié à la planification de son système réactive et est artificielle. Théoriquement, vous pouvez créer des classes en dehors de ce système, mais l’efficacité de tout le code qui n’est pas une gestion d’évènements est basiquement exécuté dans le constructeur, en incluant une fonction de rendue. Cela représente juste plus de syntaxe pour moins de contrôle.</p><p>Groupez vos données et leurs comportements ensemble plutôt que dans le cycle de vie. C’est une bonne pratiquée du système de réactivité qui a fonctionné depuis plusieurs décennies.</p><h3 id=\"6.-je-d%C3%A9teste-vraiment-jsx%2C-puis-je-utilise-un-template-dsl-%3F-ah%2C-je-vois-que-les-tagged-template-literals%2Fhyperscript-sont-support%C3%A9.-peut-%C3%AAtre-que-j%E2%80%99utiliserai-cela...\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-je-d%C3%A9teste-vraiment-jsx%2C-puis-je-utilise-un-template-dsl-%3F-ah%2C-je-vois-que-les-tagged-template-literals%2Fhyperscript-sont-support%C3%A9.-peut-%C3%AAtre-que-j%E2%80%99utiliserai-cela...\">#</a> 6. Je déteste vraiment JSX, puis-je utilise un Template DSL ? Ah, je vois que les Tagged Template Literals/HyperScript sont supporté. Peut-être que j’utiliserai cela...</h3><p>Stop, arrêtez-vous tout de suite. Nous utilisons JSX de la même manière que Svelte utilise son template, pour créer des instructions de DOM optimales. Les Tagged Template Literals et HyperScript peuvent être impressionnante de leur propre façon, mais sauf si vous avez de vraie raison comme la contrainte de ne pas utiliser de build, les Tagged Template Literals et HyperScript son inférieur en tout point. Des bundles plus grand, des performances plus lentes et un besoin de manuellement enrober les valeurs avec des solutions de contournement.</p><p>C’est bien d’avoir des options, mais le JSX de Solid est vraiment la meilleure solution dans notre cas. Un Template DSL serait super aussi, quoique plus restrictif, mais JSX nous donne tellement sans effort supplémentaire. TypeScript, Parsers existant, coloration syntaxique, TypeScript, Prettier, complétion de code et le meilleur pour la fin, TypeScript.</p><p>Les autres librairies ont ajouté le support pour ses fonctionnalités, mais cela représente un effort considérable et est encore imparfait et un problème constant de maintenance. C’est vraiment prendre une position pragmatique.</p><h3 id=\"7.-quand-j'utilise-un-signal-au-lieu-d%E2%80%99un-store-%3F-pourquoi-la-diff%C3%A9rence-%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-quand-j'utilise-un-signal-au-lieu-d%E2%80%99un-store-%3F-pourquoi-la-diff%C3%A9rence-%3F\">#</a> 7. Quand j'utilise un Signal au lieu d’un Store ? Pourquoi la différence ?</h3><p>Les Stores enrobent automatiquement les valeurs imbriquées les rendant idéal pour des structures de données imbriquées, et pour des choses comme des modèles. Pour la plupart des autres cas, les Signaux sont légers et font le travail à la perfection.</p><p>Autant, nous aurions aimé les fusionner, mais il est impossible de proxy une primitive. Les fonctions sont l’interface la plus simple et n’importe quelle expression réactive (incluant l’accès au state) peuvent être enrobé dans une fonction ce qui fourni un APi universelle. Vous pouvez nommer vos signaux et vos états comme bon vous semble et ils resteront minimales. La dernière chose que nous voulons est de vous forcer à écrire <code>.get()</code>, <code>.set()</code> ou encore pire <code>.value</code>. Au moins, le premier peut être alias pour être plus bref, alors que le dernier est juste la forme le moins compact d’appeler une fonction.</p><h3 id=\"8.-pourquoi-je-ne-peux-pas-assigner-une-valeur-au-store-de-solid-comme-je-peux-dans-vue%2C-svelte-ou-mobx-%3F-o%C3%B9-est-la-liaison-de-donn%C3%A9es-bidirectionnelle-%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.-pourquoi-je-ne-peux-pas-assigner-une-valeur-au-store-de-solid-comme-je-peux-dans-vue%2C-svelte-ou-mobx-%3F-o%C3%B9-est-la-liaison-de-donn%C3%A9es-bidirectionnelle-%3F\">#</a> 8. Pourquoi je ne peux pas assigner une valeur au Store de Solid comme je peux dans Vue, Svelte ou MobX ? Où est la liaison de données bidirectionnelle ?</h3><p>La réactivité est un outil très puissant, mais aussi très dangereux. MobX le sait et introduit un mode Strict et les Actions pour limiter où/quand la mise à jour se fait. Solid gère ce problème avec un arbre entier de données de composant, cela devient apparent que nous pouvons tirer quelques leçons de React. Vous n’avez pas besoin de vraiment être immuable tant que vous fournissez une façon d’avoir le même contrat.</p><p>Être capable de donner la possibilité de mettre à jour le state est beaucoup plus important que de décider de passer un state. Donc, être capable de les séparer est important et seulement possible si la lecture est immuable. Nous n’avons aussi pas besoin de payer le coût de l’immuabilité si nous pouvons encore mise à jour de manière précise. Heureusement, il existe des tonnes d’options venant d’anciennes solutions comme ImmutableJS et Immer. Ironiquement, Solid agit globalement comme un Immer inversé avec ses mutables en interne et son interface immuable.</p><h3 id=\"9.-puis-je-utiliser-le-syst%C3%A8me-de-r%C3%A9activit%C3%A9-de-solid-tout-seul-%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-puis-je-utiliser-le-syst%C3%A8me-de-r%C3%A9activit%C3%A9-de-solid-tout-seul-%3F\">#</a> 9. Puis-je utiliser le système de réactivité de Solid tout seul ?</h3><p>Bien sûr. Bien que nous n’avons pas exporté un package séparé, il est totalement possible d’installer Solid sans le compilateur et juste utiliser les primitives réactives. Un des avantages de la réactivité granulaire est que ce n’est pas dépendant d’une librairie. Pour cela, presque toutes les librairies réactives fonctionne de la même cette manière. C’est cela qui a inspiré <a href=\"https://github.com/solidjs/solid\">Solid</a> et sa librairie sous-jacente, <a href=\"https://github.com/ryansolid/dom-expressions\">librairie DOM Expressions</a>, de faire un rendu purement basé sur le système de réactivité.</p><p>Pour lister quelques essaies: <a href=\"https://github.com/solidjs/solid\">Solid</a>, <a href=\"https://github.com/mobxjs/mobx\">MobX</a>, <a href=\"https://github.com/knockout/knockout\">Knockout</a>, <a href=\"https://github.com/sveltejs/svelte\">Svelte</a>, <a href=\"https://github.com/adamhaile/S\">S.js</a>, <a href=\"https://github.com/Riim/cellx\">CellX</a>, <a href=\"https://github.com/ds300/derivablejs\">Derivable</a>, <a href=\"https://github.com/luwes/sinuous\">Sinuous</a>, et même récemment <a href=\"https://github.com/vuejs/vue\">Vue</a>. Bien plus est requise dans une librairie réactive que de le marquer dans le moteur de rendu comme, <a href=\"https://github.com/Polymer/lit-html\">lit-html</a> par exemple.</p><h3 id=\"10.-est-ce-que-solid-a-un-%C3%A9quivalent-des-librairies-next.js-ou-material-components-que-je-peux-utiliser-%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-est-ce-que-solid-a-un-%C3%A9quivalent-des-librairies-next.js-ou-material-components-que-je-peux-utiliser-%3F\">#</a> 10. Est-ce que Solid a un équivalent des librairies Next.js ou Material Components que je peux utiliser ?</h3><p>Pas à ce que l’on sache. Si vous êtes intéressé d’en construire une, nous sommes disponibles sur notre <a href=\"https://discord.com/invite/solidjs\">Discord</a> pour vous aider. Nous avons les fondamentaux et avons juste besoin de les construire.</p></section>"
}