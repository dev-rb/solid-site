{
  "sections": [
    {
      "slug": "r%C3%A9activit%C3%A9-basique",
      "title": "Réactivité basique",
      "level": 1,
      "children": [
        {
          "slug": "createsignal",
          "title": "createSignal",
          "level": 2,
          "children": []
        },
        {
          "slug": "createeffect",
          "title": "createEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "creatememo",
          "title": "createMemo",
          "level": 2,
          "children": []
        },
        {
          "slug": "createresource",
          "title": "createResource",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "cycles-de-vie",
      "title": "Cycles de vie",
      "level": 1,
      "children": [
        {
          "slug": "onmount",
          "title": "onMount",
          "level": 2,
          "children": []
        },
        {
          "slug": "oncleanup",
          "title": "onCleanup",
          "level": 2,
          "children": []
        },
        {
          "slug": "onerror",
          "title": "onError",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "utilitaires-r%C3%A9actifs",
      "title": "Utilitaires réactifs",
      "level": 1,
      "children": [
        {
          "slug": "untrack",
          "title": "untrack",
          "level": 2,
          "children": []
        },
        {
          "slug": "batch",
          "title": "batch",
          "level": 2,
          "children": []
        },
        {
          "slug": "on",
          "title": "on",
          "level": 2,
          "children": []
        },
        {
          "slug": "createroot",
          "title": "createRoot",
          "level": 2,
          "children": []
        },
        {
          "slug": "mergeprops",
          "title": "mergeProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "splitprops",
          "title": "splitProps",
          "level": 2,
          "children": []
        },
        {
          "slug": "usetransition",
          "title": "useTransition",
          "level": 2,
          "children": []
        },
        {
          "slug": "observable",
          "title": "observable",
          "level": 2,
          "children": []
        },
        {
          "slug": "maparray",
          "title": "mapArray",
          "level": 2,
          "children": []
        },
        {
          "slug": "indexarray",
          "title": "indexArray",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "stores",
      "title": "Stores",
      "level": 1,
      "children": [
        {
          "slug": "createstore",
          "title": "createStore",
          "level": 2,
          "children": [
            {
              "slug": "getters",
              "title": "Getters",
              "level": 3,
              "children": []
            },
            {
              "slug": "updating-stores",
              "title": "Updating Stores",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "produce",
          "title": "produce",
          "level": 2,
          "children": []
        },
        {
          "slug": "reconcile",
          "title": "reconcile",
          "level": 2,
          "children": []
        },
        {
          "slug": "createmutable",
          "title": "createMutable",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "apis-de-composant",
      "title": "APIs de Composant",
      "level": 1,
      "children": [
        {
          "slug": "createcontext",
          "title": "createContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "usecontext",
          "title": "useContext",
          "level": 2,
          "children": []
        },
        {
          "slug": "children",
          "title": "children",
          "level": 2,
          "children": []
        },
        {
          "slug": "lazy",
          "title": "lazy",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "primitives-secondaires",
      "title": "Primitives secondaires",
      "level": 1,
      "children": [
        {
          "slug": "createdeferred",
          "title": "createDeferred",
          "level": 2,
          "children": []
        },
        {
          "slug": "createcomputed",
          "title": "createComputed",
          "level": 2,
          "children": []
        },
        {
          "slug": "createrendereffect",
          "title": "createRenderEffect",
          "level": 2,
          "children": []
        },
        {
          "slug": "createselector",
          "title": "createSelector",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "rendering",
      "title": "Rendering",
      "level": 1,
      "children": []
    },
    {
      "slug": "rendu",
      "title": "Rendu",
      "level": 1,
      "children": [
        {
          "slug": "render",
          "title": "render",
          "level": 2,
          "children": []
        },
        {
          "slug": "hydrate",
          "title": "hydrate",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostring",
          "title": "renderToString",
          "level": 2,
          "children": []
        },
        {
          "slug": "rendertostringasync",
          "title": "renderToStringAsync",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetonodewritable",
          "title": "pipeToNodeWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "pipetowritable",
          "title": "pipeToWritable",
          "level": 2,
          "children": []
        },
        {
          "slug": "isserver",
          "title": "isServer",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "control-flow",
      "title": "Control Flow",
      "level": 1,
      "children": [
        {
          "slug": "%3Cfor%3E",
          "title": "<For>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cshow%3E",
          "title": "<Show>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cswitch%3E%2F%3Cmatch%3E",
          "title": "<Switch>/<Match>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cindex%3E",
          "title": "<Index>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cerrorboundary%3E",
          "title": "<ErrorBoundary>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspense%3E",
          "title": "<Suspense>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Csuspenselist%3E-(exp%C3%A9rimental)",
          "title": "<SuspenseList> (Expérimental)",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cdynamic%3E",
          "title": "<Dynamic>",
          "level": 2,
          "children": []
        },
        {
          "slug": "%3Cportal%3E",
          "title": "<Portal>",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "attributs-jsx-sp%C3%A9ciaux",
      "title": "Attributs JSX spéciaux",
      "level": 1,
      "children": [
        {
          "slug": "ref",
          "title": "ref",
          "level": 2,
          "children": []
        },
        {
          "slug": "classlist",
          "title": "classList",
          "level": 2,
          "children": []
        },
        {
          "slug": "style",
          "title": "style",
          "level": 2,
          "children": []
        },
        {
          "slug": "innerhtml%2Ftextcontent",
          "title": "innerHTML/textContent",
          "level": 2,
          "children": []
        },
        {
          "slug": "on___",
          "title": "on___",
          "level": 2,
          "children": []
        },
        {
          "slug": "on%3A___%2Foncapture%3A___",
          "title": "on:___/oncapture:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "use%3A___",
          "title": "use:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "prop%3A___",
          "title": "prop:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "attr%3A___",
          "title": "attr:___",
          "level": 2,
          "children": []
        },
        {
          "slug": "%2F*-%40once-*%2F",
          "title": "/* @once */",
          "level": 2,
          "children": []
        }
      ]
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"r%C3%A9activit%C3%A9-basique\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#r%C3%A9activit%C3%A9-basique\">#</a> Réactivité basique</h1><h2 id=\"createsignal\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createsignal\">#</a> <code>createSignal</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>C'est la primitive réactive la plus basique utilisée pour surveiller une seule valeur qui change dans le temps. La fonction de création retourne une paire de fonctions, une pour la lecture de la valeur et l'autre pour mettre à jour le signal.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// lecture de la valeur</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// met à jour la valeur</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(nextValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// met à jour une valeur avec une fonction incluant la valeur précédente</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> prev </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> next);</span></span>\n<span class=\"line\"></span></code></pre><p>N'oubliez pas d'accéder aux signaux sous une portée surveillée si vous souhaitez qu'elles soient réactives à la mise à jour. Les portées surveillées sont des fonctions qui sont passées à des évaluations comme <code>createEffect</code> ou des expressions JSX.</p><blockquote> <p>Si vous souhaitez stocker une fonction dans un Signal, vous devez utiliser la forme suivante :</p> <pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> myFunction);</span></span>\n<span class=\"line\"></span></code></pre> </blockquote><h2 id=\"createeffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createeffect\">#</a> <code>createEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Créer un nouveau calcul qui va automatiquement surveiller ses dépendances et s'exécuter après chaque rendu où les dépendances ont été changées. Ceci est idéal pour l'utilisation de <code>ref</code>s et la gestion d'autres effets secondaires.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">a</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setA</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// L&#39;effet va dépendre du signal `a`</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">doSideEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>La fonction effet est appelée avec la valeur retournée par la dernière exécution de la fonction passée en argument. Cette valeur peut être initialisée en tant que 2ème argument optionnel. Cela peut être utile lors de comparaison sans créer une fonction supplémentaire.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (sum </span><span style=\"color:#d73a49\">!==</span><span style=\"color:#24292e\"> prev) console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(sum);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> sum;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"creatememo\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#creatememo\">#</a> <code>createMemo</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">) }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Créer une valeur dérivée d'un signal qui ne peut pas être modifié directement, elle recalcule sa valeur lorsque les dépendances du code sont mise à jour.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">getValue</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">computeExpensiveValue</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">(), </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// lecture de la valeur</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">getValue</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p>La fonction mémo est appelée avec une valeur retournée depuis la dernière exécution de la fonction mémo. Cette valeur peut être initialisée optionnellement en tant que 2ème argument. Cela est utile pour réduire le nombre de calculs.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sum</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">input</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> prev, </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createresource\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createresource\">#</a> <code>createResource</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">loading</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">error</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fetcher</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">getPrev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">initialValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ResourceReturn</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Créer un signal qui peut gérer des requêtes asynchrones. <code>fetcher</code> est une fonction asynchrone qui accepte une valeur retournée par la <code>source</code> si elle est fournie et qu'elle retourne une Promesse dont la valeur renvoyée est stockée dans la ressource. La fonction de récupération (fetcher) n'est pas réactive, donc utilisez le premier argument optionnel si vous voulez l'exécuter plus d'une fois. Si la source retourne une valeur <code>false</code>, <code>null</code> ou <code>undefined</code> alors elle ne sera pas récupérée.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">data</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">mutate</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">refetch</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createResource</span><span style=\"color:#24292e\">(getQuery, fetchData);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// lire la valeur</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">data</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// vérifier si la valeur est en chargement</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.loading;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// vérifier si des erreurs sont apparues lors de la récupération</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">data.error;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// directly set value without creating promise</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// met à jour la valeur sans créer de promesse</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">mutate</span><span style=\"color:#24292e\">(optimisticValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// réexécute la requête pour certain cas</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">refetch</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span></code></pre><p><code>loading</code> et <code>error</code> sont des propriétés réactives qui peuvent être surveillées.</p><h1 id=\"cycles-de-vie\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#cycles-de-vie\">#</a> Cycles de vie</h1><h2 id=\"onmount\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onmount\">#</a> <code>onMount</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Programme une méthode qui va s'exécuter après le rendu initial et que les éléments soient monté. C'est idéal pour utiliser des <code>ref</code>s et gérer d'autres effets secondaires qui ne doivent s'exécuter qu'une seule fois. C'est l'équivalent de <code>createEffect</code> sans dépendances.</p><h2 id=\"oncleanup\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#oncleanup\">#</a> <code>onCleanup</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Programme une méthode de nettoyage qui s'exécute à la destruction ou recalcule de la portée réactive actuelle. Peut être utilisé dans n'importe quel Composant ou Effet.</p><h2 id=\"onerror\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#onerror\">#</a> <code>onError</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">onError</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Programme une méthode de gestion d'erreur qui va s'exécuter lorsque la portée enfant lève une erreur. Seulement la portée la plus proche de l'erreur va exécuter sa fonction de gestion d'erreur. Si une erreur se reproduit, la fonction se réexécute.</p><h1 id=\"utilitaires-r%C3%A9actifs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#utilitaires-r%C3%A9actifs\">#</a> Utilitaires réactifs</h1><p>Ce sont des fonctions d'aide qui permettent de mieux gérer la planification des mises à jour et de contrôler comment la réactivité est gérée.</p><h2 id=\"untrack\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#untrack\">#</a> <code>untrack</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Ignore le suivi des dépendances dans le bloc de code exécuté et retourne la valeur.</p><h2 id=\"batch\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#batch\">#</a> <code>batch</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">batch</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Groupe les mises à jour dans le bloc jusqu'à la fin pour éviter des calculs inutiles. Cela veut dire que la lecture des valeurs dans les lignes suivantes ne seront pas à jour. Les <a href=\"https://www.solidjs.com/docs/latest/api#createstore\">Stores de Solid</a> utilise cette méthode pour affecter des valeurs et les Effets enrobent automatiquement leur code dans un <code>batch</code>.</p><h2 id=\"on\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on\">#</a> <code>on</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> (() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">), </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">deps</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevInput</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">defer</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">prevValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>on</code> est fait pour passer dans une fonction de calcul qui va rendre ses dépendances explicites. Si un tableau de dépendances est passé, <code>input</code> et <code>prevInput</code> sont des tableaux.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">())));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// est l&#39;équivalent de:</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">v</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">a</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v, </span><span style=\"color:#6f42c1\">b</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>Vous pouvez aussi ne pas exécuter le calcul immédiatement et à la place choisir de l'exécuter au changement en passant l'option de <code>defer: true</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Ne s&#39;exécute pas immédiatement</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">on</span><span style=\"color:#24292e\">(a, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v), { defer: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setA</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;new&quot;</span><span style=\"color:#24292e\">); </span><span style=\"color:#6a737d\">// Maintenant elle s&#39;exécute</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createroot\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createroot\">#</a> <code>createRoot</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRoot</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">dispose</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Créer un nouveau contexte qui ne sera pas surveillé et qui ne se détruira pas automatiquement. C'est utile pour les contextes réactifs imbriqués que vous ne voulez pas détruire lorsque le parent se réévalue. C'est un pattern puissant pour mettre en cache des données.</p><p>Tous les projets Solid devraient être enrobés de cette fonction à haut niveau pour s'assurer que toute la mémoire/calcul soit libérée. Normalement, vous n'avez à vous soucier de ceci, car <code>createRoot</code> est embarqué dans la fonction d'entrée <code>render</code>.</p><h2 id=\"mergeprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#mergeprops\">#</a> <code>mergeProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">sources</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Une méthode <code>merge</code> qui va fusionner des objets réactifs. C'est utile pour associer des valeurs par défaut aux props de composants dans le cas où le parent ne les fournit pas. Ou cloner l'objet props en incluant des propriétés réactives.</p><p>Cette méthode fonctionne en utilisant les proxies et associant les propriétés dans l'ordre inverse. Cela permet de dynamiquement surveiller les propriétés qui ne sont pas présentes quand l'objet prop est fusionné la première fois.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// props par défault</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// cloner l&#39;objet props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">newProps </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// fusionner l&#39;objet props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"splitprops\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#splitprops\">#</a> <code>splitProps</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">keys</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Array</span><span style=\"color:#24292e\">&lt;(</span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)[]&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#e36209\">parts</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Partial</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p>C'est un remplacement de la déstructuration. Elle va séparer un objet réactif par une liste de clés pour maintenir la réactivité.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;children&quot;</span><span style=\"color:#24292e\">]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">Child {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#e36209\">div</span><span style=\"color:#24292e\">&gt;{local.children}</span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;/&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"usetransition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usetransition\">#</a> <code>useTransition</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">()</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  (</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">cb</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"></span></code></pre><p>Utilisé pour grouper les mises à jour asynchrones dans une transition qui va reporter les changements jusqu'à ce que tous les processus asynchrones soient complétés. Ceci est lié au Suspense et surveille seulement les ressources lues dans les limites des Suspenses.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">isPending</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">start</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useTransition</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Vérifie si entrain de transitionner.</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">isPending</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Enrobe dans une transition</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">start</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setSignal</span><span style=\"color:#24292e\">(newValue), () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/* la transition est terminée */</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"observable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#observable\">#</a> <code>observable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#6f42c1\">input</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Observable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Cette méthode prend un signal et produit un simple objet Observable. Vous pouvez l'utiliser avec une librairie Observable de votre choix typiquement avec l'opérateur <code>from</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { from } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;rxjs&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">s</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">set</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">obsv$</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">from</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">observable</span><span style=\"color:#24292e\">(s));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">obsv$.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">v</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(v));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"maparray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#maparray\">#</a> <code>mapArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Fonction d'aide d'association réactive qui va mettre en cache chaque élément par référence pour réduire les associations inutiles lors de mise à jour. Elle ne va exécuter la fonction d'association qu'une fois par valeur et va la déplacer ou supprimer en fonction du besoin. L'argument index est un signal. La fonction d'association elle-même n'est pas surveillée.</p><p>Cette fonction d'aide est utilisée pour le contrôle de flux avec <code>&lt;For /&gt;</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mapArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.name);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">description</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setDescription</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(model.description);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    id: model.id,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">name</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">description</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setName,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    setDescription</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"indexarray\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#indexarray\">#</a> <code>indexArray</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[],</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">mapFn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">i</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Similaire à <code>mapArray</code> sauf qu'elle associe par index. L'élément est un signal et l'index est maintenant une constante.</p><p>Cette fonction d'aide est utilisée pour le contrôle de flux avec <code>&lt;Index /&gt;</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mapped</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">indexArray</span><span style=\"color:#24292e\">(source, (</span><span style=\"color:#e36209\">model</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">id</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().id</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">firstInitial</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">().firstName[</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">model</span><span style=\"color:#032f62\">().</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"stores\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#stores\">#</a> Stores</h1><p>Ces APIs sont disponibles sous <code>solid-js/store</code>.</p><h2 id=\"createstore\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createstore\">#</a> <code>createStore</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [</span><span style=\"color:#e36209\">get</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;, </span><span style=\"color:#e36209\">set</span><span style=\"color:#24292e\">: </span><span style=\"color:#e36209\">SetStoreFunction</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;];</span></span>\n<span class=\"line\"></span></code></pre><p>Cette fonction va créer un arbre de Signaux en tant que proxy pour permettre des valeurs individuelles dans une structure de données imbriquées d'être indépendamment surveillé. La fonction de création retourne un objet proxy en lecture seule et une fonction de mise à jour.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Lis une valeur</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// met à jour une valeur</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ merge: </span><span style=\"color:#032f62\">&quot;thisValue&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;path&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;to&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&quot;value&quot;</span><span style=\"color:#24292e\">, newValue);</span></span>\n<span class=\"line\"></span></code></pre><p>Les objets Store sont des proxies qui sont surveillés seulement sur l'accès aux propriétés. Et à l'accès, les Stores produisent récursivement des objets Store imbriqués sur les données imbriquées. Cependant, ça ne peut enrober que des tableaux et de simples objets. Les classes ne sont pas enrobées. Donc les <code>Date</code>, <code>HTMLElement</code>, <code>RegExp</code>, <code>Map</code>, <code>Set</code> ne sont pas réactifs. De plus, les objets de haut niveau ne peuvent pas être surveillés sans accéder à une de leurs propriétés. Donc il ne convient pas de les utiliser pour des éléments sur lesquels on va itérer, car l'ajout de nouvelles clés ou d'index ne va pas engendrer une mise à jour. Donc mettez vos listes dans une clé de votre état au lieu d'essayer d'utiliser l'objet état directement.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// mettez la liste dans une clé sur l&#39;objet store</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ list: [] });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// accéder à la propriété `list` sur l&#39;objet état</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6a737d\">/*...*/</span><span style=\"color:#24292e\">}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"getters\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#getters\">#</a> Getters</h3><p>Les objets Store supportent l'utilisation d'accesseur pour calculer des valeurs.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><p>Ce sont de simples accesseurs, donc vous avez besoin d'utiliser Mémo si vous souhaitez garder en cache la valeur ;</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> fullName;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  user: {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">fullName </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">user</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">user</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h3 id=\"updating-stores\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#updating-stores\">#</a> Updating Stores</h3><p>Les changements peuvent prendre la forme de fonction qui passe en paramètre la valeur de l'état précédent et retourne un nouvel état ou une valeur. Les objets sont toujours superficiellement fusionnés. Affecter une valeur <code>undefined</code> pour les supprimer du Store.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  lastName: </span><span style=\"color:#032f62\">&quot;Miller&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">({ firstName: </span><span style=\"color:#032f62\">&quot;Johnny&quot;</span><span style=\"color:#24292e\">, middleName: </span><span style=\"color:#032f62\">&quot;Lee&quot;</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Miller&#39; })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">state</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ preferredName: state.firstName, lastName: </span><span style=\"color:#032f62\">&quot;Milner&quot;</span><span style=\"color:#24292e\"> }));</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// ({ firstName: &#39;Johnny&#39;, preferredName: &#39;Johnny&#39;, middleName: &#39;Lee&#39;, lastName: &#39;Milner&#39; })</span></span>\n<span class=\"line\"></span></code></pre><p>Il est possible d'utiliser des chemins en utilisant les clés des tableaux, un rayon d'objet et des fonctions de filtrage.</p><p><code>setState</code> supporte aussi les options imbriquées où vous pouvez indiquer le chemin du changement. L'état que vous voulez mettre à jour peut être d'autres valeurs qui ne sont pas des objets. Les objets sont fusionnés, mais les autres valeurs (tableaux inclus) sont remplacées.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  counter: </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  list: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">23</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Birds&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { id: </span><span style=\"color:#005cc5\">27</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Fish&#39;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;counter&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">l</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> [</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">l, {id: </span><span style=\"color:#005cc5\">43</span><span style=\"color:#24292e\">, title: </span><span style=\"color:#032f62\">&#39;Marsupials&#39;</span><span style=\"color:#24292e\">}]);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;list&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">, </span><span style=\"color:#032f62\">&#39;read&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   counter: 3,</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   list: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 23, title: &#39;Birds&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 27, title: &#39;Fish&#39; }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { id: 43, title: &#39;Marsupials&#39;, read: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><p>Le chemin peut être des clés en chaîne de caractère, des clés de tableau, des itérations d'objet <code>({ from, to, by })</code> ou des fonctions de filtrage. Cela permet une expressivité impressionnante pour décrire le changement d'état.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  todos: [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Finish work&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Go grocery shopping&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    { task: </span><span style=\"color:#032f62\">&#39;Make dinner&#39;</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, [</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">2</span><span style=\"color:#24292e\">], </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, { from: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">, to: </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\"> }, </span><span style=\"color:#032f62\">&#39;completed&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">c);</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> todo.completed, </span><span style=\"color:#032f62\">&#39;task&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">t</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> t </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&#39;!&#39;</span><span style=\"color:#24292e\">)</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: false }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, {}, </span><span style=\"color:#e36209\">todo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> ({ marked: </span><span style=\"color:#005cc5\">true</span><span style=\"color:#24292e\">, completed: </span><span style=\"color:#d73a49\">!</span><span style=\"color:#24292e\">todo.completed }))</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   todos: [</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Finish work&#39;, completed: true, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Go grocery shopping!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//     { task: &#39;Make dinner!&#39;, completed: false, marked: true }</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">//   ]</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// }</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"produce\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#produce\">#</a> <code>produce</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Inspiré de l'API d'Immer qui a été adapté pour les objets Store dans Solid pour permettre la mutation localisée.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">produce</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">s</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.user.name </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;Frank&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    s.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Pencil Crayon&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"reconcile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reconcile\">#</a> <code>reconcile</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">key</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">merge</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> { key: </span><span style=\"color:#032f62\">&quot;id&quot;</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">NotWrappable</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">?</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>La comparaison de données n'est pas appliquée lorsque l'on ne peut pas appliquer de mise à jour précise. Utile quand nous voulons gérer des données immuables depuis les stores ou grosses réponses d'API.</p><p>La clé est utilisée quand les éléments associés sont disponibles. Par défaut <code>merge: false</code> fais une vérification de référence quand c'est possible pour déterminer l'égalité et replace lorsque la référence n'est pas égale. <code>merge: true</code> pousse toutes les comparaisons aux feuilles de l'arbre de données et remplace la donnée précédente par la nouvelle valeur de manière efficace.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// s&#39;abonner à un observable</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">unsubscribe</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> store.</span><span style=\"color:#6f42c1\">subscribe</span><span style=\"color:#24292e\">(({ </span><span style=\"color:#e36209\">todos</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&#39;todos&#39;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reconcile</span><span style=\"color:#24292e\">(todos)));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">unsubscribe</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"createmutable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createmutable\">#</a> <code>createMutable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">StoreNode</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">state</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Store</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"></span></code></pre><p>Créer un nouvel objet Store mutable. Les stores se mettent à jour seulement quand les valeurs changent. Le traçage est fait par l'interception de l'accès de propriété et automatiquement tracé dans des imbrications profondes en utilisant un proxy.</p><p>Utile pour l'intégration de système externe ou en tant que couche de compatibilité avec MobX/Vue.</p><blockquote> <p><strong>Note:</strong> Un état mutable peut être passé et changer n'importe où, ce qui peut le rendre dur à suivre et peut casser le sens unidirectionnel plus facilement. Il est généralement recommandé d'utiliser <code>createStore</code> à la place. Le modificateur <code>produce</code> peut fournir beaucoup de ces avantages sans aucun sacrifice.</p> </blockquote><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">(initialValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// lecture de la valeur</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// affectation d&#39;une valeur</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.someValue </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">5</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">state.list.</span><span style=\"color:#6f42c1\">push</span><span style=\"color:#24292e\">(anotherValue);</span></span>\n<span class=\"line\"></span></code></pre><p>Les Mutables supportent les fonctions de mutations ainsi que les fonctions accesseurs.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMutable</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  firstName: </span><span style=\"color:#032f62\">&quot;John&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  lastName: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">firstName</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#005cc5\">this</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">lastName</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">set</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">fullName</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    [</span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.firstName, </span><span style=\"color:#005cc5\">this</span><span style=\"color:#24292e\">.lastName] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> value.</span><span style=\"color:#6f42c1\">split</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot; &quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">});</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"apis-de-composant\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#apis-de-composant\">#</a> APIs de Composant</h1><h2 id=\"createcontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcontext\">#</a> <code>createContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">id</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">symbol</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Provider</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">; </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">defaultValue</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Un Contexte permet une forme d'injection de dépendance dans Solid. Il est utilisé pour éviter de devoir passer des données en tant que props à travers plusieurs composants intermédiaires.</p><p>Cette fonction crée un objet contexte qui peut être utilisé grâce à <code>useContext</code> et fournir un contrôleur de flux <code>Provider</code>. Un contexte par défaut est utilisé quand aucun <code>Provider</code> n'est trouvé dans la hiérarchie du haut.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">CounterContext</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createContext</span><span style=\"color:#24292e\">([{ count: </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> }, {}]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">CounterProvider</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setState</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createStore</span><span style=\"color:#24292e\">({ count: props.count </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\"> });</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">store</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> [</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    state,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">increment</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">decrement</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">setState</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;count&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c </span><span style=\"color:#d73a49\">-</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">CounterContext.Provider value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{store}</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      {</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">children</span><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">CounterContext.Provider</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>La valeur donnée au <code>Provider</code> est passée telle quelle à <code>useContext</code>. Cela signifie qu'enrober une expression réactive ne marchera pas. Vous devrez passer des Signaux ou des Stores directement au lieu d'y accéder dans le JSX.</p><h2 id=\"usecontext\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#usecontext\">#</a> <code>useContext</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">context</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Context</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Utiliser pour récupérer un contexte, et d'éviter de passer des données via les props dans chaque fonction Composant.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">state</span><span style=\"color:#24292e\">, { </span><span style=\"color:#005cc5\">increment</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">decrement</span><span style=\"color:#24292e\"> }] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">useContext</span><span style=\"color:#24292e\">(CounterContext);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"children\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#children\">#</a> <code>children</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Utiliser pour faciliter l'interaction avec <code>props.children</code>. Cette fonction d'aide résout n'importe quelle réactivité imbriquée et retourne un mémo. Cette approche est recommandée pour utiliser <code>props.children</code> dans autre chose que l'utiliser directement dans le JSX.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">list</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// faire quelque chose avec la donnée</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">());</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"lazy\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lazy\">#</a> <code>lazy</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">&gt;&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;{ </span><span style=\"color:#e36209\">default</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> }&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">preload</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; };</span></span>\n<span class=\"line\"></span></code></pre><p>Utiliser le chargement de composant en mode paresseux pour permettre le découpage dynamique de code. Les composants ne sont chargés qu'une fois utilisée. Les composants chargés paresseusement peuvent être utilisé de la même manière qu'un composant importé normalement, il peut recevoir des props, etc. Les composants paresseux déclenchent les <code>&lt;Suspense /&gt;</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Enrobe l&#39;import</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ComponentA</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">lazy</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;./ComponentA&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// utiliser dans le JSX</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">ComponentA title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.title} </span><span style=\"color:#d73a49\">/&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"primitives-secondaires\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#primitives-secondaires\">#</a> Primitives secondaires</h1><p>Vous n'en aurez sûrement pas besoin pour votre première app, mais ce sont des outils utiles à avoir sous le coude.</p><h2 id=\"createdeferred\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createdeferred\">#</a> <code>createDeferred</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createDeferred</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">equals</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">prev</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">next</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Créer une valeur en lecture seule qui va notifier les changements en aval quand le navigateur est inactif. <code>timeoutMs</code> est le temps maximum attendu avant de forcer la mise à jour.</p><h2 id=\"createcomputed\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createcomputed\">#</a> <code>createComputed</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createComputed</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Crée une nouvelle fonction de calcul qui va automatiquement tracer les dépendances et s'exécuter immédiatement avant le rendu. L'utiliser pour écrire sur d'autres primitives réactives. Quand c'est possible, utiliser plutôt <code>createMemo</code> car écrire sur un signal en milieu de mise à jour peut causer d'autres fonctions à se recalculer.</p><h2 id=\"createrendereffect\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createrendereffect\">#</a> <code>createRenderEffect</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">value</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Créer un nouveau calcul qui va automatiquement tracer ces dépendances et s'exécuter durant la phase de rendu pendant que les éléments de DOM sont créés et mis à jour, mais pas nécessairement connecté. Toutes les mises à jour du DOM interne se passent à ce moment-là.</p><h2 id=\"createselector\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#createselector\">#</a> <code>createSelector</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">source</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">a</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">b</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">name</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">k</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Créer un signal conditionnel qui va seulement notifier les abonnées quand un élément entré ou sorti correspond à la valeur de la clé. Utile pour déléguer la sélection d'états, car l'opération devient O(2) au lieu de O(n).</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isSelected</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSelector</span><span style=\"color:#24292e\">(selectedId);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">For each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">list</span><span style=\"color:#24292e\">()}</span><span style=\"color:#d73a49\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">classList</span><span style=\"color:#24292e\">={{ </span><span style=\"color:#e36209\">active</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">isSelected</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">id</span><span style=\"color:#24292e\">) }}&gt;{item.name}</span><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">li</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;/</span><span style=\"color:#24292e\">For</span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h1><h1 id=\"rendu\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendu\">#</a> Rendu</h1><p>Ces imports sont exposés depuis <code>solid-js/web</code>.</p><h2 id=\"render\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#render\">#</a> <code>render</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">code</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Le point d'entrée de l'application côté navigateur. Il faut fournir une définition de composant de haut niveau ou une fonction et un élément sur lequel monter l'application. Il est recommandé que cet élément soit vide, car la fonction de disposition va effacer tous les enfants.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"hydrate\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hydrate\">#</a> <code>hydrate</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">node</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MountableElement</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Cette méthode est similaire à <code>render</code> sauf qu'elle essaye d'hydrater ce qui est déjà rendu dans le DOM. Quand elle est initialisée dans le navigateur, une page a déjà été rendue côté serveur.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">dispose</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(App, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostring\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostring\">#</a> <code>renderToString</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Effectue un rendu en tant que chaîne de caractères de manière synchrone. La fonction génère aussi une balise script pour l'hydratation progressive. Les options incluses <code>eventNames</code> pour écouter des évènements avant que la page ne se charge et à l'exécution de l'hydrations et annoncer l'ajout de la balise tag.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"rendertostringasync\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendertostringasync\">#</a> <code>renderToStringAsync</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">timeoutMs</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Similaire à <code>renderToString</code> sauf qu'elle va attendre que toutes les limites de <code>&lt;Suspense/&gt;</code> soit résolues avant de retourner le résultat. Les données des ressources sont automatiquement sérialisées dans une balise script et seront hydratées au chargement du client.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(App);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"pipetonodewritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetonodewritable\">#</a> <code>pipeToNodeWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">startWriting</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Promise</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Cette méthode traduit en flux Node. Il traduit le contenu de manière synchrone en incluant tous les contenus de repli des Suspenses, et ensuite continus vers un flux de données provenant des ressources asynchrones au fur et à mesure de leur complétion.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span></code></pre><p>L'option <code>onReady</code> est utile pour écrire dans le flux autour du noyau du rendu de l'application. Si vous utilisez <code>onReady</code>, vous devez appeler manuellement <code>startWriting</code></p><h2 id=\"pipetowritable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pipetowritable\">#</a> <code>pipeToWritable</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">abort</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">script</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">fn</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">WritableStream</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">options</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">eventNames</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">nonce</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">noScript</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onReady</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6f42c1\">onComplete</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">writable</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> { </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">r</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">PipeToWritableResults</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    ) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Cette méthode traduit en flux web. Il traduit le contenu de manière synchrone en incluant tous les contenus de repli des Suspenses, et ensuite continus vers un flux de données provenant des ressources asynchrones au fur et à mesure de leur complétion.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(App, writable);</span></span>\n<span class=\"line\"></span></code></pre><p>L'option <code>onReady</code> est utile pour écrire dans le flux autour du noyau du rendu de l'application. Si vous utilisez <code>onReady</code>, vous devez appeler manuellement <code>startWriting</code></p><h2 id=\"isserver\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#isserver\">#</a> <code>isServer</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">isServer</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Cela indique si le code est exécuté côté serveur ou côté navigateur. Comme le système d'exécution exporte ceci en tant que constante booléenne, cela permet aux bundlers d'éliminer le code et leurs imports de leurs bundle respectifs.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// Je ne serais jamais dans le bundle du navigateur</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// Je ne serais jamais côté serveur</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"control-flow\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#control-flow\">#</a> Control Flow</h1><p>Solid utilise les composants pour le contrôle de flux. Pour que la réactivité soit performante, nous avons besoin de contrôler comment les éléments sont créés. Par exemple, avec une liste, un simple <code>map</code> est inefficace, car il va toujours itérer sur chaque élément. Cela veut dire qu'on doit utiliser des fonctions d'aide.</p><p>Enrober ces composants est un moyen pratique pour réduire le templating et permettre aux utilisateurs de composer et construire leurs propres contrôles de flux.</p><p>Ces composants de contrôle de flux sont automatiquement importés. Tous à l'exception de <code>Portal</code> et <code>Dynamic</code> sont importés depuis <code>solid-js</code>. Ces deux-là son spécifique au DOM et sont exportés par <code>solid-js/web</code>.</p><blockquote> <p>Note : Toutes fonctions enfants au contrôle de flux sont non tracées. Cela permet d'imbriquer des créations d'états, et mieux isoler les réactions.</p> </blockquote><h2 id=\"%3Cfor%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cfor%3E\">#</a> <code>&lt;For&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">For</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Simple référencement de contrôle de flux par boucle.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Le second argument optionnel est un signal index :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{</span><span style=\"color:#6f42c1\">index</span><span style=\"color:#24292e\">()} {item}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cshow%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cshow%3E\">#</a> <code>&lt;Show&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Show</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Le contrôle de flux <code>Show</code> est utilisée pour afficher conditionnellement une partie de la vue. Ceci est similaire à un opérateur ternaire (<code>a ? b : c</code>) mais est idéal pour le templating JSX.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.count </span><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p><code>Show</code> peut aussi être utilisé comme un moyen d'associé une clé d'un modèle de données spécifique à un bloc. Par exemple, la fonction est réexécutée quand le modèle est remplacé.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.user} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">user</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{user.firstName}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Show</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cswitch%3E%2F%3Cmatch%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cswitch%3E%2F%3Cmatch%3E\">#</a> <code>&lt;Switch&gt;</code>/<code>&lt;Match&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Switch</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">type</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">when</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">undefined</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">null</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">false</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Match</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">MatchProps</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;);</span></span>\n<span class=\"line\"></span></code></pre><p>Utile quand il y a plus de 2 conditions mutuelles exclusives. Peut-être utiliser pour faire un système de routage simple par exemple.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Not Found&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;home&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Home</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">when</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.route </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;settings&quot;</span><span style=\"color:#24292e\">}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Settings</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Match</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Switch</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p><code>Match</code> supporte aussi une fonction enfant qui sert de flux associé à une clé.</p><h2 id=\"%3Cindex%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cindex%3E\">#</a> <code>&lt;Index&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Index</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">extends</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">&gt;(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">each</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">readonly</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> (</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">number</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">U</span><span style=\"color:#24292e\">[];</span></span>\n<span class=\"line\"></span></code></pre><p>Une fonction d'itération sur des listes sans clé (les lignes sont associées à un index au lieu d'une clé). Ceci est utile quand il n'y a pas de clé conceptuelle, par exemple si la donnée est composée de primitives et c'est l'index qui est fixe au lieu de la valeur.</p><p>L'élément est un signal :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Le second argument optionnel est un index de type <code>number</code> :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list} </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">index</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      #{index} {</span><span style=\"color:#6f42c1\">item</span><span style=\"color:#24292e\">()}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  )}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Index</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cerrorboundary%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cerrorboundary%3E\">#</a> <code>&lt;ErrorBoundary&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">ErrorBoundary</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> ((</span><span style=\"color:#e36209\">err</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">reset</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Intercepte les erreurs qui ne sont pas traitées et affiche un contenu de repli.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Something went terribly wrong&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Il est aussi possible de passer une fonction qui va recevoir l'erreur ainsi qu'une fonction de réinitialisation.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ErrorBoundary</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">err</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">reset</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{reset}&gt;Error: {err.</span><span style=\"color:#6f42c1\">toString</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ErrorBoundary</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspense%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspense%3E\">#</a> <code>&lt;Suspense&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Suspense</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">fallback</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Un composant qui garde une trace de toutes les ressources lues dans sa portée et affiche un contenu de repli jusqu'à ce que toutes les ressources soient chargées. Ce qui rend les <code>Suspenses</code> différents de <code>Show</code> est l'aspect non bloquant, car les deux branches existent en même temps même si elles ne sont pas dans le DOM.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Loading...&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">AsyncComponent</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Csuspenselist%3E-(exp%C3%A9rimental)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Csuspenselist%3E-(exp%C3%A9rimental)\">#</a> <code>&lt;SuspenseList&gt;</code> (Expérimental)</h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">SuspenseList</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">revealOrder</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;backwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;together&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">tail</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;hidden&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p><code>SuspenseList</code> permet de coordonner plusieurs composants <code>Suspense</code> et <code>SuspenseList</code> en parallèle. Il contrôle l'ordre dans la quel le contenu est révélé pour réduire les mises en page et possède une option pour fusionner ou cacher les états de repli.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">revealOrder</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;forwards&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">tail</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;collapsed&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">ProfileDetails</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">user</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.user} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading posts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTimeline</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">posts</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.posts} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fallback</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{&lt;</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;Loading fun facts...&lt;/</span><span style=\"color:#22863a\">h2</span><span style=\"color:#24292e\">&gt;}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">ProfileTrivia</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">trivia</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{resource.trivia} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">Suspense</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">SuspenseList</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p><code>SuspenseList</code> est encore en phase expérimentale et ne supporte pas complètement le rendu côté serveur.</p><h2 id=\"%3Cdynamic%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cdynamic%3E\">#</a> <code>&lt;Dynamic&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Dynamic</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt;(</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">&amp;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#e36209\">component</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Component</span><span style=\"color:#24292e\">&lt;</span><span style=\"color:#e36209\">T</span><span style=\"color:#24292e\">&gt; </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">string</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">|</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">keyof</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">IntrinsicElements</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Ce composant vous laisse insérer un composant ou une balise arbitraire avec des props associées.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Dynamic</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">component</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.component} </span><span style=\"color:#005cc5\">someProp</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.something} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%3Cportal%3E\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%3Cportal%3E\">#</a> <code>&lt;Portal&gt;</code></h2><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Portal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">mount</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Node</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">useShadow</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">isSVG</span><span style=\"color:#d73a49\">?:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">boolean</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#e36209\">children</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\">.</span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">})</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Text</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Ce composant va insérer un élément dans le nœud monté. C'est utile pour insérer des boîtes de dialogue en dehors de l'agencement de la page. Les évènements se propagent à travers la hiérarchie du composant.</p><p>Le portail est monté dans une <code>&lt;div&gt;</code> à moins que la cible est un entête de document. <code>useShadow</code> place l'élément dans un <code>ShadowRoot</code> pour l'isolation de style, et <code>isSVG</code> est requise si l'insertion est faite dans un élément SVG pour que la <code>&lt;div&gt;</code> ne soit pas insérée.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">mount</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;modal&quot;</span><span style=\"color:#24292e\">)}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;My Content&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">Portal</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h1 id=\"attributs-jsx-sp%C3%A9ciaux\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attributs-jsx-sp%C3%A9ciaux\">#</a> Attributs JSX spéciaux</h1><p>En général, Solid essaye de respecter un maximum les conventions du DOM. La majorité des props est traitée comme des attributs sur les éléments natifs et les propriétés dans les Web Components, mais dans quelques cas, des comportements spéciaux sont associés.</p><p>Pour les attributs dans un espace de noms personnalisé avec TypeScript, vous aurez besoin d'étendre l'espace de nom JSX de Solid :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// use:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitProperties</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// prop:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">ExplicitAttributes</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// attr:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// on:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">CustomCaptureEvents</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6a737d\">// oncapture:____</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"ref\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ref\">#</a> <code>ref</code></h2><p>Les références sont un moyen d'accéder à l'élément de DOM sous-jacent à notre JSX. Même s’il est possible d'assigner un élément dans une variable, il est plus optimal de laisser le composant dans le flux de JSX. Les références sont assignées au moment du rendu, mais avant que les éléments soient connectés au DOM. Ils peuvent avoir deux formes.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// assignation simple</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// utilisation de `onMount` ou `createEffect` pour lire après la connexion au DOM</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv));</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Ou utilisation d&#39;une fonction (appelé avant la connexion au DOM)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">div ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(el)} </span><span style=\"color:#d73a49\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Les références peuvent aussi être utilisées sur les Composants. Elles auront besoin d'être attachées de l'autre côté.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComp</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.ref} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">let</span><span style=\"color:#24292e\"> myDiv;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onMount</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(myDiv.clientWidth));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">MyComp</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">ref</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{myDiv} /&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"classlist\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#classlist\">#</a> <code>classList</code></h2><p>Un attribut d'aide pour utiliser <code>element.classList.toggle</code>. Il va prendre un objet dont la clé est un nom de classes et l'assigner quand la condition sera considérée <code>true</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#005cc5\">classList</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ active: state.active, editing: state.currentId </span><span style=\"color:#d73a49\">===</span><span style=\"color:#24292e\"> row.id }}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">/&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"style\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#style\">#</a> <code>style</code></h2><p>L'attribut style fonctionne soit comme avec une chaîne de caractère soit avec un objet. À la différence de React, Solid utilise <code>element.style.setProperty</code> en coulisse. Cela signifie que les variables CSS sont supportées, mais aussi que nous devons utiliser la version dash-case des propriétés. Cela donne de meilleures performances et une meilleure cohésion avec le résultat du rendu côté serveur.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// chaine de caractère</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#032f62\">`color: green; background-color: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">color</span><span style=\"color:#032f62\">}; height: ${</span><span style=\"color:#24292e\">state</span><span style=\"color:#032f62\">.</span><span style=\"color:#24292e\">height</span><span style=\"color:#032f62\">}px`</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// objet</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  color: </span><span style=\"color:#032f62\">&quot;green&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#032f62\">&quot;background-color&quot;</span><span style=\"color:#24292e\">: state.color,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  height: state.height </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\"> }}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// variable css</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">style</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{{ </span><span style=\"color:#032f62\">&quot;--my-custom-color&quot;</span><span style=\"color:#24292e\">: state.themeColor }} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"innerhtml%2Ftextcontent\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#innerhtml%2Ftextcontent\">#</a> <code>innerHTML</code>/<code>textContent</code></h2><p>Ils fonctionnent de la même manière que la propriété. Passez une chaîne de caractère et elle sera affichée. <strong>Attention !!!</strong> Utiliser <code>innerHTML</code> avec n'importe quelle donnée peut exposer vos utilisateurs à des risques, car cela peut être exploité comme faille de sécurité. <code>textContent</code> bien que généralement pas utiliser peut être une optimisation de performance quand vous savez que l'enfant ne sera que du texte, car il évite la comparaison générique.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">textContent</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.text} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on___\">#</a> <code>on___</code></h2><p>Les gestionnaires d'évènement dans Solid prennent typiquement la forme de <code>onclick</code> ou <code>onClick</code> en fonction du style du code. Le nom de l'évènement est en minuscule. Solid utilise une délégation d'évènement semi-synthétique pour les évènements communs à l'interface utilisateur qui ne sont pas composés et remontés. Cela améliore les performances pour les évènements communs.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(e.currentTarget)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Solid supporte aussi de fournir un tableau au gestionnaire d'évènement pour associer la valeur au premier argument de la fonction de gestion d'évènement. Cela n'utilise pas <code>bind</code> ou créer de fonction additionnelle, donc c'est un moyen très optimisé de déléguer des évènements.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">handler</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">itemId</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">/*...*/</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.list}&gt;{(</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[handler, item.id]} /&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Les évènements ne peuvent pas rebondir et l'association n'est pas réactive, car c'est généralement plus coûteux d'attacher/détacher des écouteurs. Vu que les évènements sont naturellement appelés, il n'y a pas besoin de réactivité.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// si défini, l&#39;appeler, sinon ne rien faire.</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">onClick</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.</span><span style=\"color:#6f42c1\">handleClick</span><span style=\"color:#24292e\">?.()} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"on%3A___%2Foncapture%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#on%3A___%2Foncapture%3A___\">#</a> <code>on:___</code>/<code>oncapture:___</code></h2><p>Pour tous les autres évènements, comme un évènement avec un nom non conventionnel ou un que vous souhaitez ne pas déléguer, il existe <code>on</code> qui va simplement ajouter un écouteur d'évènement.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">on</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">Weird-Event</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">alert</span><span style=\"color:#24292e\">(e.detail)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"use%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#use%3A___\">#</a> <code>use:___</code></h2><p>Il existe des directives personnalisées. C'est en quelque sorte du sucre syntaxique autour des références pour permettre de facilement attacher plusieurs directives à un même élément. Une directive est simplement une fonction avec la signature suivante :</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">directive</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">element</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Element</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">accessor</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">)</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">void</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><p>Les fonctions directives sont appelées au moment du rendu, mais avant d'être ajouté au DOM. Vous pouvez faire ce que vous souhaitez à l'intérieur, y compris créer des signaux, effets, programmer des fonctions de nettoyage, etc.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">name</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setName</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">model</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">el</span><span style=\"color:#24292e\">, </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">field</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setField</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createRenderEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (el.value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">field</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  el.</span><span style=\"color:#6f42c1\">addEventListener</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;input&quot;</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setField</span><span style=\"color:#24292e\">(e.target.value));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&lt;</span><span style=\"color:#24292e\">input type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">use</span><span style=\"color:#24292e\">:model</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{[name, setName]} /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Pour étendre l'espace de noms de JSX dans TypeScript.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">declare</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">module</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">namespace</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">JSX</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">interface</span><span style=\"color:#24292e\"> </span><span style=\"color:#e36209\">Directives</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#e36209\">model</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> [() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">, (</span><span style=\"color:#e36209\">v</span><span style=\"color:#d73a49\">:</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">any</span><span style=\"color:#24292e\">];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"prop%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#prop%3A___\">#</a> <code>prop:___</code></h2><p>Force la prop à être traitée comme une propriété au lieu d'un attribut.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">scrollTop</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.scrollPos </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;px&quot;</span><span style=\"color:#24292e\">} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"attr%3A___\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attr%3A___\">#</a> <code>attr:___</code></h2><p>Force la prop à être traitée comme un attribut au lieu d'une propriété. C'est utile pour les Web Components où vous voulez associer un attribut.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">status</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.status} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"%2F*-%40once-*%2F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%2F*-%40once-*%2F\">#</a> <code>/* @once */</code></h2><p>Le compilateur de Solid utilise une façon heuristique pour enrober la réactivité et évaluer paresseusement une expression JSX. Est-ce qu'il contient un appel à une fonction, accède à une propriété ou au JSX ? Si oui, nous l'enrobons dans un accesseur quand il est passé à un composant ou un effet s’il est passé à un élément natif.</p><p>En sachant ça, nous pouvons réduire la pénalisation effective pour les choses qui ne vont pas changer en y accédant depuis l'extérieur de JSX. Une simple variable ne sera jamais enrobée. Nous pouvons aussi dire au compilateur de ne pas les enrober en commençant une expression avec un commentaire décoratif <code>/_ @once _/</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">static</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Cela fonctionne aussi sur les enfants.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*@once*/</span><span style=\"color:#24292e\"> state.wontUpdate}&lt;/</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre></section>"
}