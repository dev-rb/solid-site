{
  "sections": [
    {
      "slug": "einstieg-in-solid",
      "title": "Einstieg in Solid",
      "level": 1,
      "children": [
        {
          "slug": "solid-ausprobieren",
          "title": "Solid ausprobieren",
          "level": 2,
          "children": []
        },
        {
          "slug": "solid-lernen",
          "title": "Solid lernen",
          "level": 2,
          "children": []
        },
        {
          "slug": "solids-philosophie",
          "title": "Solids Philosophie",
          "level": 2,
          "children": [
            {
              "slug": "1.-deklarative-daten",
              "title": "1. Deklarative Daten",
              "level": 3,
              "children": []
            },
            {
              "slug": "2.-verschwindende-komponenten",
              "title": "2. Verschwindende Komponenten",
              "level": 3,
              "children": []
            },
            {
              "slug": "3.-trennung-von-lesen%2Fschreiben",
              "title": "3. Trennung von Lesen/Schreiben",
              "level": 3,
              "children": []
            },
            {
              "slug": "4.-einfach-ist-besser-als-leicht",
              "title": "4. Einfach ist besser als leicht",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "web-components",
          "title": "Web Components",
          "level": 2,
          "children": []
        },
        {
          "slug": "server-rendering",
          "title": "Server Rendering",
          "level": 2,
          "children": []
        },
        {
          "slug": "keine-kompilation%3F",
          "title": "Keine Kompilation?",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "vergleich-mit-anderen-libraries",
      "title": "Vergleich mit anderen Libraries",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "migrationshilfe%3A",
              "title": "Migrationshilfe:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "migrationshilfe%3A-1",
              "title": "Migrationshilfe:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "migrationshilfe%3A-2",
              "title": "Migrationshilfe:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "migrationshilfe%3A-3",
              "title": "Migrationshilfe:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%26-lighterhtml",
          "title": "Lit & LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "migrationshilfe%3A-4",
              "title": "Migrationshilfe:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "andere",
          "title": "Andere",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "reaktivit%C3%A4t",
      "title": "Reaktivität",
      "level": 1,
      "children": [
        {
          "slug": "einleitung-in-die-primitiven",
          "title": "Einleitung in die Primitiven",
          "level": 2,
          "children": []
        },
        {
          "slug": "wie-es-funktioniert",
          "title": "Wie es funktioniert",
          "level": 2,
          "children": []
        },
        {
          "slug": "%C3%BCberlegungen",
          "title": "Überlegungen",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "faq",
      "title": "FAQ",
      "level": 1,
      "children": []
    },
    {
      "slug": "rendering",
      "title": "Rendering",
      "level": 1,
      "children": [
        {
          "slug": "jsx-kompilieren",
          "title": "JSX kompilieren",
          "level": 2,
          "children": []
        },
        {
          "slug": "attribute-und-props",
          "title": "Attribute und Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "einstieg",
          "title": "Einstieg",
          "level": 2,
          "children": []
        },
        {
          "slug": "komponenten",
          "title": "Komponenten",
          "level": 2,
          "children": []
        },
        {
          "slug": "props",
          "title": "Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "children",
          "title": "Children",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "serverseitiges-rendering",
      "title": "Serverseitiges Rendering",
      "level": 1,
      "children": [
        {
          "slug": "hydrations-script",
          "title": "Hydrations-Script",
          "level": 2,
          "children": []
        },
        {
          "slug": "asynchrones-und-streaming-ssr",
          "title": "Asynchrones und Streaming SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "ssr-caveats",
          "title": "SSR Caveats",
          "level": 2,
          "children": []
        },
        {
          "slug": "den-anfang-machen-mit-ssr",
          "title": "Den Anfang machen mit SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "den-anfang-mit-statischer-seitengenerierung-machen",
          "title": "Den Anfang mit statischer Seitengenerierung machen",
          "level": 2,
          "children": []
        }
      ]
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"einstieg-in-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#einstieg-in-solid\">#</a> Einstieg in Solid</h1><h2 id=\"solid-ausprobieren\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solid-ausprobieren\">#</a> Solid ausprobieren</h2><p>Mit Abstand die einfachste Möglichkeit, in Solid einzusteigen, ist, es online auszuprobieren. Unser REPL auf <a href=\"https://playground.solidjs.com\">https://playground.solidjs.com</a> ist der perfekte Weg, um Ideen auszuprobieren. Ähnlich gut ist <a href=\"https://codesandbox.io/\">https://codesandbox.io/</a>, wo du jedes <a href=\"https://github.com/solidjs/solid/blob/main/documentation/resources/examples.md\">unserer Beispiele</a> anpassen kannst.</p><p>Alternativ kann man auch unsere einfachen <a href=\"https://vitejs.dev/\">Vite</a>-Vorlagen nutzen, indem man folgende Anweisungen ins Terminal eingibt:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/js my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># oder yarn oder pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># oder yarn oder pnpm</span></span>\n<span class=\"line\"></span></code></pre><p>Oder für TypeScript:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/ts my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># oder yarn oder pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># oder yarn oder pnpm</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"solid-lernen\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solid-lernen\">#</a> Solid lernen</h2><p>Bei Solid geht es ganz um kleine zusammenpassende Teile, die als Bausteine für Anwendungen dienen. Diese Teile sind hauptsächlich Funktionen, die oberflächlich viele übergeordnete APIs bilden. Glücklicherweise muss man nicht viel darüber wissen, um mit Solid zu starten.</p><p>Die beiden wichtigsten Bausteine, die zur Verfügung stehen, sind Komponenten und reaktive Primitiven.</p><p>Komponenten sind Funktionen, die ein Props-Objekt nehmen und JSX-Elemente zurückgeben einschließlich nativer DOM-Elemente und anderer Komponenten. Sie können als JSX-Elemente in PascalCase geschrieben werden:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Hello {props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Solid&quot;</span><span style=\"color:#24292e\"> /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Komponenten sind insofern leichtgewichtig, als sie nicht selbst Zustand verwalten und keine eigenen Instanzen erzeugen müssen. Stattdessen funktionieren sie als Fabrik-Funktionen für DOM-Elemente und reaktive Primitiven.</p><p>Solids feingranulare Reaktivität baut auf 3 einfachen Primitiven auf: Signale, Memos und Effekte. Zusammen formen sie eine Maschine zur automatischen Verfolgung und Synchronisation, die sicherstellt, dass die Ausgabe aktuell bleibt. Reaktive Berechnungen nehmen dabei die Form von in Funktionen gekapselten Ausdrücken, die synchron ausgeführt werden, an.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">first</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setFirst</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;JSON&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">last</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setLast</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Bourne&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">first</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">last</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><p>Es gibt noch mehr über <a href=\"#reactivity\">Solids Reaktivität</a> und <a href=\"#rendering\">Solids Rendering</a> zu lernen.</p><h2 id=\"solids-philosophie\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solids-philosophie\">#</a> Solids Philosophie</h2><p>Das Design von Solid basiert auf Ansichten über bestimmte Prinzipien und Werten, die uns helfen, Webseiten und Anwendungen auf die beste Art zu bauen. Es ist einfacher, zu lernen, Solid zu nutzen, wenn man die Philosophie dahinter kennt.</p><h3 id=\"1.-deklarative-daten\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-deklarative-daten\">#</a> 1. Deklarative Daten</h3><p>Deklarative Daten ist die Praxis, die Beschreibung des Datenverhaltens an dessen Deklaration zu hängen. Das erlaubt eine einfache Zusammenstellung aller Aspekte des Datenverhaltens am gleichen Platz.</p><h3 id=\"2.-verschwindende-komponenten\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-verschwindende-komponenten\">#</a> 2. Verschwindende Komponenten</h3><p>Es ist schwer genug, Komponenten zu strukturieren, ohne Aktualisierungen zu bedenken. Solids Aktualisierungslogik ist unabhängig von den Komponenten. Komponenten-Funktionen werden nur einmal aufgerufen und hören dann auf, zu existieren. Komponenten existieren, um den Code zu organisieren und mehr nicht.</p><h3 id=\"3.-trennung-von-lesen%2Fschreiben\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-trennung-von-lesen%2Fschreiben\">#</a> 3. Trennung von Lesen/Schreiben</h3><p>Präzise Kontrolle und Vorhersagbarkeit sind die Grundlage für bessere Systeme. Wir brauchen keine völlige Unveränderlichkeit, um unidirektionalen Datenfluss zu erzwingen, sondern nur die Fähigkeit, eine bewusste Entscheidung zu treffen, welche Nutzer schreiben können und welche nicht.</p><h3 id=\"4.-einfach-ist-besser-als-leicht\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-einfach-ist-besser-als-leicht\">#</a> 4. Einfach ist besser als leicht</h3><p>Eine schwere Lektion für feingranulare Reaktivität. Explizite und konsistente Konventionen sind selbst dann wertvoll, wenn sie etwas mehr Aufwand erfordern. Das Ziel ist es, minimale Werkzeuge zur Verfügung zu stellen, die zu einer Grundlage werden, auf der man aufbauen kann.</p><h2 id=\"web-components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#web-components\">#</a> Web Components</h2><p>Solid wurde mit dem Wunsch geschaffen, Web Components als Bürger erster Klasse zu behandeln. Mit der Zeit unterlag das Design einer Evolution und die Ziele wurden angepasst. Dennoch ist Solid ein guter Weg, um Web Components zu erstellen. <a href=\"https://github.com/solidjs/solid/tree/main/packages/solid-element\">Solid Element</a> erlaubt es, Solid-Komponenten zu schreiben und als kleine und performante Web Components zu verpacken. Innerhalb von Solid-Anwendungen ist Solid Element in der Lage, Solids Context API zu verwenden und Solids Portal-Komponente unterstützt mit Shadow DOM isolierte Styles.</p><h2 id=\"server-rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#server-rendering\">#</a> Server Rendering</h2><p>Solid hat eine dynamische Serverseitige Render-Lösung die eine wirklich isomorphische Entwicklungserfahrung ermöglicht. Durch die Nutzung unserer Resource-Primitive sind asnychrone Daten-Abfragen einfach gemacht und, noch wichtiger, automatisch zwischen Client und Browser serialisiert und synchronisiert.</p><p>Da Solid asynchrones Rendern in Datenströme unterstützt, kann man seinen Code einmal schreiben und auch auf dem Server ausführen. Das heisst, das Fähigkeiten wie <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\">render-as-you-fetch</a> und Code-splitting in Solid einfach funktionieren.</p><p>Mehr Informationen bietet das <a href=\"#server-side-rendering\">Server Handbuch</a>.</p><h2 id=\"keine-kompilation%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#keine-kompilation%3F\">#</a> Keine Kompilation?</h2><p>Du magst kein JSX? Dich stören etwas mehr manuelle Arbeit beim verpacken von Ausdrücken, schlechtere Performance und größere Bundle-Größen nicht? Man kann alternativ auch Solid-Anwendungen mit Tagged Template Literalen oder HyperScript in nicht-kompilierten Umgebungen verwenden.</p><p>Das kann man direkt im Browser mit <a href=\"https://www.skypack.dev/\">Skypack</a> laufen lassen:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#24292e\">=</span><span style=\"color:#032f62\">&quot;module&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        createSignal,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        onCleanup,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> html </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/html&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">          </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">html</span><span style=\"color:#032f62\">`&lt;div&gt;${</span><span style=\"color:#24292e\">count</span><span style=\"color:#032f62\">}&lt;/div&gt;`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      };</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.body);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Man bedenke, dass man immer noch die dazugehörige DOM Expression Library benötigt, damit das mit TypeScript funktioniert. Man kann Tagged Template Literals mit <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/lit-dom-expressions\">Lit DOM Expressions</a> oder HyperScript mit <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/hyper-dom-expressions\">Hyper DOM Expressions</a> benutzen.</p></section><section class=\"mt-10\"><h1 id=\"vergleich-mit-anderen-libraries\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vergleich-mit-anderen-libraries\">#</a> Vergleich mit anderen Libraries</h1><p>Dieser Abschnitt wird nicht vollständig vorurteilsfrei sein, aber ich denke, dass es wichtig ist, zu verstehen, wo die Lösungsansatze von Solid stehen im Vergleich mit anderen Libraries. Dabei geht es nicht um Geschwindigkeit. Für einen abschließenden Blick auf Performance möge man einen Blick auf den <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a> werfen.</p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React hatte einen großen Einfluss auf Solid. Sein unidirektionaler Datenfluss und explizite Unterteilung von Lesen und Schreiben in der Hooks-API inspirierte Solids API; mehr als den Anspruch, nur eine &quot;Render-Library&quot; anstelle eines Frameworks zu sein. Solid hat feste Meinungen bezüglich der Datenverwaltung in der Anwendungsentwicklung, versucht aber nicht, diese in der Ausführung zu beschränken.</p><p>Jedenfalls, so sehr Solid auch mit der Design-Philosophie von React übereinstimmt, so fundamental unterscheidet es sich in seiner Funktionsweise. React verwendet ein virtuelles DOM, Solid nicht. Reacts Abstraktion ist eine von oben nach unten gehende Unterteilung in getrennte Komponenten, deren render-Methoden immer wieder aufgerufen und das Ergebnis abgeglichen wird. Solid rendert hingegen jedes Template nur einmal, konstruiert seinen reaktiven Graph und erst dann werden die Anweisungen für feinere Änderungen ausgeführt.</p><h4 id=\"migrationshilfe%3A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#migrationshilfe%3A\">#</a> Migrationshilfe:</h4><p>Solids Aktualisierungsmethode ist ganz anders als die von React, oder als React + MobX. Statt an Funktionale Komponenten als Render-Funktion zu denken, denke man an einen <code>constructor</code>. Man sollte sich vor Destructuring oder verfrühtem Zugriff auf Props in Acht nehmen, durch die man die Reaktivität verlieren kann. Solids Primitiven haben keine Beschränkungen wie die Hooks-Regeln, also kann man sie ganz nach Belieben einsetzen. Man braucht keine keys bei Listen, um ein korrektes Verhalten zu ermöglichen. Zuguterletzt gibt es kein VDOM, also ergeben imperative VDOM APIs wie <code>React.Children</code> und <code>React.cloneElement</code> keinen Sinn. Ich ermutige gern dazu, unterschiedliche Wege zur Lösung von Problemen zu finden, die diese auf deklarative Weise nutzen.</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Solid ist nicht besonders von Vue im Hinsich auf Design beeinflusst, aber die Herangehensweise ist vergleichbar. Beide benutzen Proxies in ihrem jeweiligen reaktiven System mit getter-basierter automatischer Verfolgung. Aber da enden die Gemeinsamkeiten auch schon. Vues feingranulare Abhängigkeitserkennung führt nur zu einem weniger feingranularen virtuellen DOM und Komponenten-System, während Solid die Granularität bis hin zu den direkten DOM-Aktualisierungen beibehält.</p><p>Vue bevorzugt Einfachheit, während für Solid Transparenz zählt; obwohl Vues neue Ausrichtung mit Vue 3 eher mit der Herangehensweise von Solid vergleichbar wird. Diese Libraries werden mit der Zeit mehr Ähnlichkeiten aufweisen, je nachdem, wie sie sich weiterentwickeln.</p><h4 id=\"migrationshilfe%3A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#migrationshilfe%3A-1\">#</a> Migrationshilfe:</h4><p>Als eine andere moderne reaktive Library sollte die Migration von Vue 3 ein gewohntes Umfeld bieten. Solids Komponenten sind ziemlich wie die Tag-Templates am Ende von Vues <code>setup</code>-Funktion. Man sollte vorsichtig sein, nicht zu viele State-Ableitungen in Berechnungen zu verpacken, stattdessen lieber einfache Funktionen probieren. Reaktivität ist andauernd. Solids Proxies sind absichtlich nur lesbar. Schimpfe nicht darüber, bevor du es nicht probiert hast.</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte hat Pionierarbeit bei den vorkompilierten Frameworks geleistet, das Solid ebenfalls zu einem gewissen Grad verwendet. Beide Libraries sind wirklich reaktiv und können sehr kleine Code-Bündel erzeugen, obwohl Svelte hierbei der Gewinner für kleine Demos ist. Solid braucht etwas mehr Explizitheit der Deklarationen, weil es weniger auf implizite Analyse durch den Kompiler setzt, was aber ein Teil dessen ist, was Solid seine überlegene Geschwindigkeit verleiht. Solid macht mehr während der Laufzeit, was bei größeren Anwendungen besser skaliert. Solid's realistische Demo-Anwendung ist 25% kleiner als die gleiche in Svelte.</p><p>Beide libraries versuchen, den Entwicklern zu helfen, weniger Code zu schreiben, aber die Herangehensweise ist vollkommen unterschiedlich. Svelte 3 konzentriert sich auf die Optimierung der Einfachheit im Umgang mit lokalen Änderungen, einfache Objekt-Interaktion und bidirektionales Data-Binding. Im Gegensatz dazu fokussiert sich Solid auf den Datenfluss, indem absichtlich CQRS und Unveränderlichkeit der Interfaces verwendet wird. Mit funktionaler Template-Berechnung erlaubt Solid in vielen Fällen den Entwicklern, noch weniger Code zu schreiben als Svelte, obwohl Sveltes Template-Syntax definitiv kürzer ist.</p><h4 id=\"migrationshilfe%3A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#migrationshilfe%3A-2\">#</a> Migrationshilfe:</h4><p>Das Erlebnis für Entwickler ist ausreichend unterschiedlich, dass es trotz einiger weniger Analogien eine sehr andere Erfahrung ist. Komponenten sind in Solid billig, also schrecke man nicht davor zurück, mehr davon zu benutzen.</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>Diese Library verdankt ihre Existenz Knockout. Die ursprüngliche Motivation bestand darin, dessen Modell für feingranulare Abhängigkeitserkennung zu modernisieren. Knockout wurde 2010 veröffentlicht unter unterstützt Microsoft Internet Explorer bis zurück zu IE6, während Solid diesen überhaupt nicht unterstützt.</p><p>Knockouts bindings sind nur Strings in HTML, die während der Laufzeit durchlaufen werden. Sie hängen ab von geklontem Kontext ($parent usw...). Solid hingegen nutzt JSX oder Tagged Template Literals für das Templating für eine JS-gebundene API.</p><p>Der größte Unterschied ist vermutlich Solids Herangehensweise, Änderunngen zu staffeln, was deren Gleichzeitigkeit gewährleistet, während Knockout mit deferUpdates eine verzögerte Micro-Task-Warteschlange hat.</p><h4 id=\"migrationshilfe%3A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#migrationshilfe%3A-3\">#</a> Migrationshilfe:</h4><p>Wenn du an Knockout gewohnt bist, werden dir Solids Primitiven seltsam vorkommen. Die Aufteilung zwischen Lesen und Schreiben ist absichtlich und nicht nur dazu gedacht, dein Leben zu erschweren. Versuche, ein auf State/Action basierendes mentales (Flux) Modell anzunehmen. Während diese Libraries ähnlich aussehen, bevorzugen sie unterschiedliche empfohlene Vorgehensweisen.</p><h2 id=\"lit-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%26-lighterhtml\">#</a> Lit &amp; LighterHTML</h2><p>Diese Libraries sind unglaublich ähnlich mit und hatten einigen Einfluss auf Solid. Vor allem, dass der von Solid kompilierte Code eine sehr ähnliche Methode verwendet, um das DOM zu rendern. Template-Elemente zu klonen und Kommentar-Platzhalter zu verwenden ist eine Gemeinsamkeit zwischen Solid und diesen Libraries.</p><p>Der größte Unterschied ist, dass während diese Libraries kein virtuelles DOM verwendet, rendern sie wie dieses auch von oben nach unten, was es erfordert, die Komponenten zu partitionieren, um die Dinge vernünftig zu halten. Im Gegensatz dazu verwendet Solid eine feingranulare Reaktivität, um nur die Dinge zu ändern, die sich auch tatsächlich ändern sollen und damit diese Technik nur für das initiale Rendern benötigt. Diese Herangehensweise Diese Herangehensweise profitiert von der anfänglichen Geschwindigkeit, die nur nativem DOM zur Verfügung steht und hat gleichzeitig den performantesten Weg, Änderungen vorzunehmen.</p><h4 id=\"migrationshilfe%3A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#migrationshilfe%3A-4\">#</a> Migrationshilfe:</h4><p>Diese Libraries sind ziemlich minimal und es ist leicht, darauf aufzubauen. Allerdings sollte man bedenken, dass <code>&lt;MyComp/&gt;</code> nicht nur ein HTMLElement (Array oder Funktion) ist. Man sollte versuchen, die Dinge im JSX-Template zu behalten. Hoisting funktioniert meistenteils, aber es ist am Besten, dies als eine render-Library zu behandeln und nicht als HTMLElement-Fabrik.</p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>Diese Library hatte den größten Einfluss auf Solids reaktives Design. Solid verwendete S.js intern für ein paar Jahre, bis sich die Wege der beiden Libraries aufgrund des unterschiedlichen Funktionsumfangs trennten. S.js ist heute eine der effizientesten reaktiven Libraries. Sie modelliert alles aus synchronen Zeitschritten wie ein digitaler Schaltkreis und sichert die Konsistenz ohne die komplizierteren Mechanismen, die man in Libraries wie MobX findet. Solids Reaktivität ist eine Art Hybrid zwischen S.js und MobX. Das ergibt bessere Performance als die meisten reaktiven Libraries (Knockout, MobX, Vue), während die Einfachheit des mentalen Modells für die Entwickler beibehalten wird. S.js ist letztendlich dennoch die performantere reaktive Library, obwohl der Unterschied kaum merklich ist, von den gekünstelten Benchmarks einmal abgesehen.</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS ist eine reaktive Library. Während Solid eine ähnliche Idee von Observable-Datenströmen hatte, nutzt es eine deutlich andere Anwendung des Beobachter-Patterns. Während Signals wie eine einfache Version eines Observables sind (nur die next-Methode), das Muster der automatischen Erkennung von Abhängigkeiten ersetzt RxJS hunderte oder so Operatoren. Solid hätte den gleichen Ansatz wählen können, und tatsächlich gab es in einer früheren Version ähnliche Operatoren, aber in den meisten Fällen ist es eher unkompliziert, die eigene Transformations-Logik in einer Berechnung zu schreiben. Während Observables kalt starten, an einzelne Empfänger und Push-basiert sind, ist bei vielen clientseitigen Problemen ein warmer Start und mehrere Empfänger nützlicher, wie es bei Solid standardmäßig gemacht wird.</p><h2 id=\"andere\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#andere\">#</a> Andere</h2><p>Angular und ein paar andere populäre Libraries fehlen auffallend in diesen Vergleichen. Mangel an Erfahrung damit verhindern einen adäquaten Vergleich. Generell hat Solid wenig gemeinsam mit größeren Frameworks, was einen direkten Vergleich erschwert.</p></section><section class=\"mt-10\"><h1 id=\"reaktivit%C3%A4t\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reaktivit%C3%A4t\">#</a> Reaktivität</h1><p>Die Datenverwaltung in Solid baut auf einer Reihe von flexiblen reaktiven Primitiven auf, die verantwortlich für alle Updates sind. Sie nimmt dazu einen sehr ähnlichen Ansatz wie MobX oder Vue, außer dass die Granularität nicht zugunsten eines VDOM eingeschränkt wird. Abhängigkeiten werden automatisch verfolgt wenn die reaktiven Werte in den Effekten und im JSX-Code ausgelesen werden.</p><p>Solids Primitiven kommen in der Form von <code>create</code>-Aufrufen, die häufig Tupel zurückgeben, deren erstes Element generell den Lese- und das zweite den Schreibzugriff ermöglicht. Normalerweise benennt man den lesbaren Teil beim Namen der Primitive.</p><p>Hier ist ein einfacher automatisch hochlaufender Zähler, der durch das Schreiben des <code>count</code>-Signals aktualisiert wird.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal, onCleanup } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"einleitung-in-die-primitiven\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#einleitung-in-die-primitiven\">#</a> Einleitung in die Primitiven</h2><p>Die Reaktivität in Solid besteht aus 3 primären Primitiven, Signal, Memo und Effekt. Ihr Kern basiert auf dem Observer-Pattern, in dem Signale (und Memos) durch das Verpacken von Memos und Effekten verfolgt werden.</p><p>Signale sind die einfachste Primitiven. Sie enthalten einen Wert und Lese- und Schreibfunktionen, so dass man Lese- und Schreibzugriffe abfangen kann.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Effekte sind Funktionen, in die Lesezugriffe auf Signale verpackt werden und die ausgeführt werden, wann immer der Wert eines Signals, auf dem der Effekt basiert, verändert wird. Das ist nützlich, um Seiteneffekte zu behandeln, wie Rendering.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;The latest count is&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>Memos sind zwischengespeicherte von Signalen abgeleitete Werte. Sie haben die Eigenschaften sowohl von Signalen als auch von Effekten. Sie verfolgen die Signale, auf denen sie basieren und werden neu ausgeführt wenn sich deren Werte ändern und sind selbst verfolgbare Signale.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fullName</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">firstName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">lastName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"wie-es-funktioniert\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#wie-es-funktioniert\">#</a> Wie es funktioniert</h2><p>Signale sind Event-Sender, die eine Liste von Empfängern beinhalten. Die Empfänger werden benachrichtigt, wenn sich der Wert ändert.</p><p>Wo die Dinge interessanter werden ist, wie diese Empfänger registriert werden. Solid benutzt eine automatische Verfolgung von Abhängigkeiten. Aktualisierungen passieren automatisch, sobald sich die Daten ändern.</p><p>Der Trick ist ein globaler Stack zur Laufzeit. Bevor ein Effekt oder Memo sein Funktions-Argument (nochmal) ausführt, lädt es sich auf diesen Stack. Danach prüft jedes Signal, das gelesen wird, ob ein gegenwärtiger Empfänger auf dem Stack ist und falls ja, fügt es diesen zu seinen registrierten Empfängern hinzu.</p><p>Man kann sich das so vorstellen:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">subscribers</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">Set</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">read</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">listener</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">getCurrentListener</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (listener) subscribers.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(listener);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">nextValue</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> nextValue;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">for</span><span style=\"color:#24292e\"> (</span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sub</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">of</span><span style=\"color:#24292e\"> subscribers) sub.</span><span style=\"color:#6f42c1\">run</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> [read, write];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Jetzt wissen wir bei jeder Aktualisierung, welche Effekte neu aufgerufen werden müssen. Einfach, aber effektiv. Die tatsächliche Implementierung ist wesentlich komplizierter, aber das ist die Quintessenz dessen, was passiert.</p><p>Für ein detailiierteres Verständnis, wie Reaktivität funktioniert, gibt es diese nützlichen Artikel:</p><p><a href=\"https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf\">A Hands-on Introduction to Fine-Grained Reactivity</a></p><p><a href=\"https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p\">Building a Reactive Library from Scratch</a></p><p><a href=\"https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering\">SolidJS: Reactivity to Rendering</a></p><h2 id=\"%C3%BCberlegungen\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%C3%BCberlegungen\">#</a> Überlegungen</h2><p>Dieser Ansatz zur Reaktivität ist sehr mächtig und dynamisch. Er kann Abhängigkeitsveränderungen während der Ausführung durch verschiedene Zweige von konditionalem Code handhaben. Jede Funktion innerhalb eines verfolgten Kontextes wird ebenfalls verfolgt.</p><p>Allerdings gibt es ein paar grundsätzliche Verhaltensweisen und Kompromisse, die man kennen sollte.</p><ol> <li> <p>Alle Reaktivität von Funktionsaufrufen wird verfolgt, egal ob direkt oder hinter einem Getter/Proxy und ausgelöst durch Zugriff auf eine Eigenschaft. Das bedeutet, wo man auf Eigenschaften reaktiver Objekte zugreift, ist wichtig.</p> </li> <li> <p>Komponenten und Callbacks von Kontrollflüssen sind keine Verfolgungskontexte und werden nur einmal ausgeführt. Das bedeutet, Destructuring oder Logik auf der obersten Ebene wird nicht nochmal ausgeführt. Die Signale, Stores und Props müssen innerhalb anderer reaktiver Primitiven aufgerufen werden, damit der Code nochmal ausgeführt wird.</p> </li> <li> <p>Diese Herangehensweise trackt nur synchron. Wenn es einen setTimeout oder eine asynchrone Funktion in einem Effekt hat, wird der Code, der danach ausgeführt wird, nicht verfolgt.</p> </li> </ol></section><section class=\"mt-10\"><h1 id=\"faq\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#faq\">#</a> FAQ</h1><h3 id=\"1.-jsx-ohne-ein-vdom%3F-ist-das-vapourware%3F-ich-habe-prominente-stimmen-wie-die-der-autoren-anderer-frameworks-sagen-geh%C3%B6rt%2C-dies-sei-nicht-m%C3%B6glich.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-jsx-ohne-ein-vdom%3F-ist-das-vapourware%3F-ich-habe-prominente-stimmen-wie-die-der-autoren-anderer-frameworks-sagen-geh%C3%B6rt%2C-dies-sei-nicht-m%C3%B6glich.\">#</a> 1. JSX ohne ein VDOM? Ist das Vapourware? Ich habe prominente Stimmen wie die der Autoren anderer Frameworks sagen gehört, dies sei nicht möglich.</h3><p>Es ist möglich, wenn man nicht das Aktualisierungsmodell von React hat. JSX ist eine Template-Domain-spezifische-Sprache wie jede andere. Nur eine, die gewisser Weise flexibler ist. Willkührlichen JavaScript-Code einzufügen kann teilweise eine Herausforderung sein, was aber nicht anders ist als etwa die Unterstützung von Spread-Operatoren. Also nein, das ist keine Vapourware, sondern ein Ansatz, der erwiesenermaßen der Performanteste ist.</p><p>Der wahre Vorteil kommt aus der Erweiterbarkeit. Der Kompiler arbeitet für einen, indem er optimale native DOM-Aktualisierungen gibt, man aber die Freiheit von Libraries wie React hat, Komponenten mit Techniken wie Render Props und Komponenten höherer Ordnung an der Seite reaktiver &quot;Hooks&quot; zu schreiben. Magst du nicht, wie der Kontrollfluss von Solid arbeitet? Schreib' deinen eigenen.</p><h3 id=\"2.-wie-ist-solid-so-performant%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-wie-ist-solid-so-performant%3F\">#</a> 2. Wie ist Solid so performant?</h3><p>Wir wünschten, wir könnten es an einer einzelnen Sache festmachen, aber es ist wirklich die Kombination mehrerer wichtiger Designentscheidungen:</p><ol> <li>Explizite Reaktivität, so dass nur die Dinge, die auch reaktiv sind, verfolgt werden.</li> <li>Kompilierung mit Fokus auf die initiale Erstellung. Solid verwendet Heuristiken, um die Granularität zu lockern, damit die Zahl der Berechnungen reduziert werden kann, aber Aktualisierungen granular und performant durchgeführt werden.</li> <li>Reaktive Ausdrücke sind nur Funktionen. Das ermöglicht &quot;verschwindende Komponenten&quot; mit verzögerter Prop-Auswertung ohne unnötige Wrapper und Synchronisationsaufwände.</li> </ol><p>Dies sind derzeit einzigartige Techniken in einer Kombination, die Solid einen Vorteil gegenüber der Konkurrenz gibt.</p><h3 id=\"3.-gibt-es-react-compat%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-gibt-es-react-compat%3F\">#</a> 3. Gibt es React-Compat?</h3><p>Nein, und wahrscheinlich wird es das nie geben. Während die APIs ähnlich sind und man Komponenten oft mit wenigen Änderungen übertragen kann, ist das Aktualisierungs-Modell fundamental unterschiedlich. React-Komponenten werden wieder und wieder gerendert, so dass Code außerhalb der Hooks sehr anders funktioniert. Die Closures- und Hook-Regeln sind in Solid unnötig, erlauben aber auch Anwendungsweisen, die hier nicht funktionieren.</p><p>Vue-compat wäre andererseits machbar. Allerdings gibt es derzeit nocht keine Pläne zur Umsetzung.</p><h3 id=\"4.-warum-funktioniert-destructuring-nicht%3F-ich-habe-festgestellt%2C-dass-ich-das-beheben-kann%2C-indem-ich-meine-ganze-komponente-in-eine-funktion-verpacke.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-warum-funktioniert-destructuring-nicht%3F-ich-habe-festgestellt%2C-dass-ich-das-beheben-kann%2C-indem-ich-meine-ganze-komponente-in-eine-funktion-verpacke.\">#</a> 4. Warum funktioniert Destructuring nicht? Ich habe festgestellt, dass ich das beheben kann, indem ich meine ganze Komponente in eine Funktion verpacke.</h3><p>Reaktivität findet beim Zugriff auf props und Store-Objekteigenschaften statt. Auf diese von außerhalb einer Verbindung oder reaktiven Komponente zuzugreifen, wird nicht verfolgt. Darinnen ist Destructuring jedoch in Ordnung.</p><p>Allerdings sollte man nicht so verantwortungslos sein, seine Komponenten unnötig in Funktionen zu schachteln. Solid hat kein VDOM. Daher lassen alle verfolgten Änderungen die Funktion noch einmal neu laufen, was es zu vermeiden gilt.</p><h3 id=\"5.-kannst-du-unterst%C3%BCtzung-f%C3%BCr-komponentenklassen-hinzuf%C3%BCgen%3F-ich-finde-die-lifecycles-einfacher-zu-verstehen.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-kannst-du-unterst%C3%BCtzung-f%C3%BCr-komponentenklassen-hinzuf%C3%BCgen%3F-ich-finde-die-lifecycles-einfacher-zu-verstehen.\">#</a> 5. Kannst du Unterstützung für Komponentenklassen hinzufügen? Ich finde die Lifecycles einfacher zu verstehen.</h3><p>Ich habe nicht die Absicht, Komponentenklassen zu unterstützen. Die Lifecycles von Solid sind an das Timing des reaktiven Systems gebunden und sind künstlich. Man hätte vermutlich eine Klasse daraus machen können, aber aller Code, der keine Event-Handler betrifft, läuft ohnehin im Constructor, einschließlich der Render-Funktion. Es wäre nur mehr Syntax für eine Entschuldigung, die Daten weniger granular zu behandeln.</p><p>Man sollte Daten eher anhand deren Verhalten zusammenfassen als anhand der Lifecycles der Komponente. Diese empfohlene Herangehensweise für reaktive Programmierung hat sich seit Jahrzehnten bewährt.</p><h3 id=\"6.-i-hasse-jsx-wirklich%2C-gibt-es-vielleicht-eine-template-dsl%3F-oh%2C-ich-sehe%2C-du-hast-tagged-template-literals%2Fhyperscript.-vielleicht-nehme-ich-einfach-die...\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-i-hasse-jsx-wirklich%2C-gibt-es-vielleicht-eine-template-dsl%3F-oh%2C-ich-sehe%2C-du-hast-tagged-template-literals%2Fhyperscript.-vielleicht-nehme-ich-einfach-die...\">#</a> 6. I hasse JSX wirklich, gibt es vielleicht eine Template-DSL? Oh, ich sehe, du hast Tagged Template Literals/Hyperscript. Vielleicht nehme ich einfach die...</h3><p>Nein. Keinen Schritt weiter. Wir nutzen JSX auf die gleiche Art wie Svelte seine Templates benutzt, um optimierte DOM-Instruktionen zu erstellen. Die Tagged Template Literal und HyperScript-Lösungen sind auf ihre eigene Art beeindruckend, aber solange es keinen guten Grund gibt wie etwa die Anforderung, dass nicht kompiliert werden darf, sind sie in jeder Hinsicht schlechter. Größere Bundles, langsamere Performance und die Notwendigkeit, Werte manuell zu schachteln.</p><p>Es ist gut, Optionen zu haben, aber Solid's JSX ist wirklich die beste Lösung hier. Eine Template-DSK könnte auch toll sein, obwohl sie restriktiver wäre, aber JSX gibt uns so viel kostenlos. TypeScript, existierende Parser, Syntax Highlighting, TypeScript, Prettiert, Autovervollständigung und nicht zuletzt TypeScript.</p><p>Andere Libraries haben Unterstützung für diese Features anderweitig hinzugefügt, aber das war ein enormer Aufwand und ist immer noch unperfekt und ein konstanter Wartungsaufwand. Hier nehme ich einen pragmatischen Standpunkt ein.</p><h3 id=\"7.-wann-benutze-ich-ein-signal-und-wann-einen-store%3F-warum-sind-diese-unterschiedlich%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-wann-benutze-ich-ein-signal-und-wann-einen-store%3F-warum-sind-diese-unterschiedlich%3F\">#</a> 7. Wann benutze ich ein Signal und wann einen Store? Warum sind diese unterschiedlich?</h3><p>Stores verwalten verschachtelte Datenstrukturen, was sie ideal für Objekte und Modelle macht. Für die meisten anderen Anwendungsfälle sind Signals eine leichtgewichtige und effektive Lösung.</p><p>So gern wir die beiden auch in eine einzelne API verschmelzen würden, kann man Primitiven nicht in einen Proxy stecken. Funktionen sind das einfachste Interface und jeder reaktive Ausdruck (einschließlich Zugriff auf den Zustand) kann einfach in eine gesteckt werden, so dass eine universale API zur Verfügung gestellt werden kann. Man kann seine Signale und States benennen, wie man möchte und der Aufwand bleibt minimal. Das Letzte, was wir wollen, ist, dich zu zwingen, <code>.get()</code> oder <code>.set()</code> zu tippen oder noch schlimmer, <code>.value</code>. Immerhin kann das erste in einem Alias gekürzt werden, während das letzte die am wenigsten prägnante Methode ist, eine Funktion aufzurufen.</p><h3 id=\"8.-warum-kann-ich-nicht-einfach-einen-wert-in-solids-store-zuweisen%2C-wie-ich-es-in-vue%2C-svelte-oder-mobx-kann%3F-wo-ist-das-bidirektionale-data-binding%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.-warum-kann-ich-nicht-einfach-einen-wert-in-solids-store-zuweisen%2C-wie-ich-es-in-vue%2C-svelte-oder-mobx-kann%3F-wo-ist-das-bidirektionale-data-binding%3F\">#</a> 8. Warum kann ich nicht einfach einen Wert in Solids Store zuweisen, wie ich es in Vue, Svelte oder MobX kann? Wo ist das bidirektionale Data-Binding?</h3><p>Reaktivität ist ein machtvolles Werkzeug, aber auch ein gefährliches. MobX weiß das und hat den strikten Modus und Actions eingeführt, um zu beschränken, wann und wo Aktualisierungen passieren. In Solid, welches mit ganzen Komponentenstrukturen voll Daten arbeitet, wurde es klar, dass wir etwas von React lernen können. Man muss nicht unbedingt unveränderlich sein, so lange man die gleichen Vereinbarungen trifft.</p><p>In der Lage zu sein, den State zu aktualisieren ist wohl weit weniger wichtig als die Entscheidung, den State weiterzugeben. Die Möglichkeit, ihn zu unterteilen, ist wichtiig und nur möglich, wenn Lesezugriffe unveränderlich sind. Wir müssen auch nicht die Kosten der Unveränderlichkeit aufbringen, wenn wir trotzdem granular aktualisieren können. Glücklicherweise gibt es reichlich Beispiele, wie man das macht, wie ImmutableJS und Immer. Ironischerweise agiert Solid meistens wie ein umgekehrtes Immer mit seinen veränderbaren Interna und unveränderbaren Schnittstellen.</p><h3 id=\"9.-kann-ich-nur-die-reaktivit%C3%A4t-von-solid-ohne-den-rest-verwenden%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-kann-ich-nur-die-reaktivit%C3%A4t-von-solid-ohne-den-rest-verwenden%3F\">#</a> 9. Kann ich nur die Reaktivität von Solid ohne den Rest verwenden?</h3><p>Natürlich. Obwohl es noch kein einzelnes Paket gibt, ist es einfach, Solid ohne den Kompiler zu installieren und nur die reaktiven Primitiven zu verwenden. Eine der Vorteile der granularen Reaktivität ist, dass sie Library-agnostisch ist. In dieser Hinsicht funktioniert nahezu jede reaktive Library auf die gleiche Weise. Das ist die ursprüngliche Inspiration hinter <a href=\"https://github.com/solidjs/solid\">Solid</a> und der darunterliegenden <a href=\"https://github.com/ryansolid/dom-expressions\">DOM Expressions library</a>, um einen Renderer direkt aus dem reaktiven System zu machen.</p><p>Um ein paar Libraries zum Probieren aufzulisten: <a href=\"https://github.com/solidjs/solid\">Solid</a>, <a href=\"https://github.com/mobxjs/mobx\">MobX</a>, <a href=\"https://github.com/knockout/knockout\">Knockout</a>, <a href=\"https://github.com/sveltejs/svelte\">Svelte</a>, <a href=\"https://github.com/adamhaile/S\">S.js</a>, <a href=\"https://github.com/Riim/cellx\">CellX</a>, <a href=\"https://github.com/ds300/derivablejs\">Derivable</a>, <a href=\"https://github.com/luwes/sinuous\">Sinuous</a>, und neuerdings sogar <a href=\"https://github.com/vuejs/vue\">Vue</a>. Es gehört mehr zu einer reaktiven Library als sie an einen Renderer zu hängen wie zum Beispiel <a href=\"https://github.com/Polymer/lit-html\">lit-html</a>, aber dies ist trotzdem eine gute Möglichkeit, sich eine Vorstellung zu verschaffen.</p><h3 id=\"10.-hat-solid-eine-next.js-oder-material-komponenten-artige-library%2C-die-ich-benutzen-kann%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-hat-solid-eine-next.js-oder-material-komponenten-artige-library%2C-die-ich-benutzen-kann%3F\">#</a> 10. Hat Solid eine Next.js oder Material-Komponenten-artige Library, die ich benutzen kann?</h3><p>Unseres Wissens nach nicht. Wenn du Interesse daran haben solltest, eine zu bauen, kannst du uns gern auf unserem <a href=\"https://discord.com/invite/solidjs\">Discord</a> um Hilfe fragen. Wir haben die Grundlagen, auf die du nur noch aufbauen musst.</p></section><section class=\"mt-10\"><h1 id=\"rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rendering\">#</a> Rendering</h1><p>Solid unterstützt Templating in 3 Formen: JSX, Tagged Template Literals und Solids HyperScript-Variante, obwohl JSX die bevorzugte Form ist. Warum? JSX ist eine großartige DSL für Kompilation. Es hat eine klare Syntax, unterstützt TypeScript, läuft mit Babel und unterstützt andere Werkzeuge wie Syntax Highlighting und Prettier. Es war nur pragmatisch, ein Werkzeug zu verwenden, das einem all das kostenlos zur Verfügung stellt. Als kompilierte Lösung bietet es eine großartige Entwicklererfahrung. Warum soll man sich mit eigenen Syntax DSLs herumschlagen, wenn man eine verwenden kann, die so weitläufig unterstützt wird?</p><h2 id=\"jsx-kompilieren\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#jsx-kompilieren\">#</a> JSX kompilieren</h2><p>Rendering beinhaltet das Vorkomplieren von JSX-Templates zu optimiertem nativen JS-Code. Der JSX-Code erzeugt:</p><ul> <li>DOM Templates, die bei der Erstellung der Instanz geklont werden</li> <li>Eine Reihe von Referenzdeklarationen die nur firstChild und nextSibling verwenden</li> <li>Feingranulare Berechnngen, um die so erzeugten Elemente zu aktualisieren.</li> </ul><p>Diese Herangehensweise ist einerseits performanter und erzeugt andererseits auch weniger Code als jedes Element einzeln eins nach dem anderen mit document.createElement zu erzeugen.</p><h2 id=\"attribute-und-props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#attribute-und-props\">#</a> Attribute und Props</h2><p>Solid versucht, die HTML-Konventionen so weit wie möglich beizubehalten, einschließlich der wahlweisen Groß-/Kleinschreibung der Attribute.</p><p>Die Mehrzahl aller Attribute von nativen JSX-Elementen werden als DOM-Attribute gesetzt. Statische Werte werden direkt in das geklonte Template geschrieben. Es gibt eine Reihe von Ausnahmen wie <code>class</code>, <code>style</code>, <code>value</code>, <code>innerHTML</code>, die zusätzliche Funktionalität bereitstellen.</p><p>However, custom elements (with exception of native built-ins) default to properties when dynamic. This is to handle more complex data types. It does this conversion by camel casing standard snake case attribute names <code>some-attr</code> to <code>someAttr</code>.</p><p>Jedenfalls ist es möglich, dieses Verhalten direkt mit Namespace-Direktiven zu kontrollieren. Man kann die Behandlung als Attribut mit <code>attr:</code> erzwingen oder als Prop mit <code>prop:</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">UniqACC</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.value} </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.title} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Hinweis:</strong> Statische Attribute werden als Teil vom HTML-Template erzeugt, das geklont wird. Evaluierte Werte, ob fest oder dynamisch, werden nachträglich in der JSX-Bindungsreihenfolge hinzugefügt. Während das für manche DOM-Elemente in Ordnung ist, gibt es manche, wie <code>input type=&quot;range&quot;</code>, wo die Reihenfolge wichtig ist. Daran sollte man denken, wenn man Elemente bindet.</p> </blockquote><h2 id=\"einstieg\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#einstieg\">#</a> Einstieg</h2><p>Der einfachste Weg, Solid-Komponenten einzubinden, besteht darin, render von 'solid-js/web' einzubinden. <code>render</code> nimmt eine Funktion als ersten Parameter und den Container, in den eingehängt werden soll, als zweiten und gibt eine Entfernungs-Methode zurück. Dieses <code>render</code> erzeugt automatisch den Reaktiven Ausgangspunkt und übernimmt das Rendern in den Container. Für die beste Performance wähle man dafür ein Element ohne Children.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;main&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Wichtig</strong> Der Erste Parameter muss eine Funktion sein. Andernfalls können wir das reaktive System nicht komplett verfolgen und planen. Diese einfache Auslassung wird dazu führen, dass Effekte nicht laufen.</p> </blockquote><h2 id=\"komponenten\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#komponenten\">#</a> Komponenten</h2><p>Komponenten sind in Solid einfach Pascal-case-benannte (am Anfang groß geschrieben) Funktionen. Ihr erster Parameter ist ein props-Objekt und sie geben echte DOM-Nodes aus.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Da alle JSX-Nodes echte DOM-Nodes sind, ist die einzige Aufgabe der obersten Komponente, diese alle ins DOM einzuhängen.</p><h2 id=\"props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#props\">#</a> Props</h2><p>Ähnlich wie bei React, Vue, Angular und anderen Frameworks erlaubt es Solid einem, Props in den Komponenten zu definieren, um Daten an Kind-Komponenten zu übergeben. Hier gibt ein Parent den String &quot;Hello&quot; an die <code>Label</code>-Komponente mit dem <code>greeting</code>-Prop weiter.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Im obigen Beispiel ist der Wert, der in <code>greeting</code> gesetzt wird, statisch, aber man kann auch dynamische Werte setzen. Zum Beispiel:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setGreeting</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">greeting</span><span style=\"color:#24292e\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Komponenten können auf props über das <code>props</code>-Argument zugreifen.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Anders als in anderen Frameworks kann man auf das <code>props</code>-Objekt einer Komponente nicht mit destructuring zugreifen. Das liegt daran, dass das <code>props</code>-Objekt hinter den Kulissen Getter und Setter benutzt, um verzögert auf Werte zuzugreifen. Destrukturierung zerstört dabei die Reaktivität von <code>props</code>.</p><p>Dieses Beispiel zeigt den &quot;korrekten&quot; Weg, auf Props in Solid zuzugreifen:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Hier wird `props.name` so aktualisiert, wie man es erwartet</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Dieses Beispiel zeigt den falschen Weg, auf Props in Solid zuzugreifen:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Das ist schlecht;</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Hier wird `props.name` nicht aktualisiert (bzw. ist nicht reaktiv), da es in `name` destrukturiert wird</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> ({ </span><span style=\"color:#e36209\">name</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Während das props-Objekt wie ein normales Objekt aussieht, während man es verwendet (und Typescript-Nutzern wird auffallen, dass es wie ein normales Objekt typisiert ist), ist es tatsächlich reaktiv – etwa vergleichbar mit einem Signal. Das hat ein paar Auswirkungen.</p><p>Da Solids Funktions-Komponenten anders als bei anderen JSX-Frameworks nur einmal ausgeführt werden (statt jeden Render-Zyklus), wird das folgende Beispiel nicht funktionieren, wie man es erwarten würde.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">default</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#e36209\"> </span><span style=\"color:#6f42c1\">Form</span><span style=\"color:#e36209\">() </span><span style=\"color:#24292e\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">input</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">oninput</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(e.currentTarget.value)} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>In diesem Beispiel ist vermutlich beabsichtigt, dass die <code>BasicComponent</code> den gegenwärtigen Wert anzuzeigen, der in das <code>input</code>-Feld geschrieben wurde. Aber, man erinnere sich, die <code>BasicComponent</code> wird nur ein einziges Mal aufgerufen, wenn sie erzeugt wird. Zu dieser Zeit ist <code>props.value</code> gleich <code>''</code>. Das heißt, dass <code>const value</code> in <code>BasicComponent</code> immer <code>default</code> enthalten und nie aktualisiert wird. Während das <code>props</code>-Objekt reaktiv ist, ist der Zugriff auf sie in <code>const value = props.value || 'default';</code> außerhalb des überwachten Bereichs von Solid und wird daher nicht neu ausgeführt, wenn props sich ändern.</p><p>Wie können wir unser Problem beheben?</p><p>Nun, generell müssen wir auf <code>props</code> so zugreifen, dass Solid es verfolgen kann. Generell heisst das, innerhalb vom JSX oder innerhalb von <code>createMemo</code>, <code>createEffekt</code> oder thunk(<code>() =&gt; ...</code>). Hier ist eine Lösung die wie erwartet funktioniert:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Das kann äquivalent in eine Funktion ausgelagert werden:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Eine andere Option für besonders aufwendige Berechnungen ist die Nutzung von <code>createMemo</code>. Zum Beispiel:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Oder einen Helfer benutzen:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ value: </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Zur Erinnerung, die folgenden Beispiele funktionieren <em>nicht</em>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// schlecht</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">: </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// schlecht</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> prop.value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Solids Komponenten machen einen wesentlicher Teil von dessen Performance aus. Solids Herangehensweise, Komponenten &quot;verschwinden&quot; zu lassen wird durch verzögerte Prop-Berechnung möglich. Statt sofort alle Prop-Ausdrücke zu berechnen und die Werte weiterzugeben, wird die Ausführung verzögert, bis auf die Prop im Kind-Element zugegriffen wird. Damit wird die Ausführung bis zum letzten möglichen Moment verzögert, typischerweise direkt bei den DOM-Einbindungen, was die Performance maximiert. Das sorgt für flache Hierarchien und entfernt die Notwendigkeit, einen Komponenten-Baum zu behandeln.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Component</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop1</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop2</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.dynamic} /&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// kompiliert ungefähr zu:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Wir untracken das Compoonent-Objekt, um es zu isolieren und kostspielige Updates zu vermeiden</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Component</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    prop1: </span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6a737d\">// ein dynamischer Ausdruck wird in einem Getter verschachtelt</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">prop2</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> state.dynamic;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Um Reaktivität beizubehalten, hat Solid ein paar Prop-Helfer:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Default-Props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Props klonen</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">newProps</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Props zusammenführen</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Props in verschiedene Objekte aufspalten</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;className&quot;</span><span style=\"color:#24292e\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#005cc5\">className</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">cx</span><span style=\"color:#24292e\">(local.className, theme.component)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"children\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#children\">#</a> Children</h2><p>Solid behandelt JSX-Children ähnlich wie React. Ein einzelnes Kind-Element ist ein einzelner Wert in <code>props.children</code> und mehrere Kind-Elemente wird als Array von Werten behandelt. Normalerweise werden sie im JSX durchgereicht. Allerdings gibt es für den Fall, dass man mit ihnen interagieren möchte, den <code>children</code>-Helfer, der alle Kontrollflüsse auflöst und ein Memo zurückgibt.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Einzelnes Kind-Element</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">class</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;label&quot;</span><span style=\"color:#24292e\">&gt;Hi, { props.children }&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;&lt;</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;Josie&lt;/</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Mehrere Kind-Elemente</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.children}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;First&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {state.expression}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;Judith&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Kind-Elemente mappen</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.children}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Kind-Elemente mit Helfer modifizieren und mappen</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// children-Helfer macht ein Memo aus dem Wert und löst die reaktiven Zwischenschritte auf</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">memo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">children</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    children.</span><span style=\"color:#6f42c1\">forEach</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c.classList.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;list-child&quot;</span><span style=\"color:#24292e\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">()}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p><strong>Wichtig:</strong> Solid behandelt Kind-Tags als kostspielige Ausdrücke und verpackt sie auf dem gleichen Weg als dynamische reaktive Ausdrücke. Das bedeutet, dass sie verzögert auf <code>props</code>-Zugriff diesen berechnen. Man sei vorsichtig, auf diese mehrfach zuzugreifen oder zu destrukturieren, bevor sie im JSX verwendet werden. Das liegt daran, dass sich Solid nicht den Luxus gönnt, vorher virtuelle DOM-Nodes zu erstellen und diese abzugleichen, also muss die Berechnung der <code>props</code> verzögert und auf absichtlichen Zugriff erfolgen. Nutze den <code>children</code>-Helfer, wenn diese memoized werden sollen.</p></section><section class=\"mt-10\"><h1 id=\"serverseitiges-rendering\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#serverseitiges-rendering\">#</a> Serverseitiges Rendering</h1><p>Solid handhabt serverseitiges Rendering, indem es JSX-Templates zu extrem effizientem String-anfügendem Code rendert. Das kann mit dem Babel-Plugin erreicht werden, oder indem man <code>generate: ssr</code> durchreicht. Sowohl für Client als auch Server muss <code>hydratable: true</code> konfiguriert sein, damit mit Hydration kompatibler Code erzeugt wird.</p><p>Die <code>solid-js</code> und <code>solid-js/web</code> Laufzeit-Umgebungen werden mit nicht-reaktiven Entsprechungen getauscht, wenn sie in einer node-Umgebung laufen. Für andere Umgebungen muss man den Server-Code mit conditionalen Exporten auf <code>node</code> gesetzt bündeln. Die meisten Code-Bundler haben einen Weg, dies zu tun. Generell empfehlen wir, außerdem die <code>solid</code> Export-Konditionen zu benutzen und dass Libraries ihren Code unter dem <code>solid</code> export verteilen.</p><p>Für SSR zu bauen, benötigt definitiv mehr Konfiguration, da wir 2 separate Bündel bauen. Das Client-Script sollte <code>hydrate</code> benutzen:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { hydrate } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document);</span></span>\n<span class=\"line\"></span></code></pre><p><em>Hinweis: Es ist möglich, vom document-Root aus zu rendern und zu hydrieren. Das erlaubt es uns, den gesamten View in JSX zu beschreiben.</em></p><p>Das Server-Script kann eine der vier Render-Methoden verwenden, die von Solid zur Verfügung gestellt werden. Jede erzeugt die Ausgabe und das Script-Tag, das in den Kopf des Dokuments eingefügt wird.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToString,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToStringAsync,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToNodeStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToWebStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Synchrones string rendering</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Asynchrones string rendering</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Node Stream API</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Web Stream API (etwa wie Cloudflare Workers)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, writable);</span></span>\n<span class=\"line\"></span></code></pre><p>Bequemerweise exportiert <code>solid-js/web</code> ein <code>isServer</code>-Flag. Das ist nützlich, da viele JS-Bündler in der Lage sind, unbenutzten Code innerhalb von Abfragen dieses Flags mit Tree Shaking zu entfernen und imports, die nur von diesem Code genutzt werden, aus dem Client-Code herauszulassen.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { isServer } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// das hier wird nur auf dem Server ausgeführt</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// das hier wird nur im Browser ausgeführt</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"hydrations-script\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hydrations-script\">#</a> Hydrations-Script</h2><p>Um progressiv zu Hydrieren, noch before Solids Laufzeitumgebung geladen ist, muss ein spezielles Script in die Seite eingefügt werden. Es kann entweder generiert und per <code>generateHydrationScript</code> eingefügt werden oder als Teil des JSX, indem man das <code>&lt;HydrationScript /&gt;</code>-Tag benutzt.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { generateHydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">app</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;html lang=&quot;en&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;title&gt;🔥 Solid SSR 🔥&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      ${</span><span style=\"color:#6f42c1\">generateHydrationScript</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;/head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;body&gt;${</span><span style=\"color:#24292e\">app</span><span style=\"color:#032f62\">}&lt;/body&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;/html&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { HydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">lang</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;en&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;🔥 Solid SSR 🔥&lt;/</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">charset</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;UTF-8&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;viewport&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">content</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;stylesheet&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;/styles.css&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">HydrationScript</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*... Rest der App*/</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Wenn man vom document aus hydriert, kann das Einfügen von Ressourcen, die noch nicht verfübbar sind, Dinge durcheinander bringen. Solid hat dafür eine <code>&lt;NoHydration&gt;</code>-Komponente, deren Kinder ganz normal auf dem Server funktionieren, aber nicht im Browser hydriert werden.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {manifest.</span><span style=\"color:#6f42c1\">map</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">m</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;modulepreload&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{m.href} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ))}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"asynchrones-und-streaming-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#asynchrones-und-streaming-ssr\">#</a> Asynchrones und Streaming SSR</h2><p>Diese Mechanismen bauen auf Solids Wissen darüber auf, wie Deine Anwendung funktioniert. Das macht es, indem Suspense und die Resource-API auf dem Server verwendet wird, statt erst die Ressourcen zu laden und dann erst zu rendern. Solid rendert auf dem Server genauso wie auf dem Client. Dein Code und die Ausführungsmuster sind einfach auf die selbe Weise geschrieben.</p><p>Async rendering waits until all Suspense boundaries resolve and then sends the results (or writes them to a file in the case of Static Site Generation).</p><p>Streaming starts flushing synchronous content to the browser immediately rendering your Suspense Fallbacks on the server. Then as the async data finishes on the server it sends the data over the same stream to the client to resolve Suspense where the browser finishes the job and replaces the fallback with real content.</p><p>The advantage of this approach:</p><ul> <li>Server doesn't have to wait for Async data to respond. Assets can start loading sooner in the browser, and the user can start seeing content sooner.</li> <li>Compared to client fetching like JAMStack, data loading starts on the server immediately and doesn't have to wait for client JavaScript to load.</li> <li>All data is serialized and transported from server to client automatically.</li> </ul><h2 id=\"ssr-caveats\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ssr-caveats\">#</a> SSR Caveats</h2><p>Solids isomorphische SSR-Lösung ist sehr mächtig, so dass man die Anforderungen für beide Umgebungen im gleichen Code ausdrücken kann, der in beiden Umgebungen gleichermaßen läuft. Allerdings führt das zu gewissen Erwartungen in Bezug auf Hydration, vor allem dass der gerenderte View im Client der gleiche ist, der auch auf dem Server gerendert würde. Es muss nicht exakt der gleiche sein, was den Text angeht, aber die Struktur des Markups sollte gleich sein.</p><p>Wir benutzen Markierungen, die vom Server gerendert werden, um Elemente und Ressourcen auf dem Server abzugleichen. Aus diesem Grund sollten Server und Client die gleichen Komponenten haben. Das ist normalerweise kein Problem, da Solid auf die gleiche Art auf dem Server und auf dem Client rendert. Aber derzeit gibt es noch keinen Weg, etwas auf dem Server zu rendern, das nicht auf dem Client hydriert wird. Im Moment gibt es keinen Weg, eine ganze Seite nur partiell zu hydrieren und keine Hydrations-Markierungen dafür zu erzeugen. Es ist alles oder nichts. Partielle Hydration ist etwas, was wir in der Zukunft erforschen wollen.</p><p>Zuletzt müssen alle Ressourcen innerhalb es <code>render</code>-Baums definiert werden. Sie werden dann automatisch serialisiert und im Browser übernommen, aber das funktioniert, weil die <code>render</code>- oder <code>pipeTo</code>-Methoden den Fortschritt des Renderns überblicken, etwas, das wir innerhalb eines isolierten Kontextes nicht können. Ebenso gibt es keine Reaktivität auf dem Server, also können Signale nicht beim initialen Rendern aktualisiert und weiter nach oben im Baum weitergereicht werden. Während es Suspense-Boundaries gibt, funktioniert Solids SSR von oben nach unten.</p><h2 id=\"den-anfang-machen-mit-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#den-anfang-machen-mit-ssr\">#</a> Den Anfang machen mit SSR</h2><p>SSR-Konfigurationen sind knifflig. Wir haben ein paar Beispiele im Paket <a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a>.</p><p>Zwischenzeitlich hat die Arbeit an einem neuen Starter begonnen, <a href=\"https://github.com/solidjs/solid-start\">SolidStart</a>, in dem wir versuchen, das Arbeiten damit bequemer zu machen.</p><h2 id=\"den-anfang-mit-statischer-seitengenerierung-machen\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#den-anfang-mit-statischer-seitengenerierung-machen\">#</a> Den Anfang mit statischer Seitengenerierung machen</h2><p><a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a> hat auch ein Werkzeugt, um statische oder vorgerenderte Seiten zu erzeugen. In der README-Daten finden sich weitere Informationen dazu.</p></section>"
}