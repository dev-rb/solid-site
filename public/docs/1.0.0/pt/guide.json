{
  "sections": [
    {
      "slug": "come%C3%A7ando",
      "title": "Começando",
      "level": 1,
      "children": [
        {
          "slug": "experimente-solid",
          "title": "Experimente Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "aprenda-solid",
          "title": "Aprenda Solid",
          "level": 2,
          "children": []
        },
        {
          "slug": "pense-como-solid",
          "title": "Pense como Solid",
          "level": 2,
          "children": [
            {
              "slug": "1.-dados-declarativos",
              "title": "1. Dados Declarativos",
              "level": 3,
              "children": []
            },
            {
              "slug": "2.-componentes-de-desaparecimento",
              "title": "2. Componentes de Desaparecimento",
              "level": 3,
              "children": []
            },
            {
              "slug": "3.-segrega%C3%A7%C3%A3o-de-leitura%2Fescrita",
              "title": "3. Segregação de leitura/escrita",
              "level": 3,
              "children": []
            },
            {
              "slug": "4.-simples-%C3%A9-melhor-que-f%C3%A1cil",
              "title": "4. Simples é melhor que fácil",
              "level": 3,
              "children": []
            }
          ]
        },
        {
          "slug": "web-components",
          "title": "Web Components",
          "level": 2,
          "children": []
        },
        {
          "slug": "renderiza%C3%A7%C3%A3o-de-servidor",
          "title": "Renderização de Servidor",
          "level": 2,
          "children": []
        },
        {
          "slug": "sem-compila%C3%A7%C3%A3o%3F",
          "title": "Sem Compilação?",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "reatividade",
      "title": "Reatividade",
      "level": 1,
      "children": [
        {
          "slug": "introduzindo-primitivos",
          "title": "Introduzindo Primitivos",
          "level": 2,
          "children": []
        },
        {
          "slug": "como-funciona",
          "title": "Como funciona",
          "level": 2,
          "children": []
        },
        {
          "slug": "considera%C3%A7%C3%B5es",
          "title": "Considerações",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "renderiza%C3%A7%C3%A3o",
      "title": "Renderização",
      "level": 1,
      "children": [
        {
          "slug": "compila%C3%A7ao-jsx",
          "title": "Compilaçao JSX",
          "level": 2,
          "children": []
        },
        {
          "slug": "atributos-e-props",
          "title": "Atributos e Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "entrada",
          "title": "Entrada",
          "level": 2,
          "children": []
        },
        {
          "slug": "componentes",
          "title": "Componentes",
          "level": 2,
          "children": []
        },
        {
          "slug": "props",
          "title": "Props",
          "level": 2,
          "children": []
        },
        {
          "slug": "filhos",
          "title": "Filhos",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "renderiza%C3%A7%C3%A3o-do-lado-do-servidor-(ssr)",
      "title": "Renderização do Lado do Servidor (SSR)",
      "level": 1,
      "children": [
        {
          "slug": "script-de-hidrata%C3%A7%C3%A3o",
          "title": "Script de Hidratação",
          "level": 2,
          "children": []
        },
        {
          "slug": "ssr-ass%C3%ADncrono-e-streaming",
          "title": "SSR Assíncrono e Streaming",
          "level": 2,
          "children": []
        },
        {
          "slug": "ressalvas-ssr",
          "title": "Ressalvas SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "come%C3%A7ando-com-ssr",
          "title": "Começando com SSR",
          "level": 2,
          "children": []
        },
        {
          "slug": "come%C3%A7ando-com-static-site-generation",
          "title": "Começando com Static Site Generation",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "compara%C3%A7%C3%A3o-com-outras-bibliotecas",
      "title": "Comparação com outras Bibliotecas",
      "level": 1,
      "children": [
        {
          "slug": "react",
          "title": "React",
          "level": 2,
          "children": [
            {
              "slug": "conselhos-para-migrar%3A",
              "title": "Conselhos para migrar:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "vue",
          "title": "Vue",
          "level": 2,
          "children": [
            {
              "slug": "conselhos-para-migrar%3A-1",
              "title": "Conselhos para migrar:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "svelte",
          "title": "Svelte",
          "level": 2,
          "children": [
            {
              "slug": "conselhos-para-migrar%3A-2",
              "title": "Conselhos para migrar:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "knockout.js",
          "title": "Knockout.js",
          "level": 2,
          "children": [
            {
              "slug": "conselhos-para-migrar%3A-3",
              "title": "Conselhos para migrar:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "lit-%26-lighterhtml",
          "title": "Lit & LighterHTML",
          "level": 2,
          "children": [
            {
              "slug": "conselhos-para-migrar%3A-4",
              "title": "Conselhos para migrar:",
              "level": 4,
              "children": []
            }
          ]
        },
        {
          "slug": "s.js",
          "title": "S.js",
          "level": 2,
          "children": []
        },
        {
          "slug": "rxjs",
          "title": "RxJS",
          "level": 2,
          "children": []
        },
        {
          "slug": "outros",
          "title": "Outros",
          "level": 2,
          "children": []
        }
      ]
    },
    {
      "slug": "faq",
      "title": "FAQ",
      "level": 1,
      "children": []
    }
  ],
  "content": "<section class=\"mt-10\"><h1 id=\"come%C3%A7ando\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#come%C3%A7ando\">#</a> Começando</h1><h2 id=\"experimente-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#experimente-solid\">#</a> Experimente Solid</h2><p>De longe, a maneira mais fácil de começar a usar o Solid é experimentá-lo online. Nosso REPL em <a href=\"https://playground.solidjs.com\">https://playground.solidjs.com</a> é a maneira perfeita de experimentar ideias. Assim como <a href=\"https://codesandbox.io/\">https://codesandbox.io/</a>, onde você pode modificar qualquer um de nossos exemplos.</p><p>Como alternativa, você pode usar nossos modelos simples <a href=\"https://vitejs.dev/\">Vite</a> executando estes comandos em seu terminal:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/js my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"></span></code></pre><p>Ou para TypeScript:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npx degit solidjs/templates/ts my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">cd</span><span style=\"color:#24292e\"> my-app</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm i </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">&gt;</span><span style=\"color:#24292e\"> npm run dev </span><span style=\"color:#6a737d\"># ou yarn ou pnpm</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"aprenda-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#aprenda-solid\">#</a> Aprenda Solid</h2><p>Sólido tem tudo a ver com pequenas peças compostas que servem como blocos de construção para aplicações. Essas peças são principalmente funções que constituem muitas APIs de nível superior superficiais. Felizmente, você não precisará saber sobre a maioria deles para começar.</p><p>Os dois principais tipos de blocos de construção que você tem à sua disposição são Componentes e Primitivos Reativos.</p><p>Componentes são funções que aceitam um objeto props e retornam elementos JSX, incluindo elementos DOM nativos e outros componentes. Eles podem ser expressos como elementos JSX em PascalCase:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;Hello {props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Solid&quot;</span><span style=\"color:#24292e\"> /&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Os componentes são leves no sentido de que eles próprios não têm estado e não têm instâncias. Em vez disso, eles servem como funções de fábrica para elementos DOM e primitivos reativos.</p><p>A reatividade de granulação fina do Solid é construída em 3 primitivos simples: Signals, Memos e Effects. Juntos, eles formam um mecanismo de sincronização de rastreamento automático que garante que sua visualização permaneça atualizada. Os cálculos reativos assumem a forma de expressões simples agrupadas por função que são executadas de forma síncrona.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">first</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setFirst</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;JSON&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">last</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setLast</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Bourne&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">first</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">last</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><p>Você pode aprender mais sobre <a href=\"#reactivity\">Solid's Reactivity</a> e <a href=\"#rendering\">Solid's Rendering</a>.</p><h2 id=\"pense-como-solid\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#pense-como-solid\">#</a> Pense como Solid</h2><p>O design da Solid carrega várias opiniões sobre quais princípios e valores nos ajudam a construir sites e aplicativos da melhor maneira. É mais fácil aprender e usar o Solid quando você está ciente da filosofia por trás dele.</p><h3 id=\"1.-dados-declarativos\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-dados-declarativos\">#</a> 1. Dados Declarativos</h3><p>Dados declarativos são a prática de vincular a descrição do comportamento dos dados à sua declaração. Isso permite uma composição fácil, empacotando todos os aspectos do comportamento dos dados em um único lugar.</p><h3 id=\"2.-componentes-de-desaparecimento\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-componentes-de-desaparecimento\">#</a> 2. Componentes de Desaparecimento</h3><p>Já é difícil estruturar seus componentes sem levar as atualizações em consideração. As atualizações Solid são completamente independentes dos componentes. As funções do componente são chamadas uma vez e depois deixam de existir. Os componentes existem para organizar seu código e não muito mais.</p><h3 id=\"3.-segrega%C3%A7%C3%A3o-de-leitura%2Fescrita\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-segrega%C3%A7%C3%A3o-de-leitura%2Fescrita\">#</a> 3. Segregação de leitura/escrita</h3><p>Controle preciso e previsibilidade tornam os sistemas melhores. Não precisamos da verdadeira imutabilidade para impor o fluxo unidirecional, apenas a capacidade de tomar decisões conscientes que os consumidores podem escrever ou não.</p><h3 id=\"4.-simples-%C3%A9-melhor-que-f%C3%A1cil\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-simples-%C3%A9-melhor-que-f%C3%A1cil\">#</a> 4. Simples é melhor que fácil</h3><p>Uma lição difícil para reatividade refinada. Convenções explícitas e consistentes, mesmo que exijam mais esforço, valem a pena. O objetivo é fornecer ferramentas mínimas para servir de base para a construção.</p><h2 id=\"web-components\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#web-components\">#</a> Web Components</h2><p>A Solid nasceu com o desejo de ter Web Components como cidadãos de primeira classe. Com o tempo, seu design evoluiu e os objetivos mudaram. No entanto, Solid ainda é uma ótima maneira de criar componentes da Web. <a href=\"https://github.com/solidjs/solid/tree/main/packages/solid-element\">Solid Element</a> permite que você escreva e envolva componentes de função do Solid para produzir componentes da Web pequenos e de alto desempenho. Dentro dos aplicativos do Solid, o Solid Element ainda é capaz de alavancar a API de Contexto do Solid, e os Portals do Solid suportam o estilo isolado do Shadow DOM.</p><h2 id=\"renderiza%C3%A7%C3%A3o-de-servidor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#renderiza%C3%A7%C3%A3o-de-servidor\">#</a> Renderização de Servidor</h2><p>O Solid tem uma solução de renderização dinâmica do lado do servidor que permite uma experiência de desenvolvimento verdadeiramente isomórfica. Através do uso de nossa primitiva Resource, as solicitações de dados assíncronas são feitas facilmente e, mais importante, serializadas e sincronizadas automaticamente entre o cliente e o navegador.</p><p>Como o Solid oferece suporte à renderização assíncrona e de fluxo no servidor, você pode escrever seu código de uma maneira e executá-lo no servidor. Isso significa que recursos como <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\">render-as-you-fetch</a> e a divisão de código funciona apenas em Solid.</p><p>Para obter mais informações, leia o <a href=\"#server-side-rendering\">Server guide</a>.</p><h2 id=\"sem-compila%C3%A7%C3%A3o%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sem-compila%C3%A7%C3%A3o%3F\">#</a> Sem Compilação?</h2><p>Não gosta de JSX? Não se importa em fazer trabalho manual para agrupar expressões, piorar o desempenho e ter tamanhos de pacote maiores? Alternativamente, você pode criar um aplicativo Solid usando Tagged Template Literals ou HyperScript em ambientes não compilados.</p><p>Você pode executá-los diretamente do navegador usando <a href=\"https://www.skypack.dev/\">Skypack</a>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#24292e\">=</span><span style=\"color:#032f62\">&quot;module&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        createSignal,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        onCleanup,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> html </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;https://cdn.skypack.dev/solid-js/html&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">          </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">html</span><span style=\"color:#032f62\">`&lt;div&gt;${</span><span style=\"color:#24292e\">count</span><span style=\"color:#032f62\">}&lt;/div&gt;`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      };</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(App, document.body);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">script</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><p>Lembre-se de que você ainda precisa da biblioteca de expressões DOM correspondente para que funcionem com o TypeScript. Você pode usar os Literais de Template Tagged com <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/lit-dom-expressions\">Lit DOM Expressions</a> ou HyperScript com <a href=\"https://github.com/ryansolid/dom-expressions/tree/main/packages/hyper-dom-expressions\">Hyper DOM Expressions</a>.</p></section><section class=\"mt-10\"><h1 id=\"reatividade\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#reatividade\">#</a> Reatividade</h1><p>O gerenciamento de dados do Solid é construído a partir de um conjunto de primitivas reativas flexíveis que são responsáveis por todas as atualizações. Ele tem uma abordagem muito semelhante ao MobX ou Vue, exceto que nunca troca sua granularidade por um VDOM. Dependências são rastreadas automaticamente quando você acessa seus valores reativos em seus efeitos e código JSX View.</p><p>Os primitivos do Solid vêm na forma de chamadas <code>create</code> que geralmente retornam tuplas, onde geralmente o primeiro elemento é um primitivo legível e o segundo é um setter. É comum referir-se apenas à parte legível pelo nome primitivo.</p><p>Aqui está um contador de incremento automático básico que é atualizado com base na configuração do signal de <code>count</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal, onCleanup } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#005cc5\">timer</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">setInterval</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setCount</span><span style=\"color:#24292e\">(</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">() </span><span style=\"color:#d73a49\">+</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">1</span><span style=\"color:#24292e\">), </span><span style=\"color:#005cc5\">1000</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">onCleanup</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">clearInterval</span><span style=\"color:#24292e\">(timer));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;app&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"introduzindo-primitivos\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduzindo-primitivos\">#</a> Introduzindo Primitivos</h2><p>O Solid é composto de 3 primitivas primárias: Signal, Memo e Effect. Em seu núcleo está o padrão Observer, onde Signals (e Memos) são rastreados envolvendo Memos e Effects.</p><p>Os Signals são os primitivos mais simples. Eles contêm valor e funções get e set para que possamos interceptar quando eles são lidos e escritos.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">count</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setCount</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#005cc5\">0</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Effects são funções que envolvem leituras de nosso Signal e são executadas novamente sempre que o valor de um Signal dependente muda. Isso é útil para criar efeitos colaterais, como renderização.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> console.</span><span style=\"color:#6f42c1\">log</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;The latest count is&quot;</span><span style=\"color:#24292e\">, </span><span style=\"color:#6f42c1\">count</span><span style=\"color:#24292e\">()));</span></span>\n<span class=\"line\"></span></code></pre><p>Finalmente, Memos são valores derivados armazenados em cache. Eles compartilham as propriedades de Signals e Effects. Eles rastreiam seus próprios Signals dependentes, reexecutando apenas quando eles mudam, e eles próprios são Signals rastreáveis.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">fullName</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`${</span><span style=\"color:#6f42c1\">firstName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">} ${</span><span style=\"color:#6f42c1\">lastName</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}`</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"como-funciona\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#como-funciona\">#</a> Como funciona</h2><p>Signals são emissores de eventos que contêm uma lista de assinaturas. Eles notificam seus assinantes sempre que seu valor muda.</p><p>As coisas ficam mais interessantes como essas assinaturas acontecem. Solid usa rastreamento automático de dependência. As atualizações acontecem automaticamente conforme os dados mudam.</p><p>O truque é uma pilha global em tempo de execução. Antes que um Effect ou Memo execute (ou reexecute) sua função fornecida pelo desenvolvedor, ele empurra a si mesmo para aquela pilha. Então, qualquer Signal que é lido verifica se há um ouvinte atual na pilha e, se houver, adiciona o ouvinte às suas assinaturas.</p><p>Você pode pensar assim:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">function</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">subscribers</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">Set</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">read</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">listener</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">getCurrentListener</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (listener) subscribers.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(listener);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">write</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">nextValue</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    value </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> nextValue;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">for</span><span style=\"color:#24292e\"> (</span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">sub</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">of</span><span style=\"color:#24292e\"> subscribers) sub.</span><span style=\"color:#6f42c1\">run</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> [read, write];</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Agora, sempre que atualizamos o Signal, sabemos quais Effects devem ser executados novamente. Simples, mas eficaz. A implementação real é muito mais complicada, mas essa é a essência do que está acontecendo.</p><p>Para uma compreensão mais detalhada de como funciona a reatividade, estes são artigos úteis:</p><p><a href=\"https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf\">A Hands-on Introduction to Fine-Grained Reactivity</a></p><p><a href=\"https://dev.to/ryansolid/building-a-reactive-library-from-scratch-1i0p\">Building a Reactive Library from Scratch</a></p><p><a href=\"https://indepth.dev/posts/1289/solidjs-reactivity-to-rendering\">SolidJS: Reactivity to Rendering</a></p><h2 id=\"considera%C3%A7%C3%B5es\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#considera%C3%A7%C3%B5es\">#</a> Considerações</h2><p>Essa abordagem de reatividade é muito poderosa e dinâmica. Ele pode manipular as dependências que mudam rapidamente por meio da execução de diferentes ramificações do código condicional. Ele também funciona por meio de muitos níveis de indireção. Qualquer função executada dentro de um escopo de rastreamento também está sendo rastreada.</p><p>No entanto, existem alguns comportamentos e desvantagens importantes dos quais devemos estar cientes.</p><ol> <li> <p>Toda reatividade é rastreada a partir de chamadas de função, seja diretamente ou oculta sob getter/proxy e acionada por acesso de propriedade. Isso significa que o local onde você acessa as propriedades em objetos reativos é importante.</p> </li> <li> <p>Componentes e callbacks de chamada de fluxos de controle não rastreiam escopos e são executados apenas uma vez. Isso significa que a desestruturação ou execução de lógica de nível superior em seus componentes não será executada novamente. Você deve acessar esses Signals, Stores e props de dentro de outras primitivas reativas ou do JSX para que essa parte do código seja reavaliada.</p> </li> <li> <p>Essa abordagem rastreia apenas de forma síncrona. Se você tiver um setTimeout ou usar uma função assíncrona em seu Effect, o código executado de forma assíncrona após o fato não será rastreado.</p> </li> </ol></section><section class=\"mt-10\"><h1 id=\"renderiza%C3%A7%C3%A3o\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#renderiza%C3%A7%C3%A3o\">#</a> Renderização</h1><p>Solid oferece suporte a modelos em 3 formas JSX, Tagged Template Literals e variante de HyperScript do Solid, embora JSX seja a forma predominante. Por quê? JSX é um ótimo DSL feito para compilação. Tem sintaxe clara, suporta TypeScript, funciona com Babel e suporta outras ferramentas como Code Syntax Highlighting e Prettier. Foi muito pragmático usar uma ferramenta que basicamente oferece tudo isso de graça. Como uma solução compilada, fornece excelente DX. Por que lutar com DSLs de sintaxe personalizados quando você pode usar um com suporte tão amplo?</p><h2 id=\"compila%C3%A7ao-jsx\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#compila%C3%A7ao-jsx\">#</a> Compilaçao JSX</h2><p>A renderização envolve a pré-compilação de modelos JSX em código js nativo otimizado. O código JSX constrói:</p><ul> <li>Elementos DOM do modelo que são clonados em cada instanciação</li> <li>Uma série de declarações de referência usando apenas firstChild e nextSibling</li> <li>Cálculos refinados para atualizar os elementos criados.</li> </ul><p>Essa abordagem tem mais desempenho e produz menos código do que criar cada elemento, um por um, com document.createElement.</p><h2 id=\"atributos-e-props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#atributos-e-props\">#</a> Atributos e Props</h2><p>Solid tenta refletir as convenções de HTML tanto quanto possível, incluindo não diferenciação de maiúsculas e minúsculas de atributos.</p><p>A maioria de todos os atributos no elemento nativo JSX são configurados como atributos DOM. Os valores estáticos são integrados ao modelo que é clonado. Existem várias exceções como <code>class</code>, <code>style</code>, <code>value</code>,<code>innerHTML</code> que fornecem funcionalidade extra.</p><p>No entanto, os elementos personalizados (com exceção dos integrados nativos) assumem as propriedades quando dinâmicos. Isso é para lidar com tipos de dados mais complexos. Ele faz essa conversão pelos nomes de atributo padrão snake case para camel case <code>some-attr</code> para <code>someAttr</code>.</p><p>No entanto, é possível controlar esse comportamento diretamente com as diretivas de namespace. Você pode forçar um atributo com <code>attr:</code> ou forçar prop <code>prop:</code></p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">my-element</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">UniqACC</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.value} </span><span style=\"color:#005cc5\">attr</span><span style=\"color:#24292e\">:</span><span style=\"color:#005cc5\">title</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.title} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Nota:</strong> Atributos estáticos são criados como parte do modelo html que é clonado. As expressões fixas e dinâmicas são aplicadas posteriormente na ordem de vinculação JSX. Embora isso seja adequado para a maioria dos elementos DOM, existem alguns, como elementos de entrada com <code>type='range'</code>, onde a ordem é importante. Lembre-se disso ao vincular elementos.</p> </blockquote><h2 id=\"entrada\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#entrada\">#</a> Entrada</h2><p>A maneira mais fácil de montar o Solid é importar renderização de 'solid-js/web'. <code>render</code> recebe uma função como o primeiro argumento e o recipiente de montagem para o segundo e retorna um método de descarte. Este <code>render</code> cria automaticamente a raiz reativa e lida com a renderização no contêiner de montagem. Para obter o melhor desempenho, use um elemento sem filhos.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { render } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">render</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document.</span><span style=\"color:#6f42c1\">getElementById</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;main&quot;</span><span style=\"color:#24292e\">));</span></span>\n<span class=\"line\"></span></code></pre><blockquote> <p><strong>Importante</strong> O primeiro argumento precisa ser uma função. Caso contrário, não podemos rastrear e programar adequadamente o sistema reativo. Esta simples omissão fará com que seus efeitos não sejam executados.</p> </blockquote><h2 id=\"componentes\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#componentes\">#</a> Componentes</h2><p>Componentes em Solid são apenas funções cased Pascal (Letra maiúscula). Seu primeiro argumento é um objeto props e eles retornam nós DOM reais.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Como todos os nós JSX são nós DOM reais, a única responsabilidade dos componentes de nível superior é anexá-los ao DOM.</p><h2 id=\"props\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#props\">#</a> Props</h2><p>Muito parecido com React, Vue, Angular e outros frameworks, Solid permite que você defina propriedades em seus componentes para passar dados para componentes filhos. Aqui, um pai está passando a string &quot;Hello&quot; para o componente <code>Label</code> por meio de uma propriedade <code>greeting</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>No exemplo acima, o valor definido em <code>greeting</code> é estático, mas também podemos definir valores dinâmicos. Por exemplo:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Parent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setGreeting</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;Hello&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">greeting</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">greeting</span><span style=\"color:#24292e\">()}&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;John&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">section</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Os componentes podem acessar as propriedades passadas a eles por meio de um argumento <code>props</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.greeting}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    {props.children}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Ao contrário de alguns outros frameworks, você não pode usar a desestruturação de objetos nos 'props' de um componente. Isso ocorre porque o objeto <code>props</code>, nos bastidores, depende de getters de objetos para recuperar valores lentamente (lazily). Usar a desestruturação de objetos quebra a reatividade de <code>props</code>.</p><p>Este exemplo mostra a maneira &quot;correta&quot; de acessar os props em Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Aqui, `props.name` será atualizado como você espera</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Este exemplo mostra a maneira errada de acessar os props em Solid:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// Isto é ruim</span></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Aqui, `props.name` não será atualizado (ou seja, não é reativo), pois é desestruturado em `name`</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">MyComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> ({ </span><span style=\"color:#e36209\">name</span><span style=\"color:#24292e\"> }) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{name}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p>Embora o objeto props pareça um objeto normal quando você o usa (e os usuários de Typescript notarão que ele é digitado como um objeto normal), na realidade ele é reativo - algo semelhante a um Signal. Isso tem algumas implicações.</p><p>Como, ao contrário da maioria dos frameworks JSX, os componentes de função do Solid são executados apenas uma vez (em vez de cada ciclo de renderização), o exemplo a seguir não funcionará conforme o esperado.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { createSignal } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">export</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">default</span><span style=\"color:#e36209\"> </span><span style=\"color:#d73a49\">function</span><span style=\"color:#e36209\"> </span><span style=\"color:#6f42c1\">Form</span><span style=\"color:#e36209\">() </span><span style=\"color:#24292e\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">setValue</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createSignal</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">input</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">type</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;text&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">oninput</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{(</span><span style=\"color:#e36209\">e</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">setValue</span><span style=\"color:#24292e\">(e.currentTarget.value)} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><p>Neste exemplo, o que provavelmente queremos que aconteça é que <code>BasicComponent</code> exiba o valor atual digitado no <code>input</code>. Mas, como um lembrete, a função <code>BasicComponent</code> só será executada uma vez quando o componente for inicialmente criado. Neste momento (na criação), <code>props.value</code> será igual a <code>''</code>. Isso significa que <code>const value</code> em <code>BasicComponent</code> será resolvido como <code>'default'</code> e nunca será atualizado. Enquanto o objeto <code>props</code> é reativo, acessando os props em <code>const value = props.value || 'default';</code> está fora do escopo observável de Solid, então não é reavaliado automaticamente quando os props mudam.</p><p>Então, como podemos resolver nosso problema?</p><p>Bem, em geral, precisamos acessar <code>props</code> em algum lugar onde o Solid possa observá-lo. Geralmente, isso significa dentro de JSX ou dentro de um <code>createMemo</code>, <code>createEffect</code> ou thunk(<code>() =&gt; ...</code>). Aqui está uma solução que funciona conforme o esperado:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Isso, de forma equivalente, pode ser içado (hoisted) em uma função:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Outra opção, se for um cálculo custoso, é usar <code>createMemo</code>. Por exemplo:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.value </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ou usando um helper</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ value: </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.value}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Como um lembrete, os exemplos a seguir <em>não</em> funcionarão:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// bad</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#e36209\">value</span><span style=\"color:#24292e\">: </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> props;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// bad</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">BasicComponent</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">valueProp</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> prop.value;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">value</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">createMemo</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> valueProp </span><span style=\"color:#d73a49\">||</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;default&quot;</span><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6f42c1\">value</span><span style=\"color:#24292e\">()}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Os componentes de Solid são a parte principal de seu desempenho. A abordagem de &quot;desaparecimento&quot; de componentes de Solid é possível graças à avaliação preguiçosa do suporte. Em vez de avaliar expressões prop imediatamente e passar valores, a execução é adiada até que o prop seja acessado no filho. Fazendo isso, adiamos a execução até o último momento, normalmente bem nas ligações do DOM, maximizando o desempenho. Isso nivela a hierarquia e elimina a necessidade de manter uma árvore de componentes.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Component</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop1</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">prop2</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{state.dynamic} /&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// compila aproximadamente para:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// não rastreamos o corpo do componente para isolá-lo e evitar atualizações custosas</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">untrack</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">Component</span><span style=\"color:#24292e\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    prop1: </span><span style=\"color:#032f62\">&quot;static&quot;</span><span style=\"color:#24292e\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#6a737d\">// expressão dinâmica, então envolvemos em um getter</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">get</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">prop2</span><span style=\"color:#24292e\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> state.dynamic;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">);</span></span>\n<span class=\"line\"></span></code></pre><p>Para ajudar a manter a reatividade, o Solid tem alguns helpers de prop:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// props padrão</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">({ name: </span><span style=\"color:#032f62\">&quot;Smith&quot;</span><span style=\"color:#24292e\"> }, props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// clonar props</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">newProps</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// mesclar props</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">props </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">mergeProps</span><span style=\"color:#24292e\">(props, otherProps);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// dividir props em vários objetos de props</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> [</span><span style=\"color:#005cc5\">local</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">others</span><span style=\"color:#24292e\">] </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">splitProps</span><span style=\"color:#24292e\">(props, [</span><span style=\"color:#032f62\">&quot;className&quot;</span><span style=\"color:#24292e\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> {</span><span style=\"color:#d73a49\">...</span><span style=\"color:#24292e\">others} </span><span style=\"color:#005cc5\">className</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">cx</span><span style=\"color:#24292e\">(local.className, theme.component)} /&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"filhos\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#filhos\">#</a> Filhos</h2><p>Solid lida com JSX Children semelhante ao React. Um único filho é um único valor em <code>props.children</code> e vários filhos são tratados por meio de uma matriz de valores. Normalmente, você os passa para a visualização JSX. No entanto, se você quiser interagir com eles, o método sugerido é o auxiliar <code>children</code> que resolve qualquer fluxo de controle downstream e retorna um memo.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#6a737d\">// filho único</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">Label</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">class</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;label&quot;</span><span style=\"color:#24292e\">&gt;Hi, { props.children }&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;&lt;</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;Josie&lt;/</span><span style=\"color:#22863a\">span</span><span style=\"color:#24292e\">&gt;&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// vários filhos</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;{props.children}&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;First&lt;/</span><span style=\"color:#22863a\">div</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {state.expression}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;Judith&lt;/</span><span style=\"color:#22863a\">Label</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">List</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// map de filhos</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{props.children}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// modificar um map de filhos usando helper</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">List</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> (</span><span style=\"color:#e36209\">props</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// o helper de filhos memoriza o valor e resolve toda a reatividade intermediária</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">memo</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">children</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> props.children);</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6f42c1\">createEffect</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    </span><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">children</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    children.</span><span style=\"color:#6f42c1\">forEach</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">c</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> c.classList.</span><span style=\"color:#6f42c1\">add</span><span style=\"color:#24292e\">(</span><span style=\"color:#032f62\">&quot;list-child&quot;</span><span style=\"color:#24292e\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">each</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{</span><span style=\"color:#6f42c1\">memo</span><span style=\"color:#24292e\">()}&gt;{</span><span style=\"color:#e36209\">item</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;{item}&lt;/</span><span style=\"color:#22863a\">li</span><span style=\"color:#24292e\">&gt;}&lt;/</span><span style=\"color:#22863a\">For</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  &lt;/</span><span style=\"color:#22863a\">ul</span><span style=\"color:#24292e\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre><p><strong>Importante:</strong> Solid trata as tags filhas como expressões custosas e as envolve da mesma forma que as expressões reativas dinâmicas. Isso significa que eles avaliam lentamente o acesso <code>prop</code>. Tenha cuidado ao acessá-los várias vezes ou desestruturá-los antes do local em que os usaria na visualização. Isso ocorre porque o Solid não tem o luxo de criar nós DOM virtuais com antecedência e, em seguida, diferenciá-los, então a resolução desses <code>props</code> deve ser preguiçosa e deliberada. Use o auxiliar <code>children</code> se desejar fazer isso, pois ele os memoriza.</p></section><section class=\"mt-10\"><h1 id=\"renderiza%C3%A7%C3%A3o-do-lado-do-servidor-(ssr)\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#renderiza%C3%A7%C3%A3o-do-lado-do-servidor-(ssr)\">#</a> Renderização do Lado do Servidor (SSR)</h1><p>O Solid lida com a renderização do servidor compilando modelos JSX para um código de acréscimo de string ultra eficiente. Isso pode ser feito através do plugin ou preset do babel passando <code>generate: &quot;ssr&quot;</code>. Para cliente e servidor, você precisa passar <code>hydratable: true</code> para gerar o código compatível de hidratação.</p><p>Os tempos de execução <code>solid-js</code> e <code>solid-js/web</code> são trocados por contrapartes não reativas quando executados em um ambiente Node. Para outros ambientes, você precisará agrupar o código do servidor com exportações condicionais definidas como <code>node</code>. A maioria dos empacotadores tem uma maneira de fazer isso. Em geral, também recomendamos o uso das condições de exportação <code>solid</code>, bem como é recomendado que as bibliotecas enviem seu código-fonte sob a exportação <code>solid</code>.</p><p>Construir para SSR definitivamente requer um pouco mais de configuração, pois estaremos gerando 2 pacotes separados. A entrada do cliente deve usar <code>hydrate</code>:</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { hydrate } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">hydrate</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, document);</span></span>\n<span class=\"line\"></span></code></pre><p><em>Observação: É possível renderizar e hidratar a partir da raiz do Documento. Isso nos permite descrever nossa visão completa em JSX.</em></p><p>A entrada do servidor pode usar uma das quatro opções de renderização oferecidas pelo Solid. Cada um produz a saída e uma tag de script a ser inserida no cabeçalho do documento.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToString,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToStringAsync,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToNodeStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  renderToWebStream,</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Renderização síncrona de string</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Renderização assíncrona de string</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">await</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToStringAsync</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Node Stream API</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToNodeWritable</span><span style=\"color:#24292e\">(App, res);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6a737d\">// Web Stream API (como Cloudflare Workers)</span></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> { </span><span style=\"color:#005cc5\">readable</span><span style=\"color:#24292e\">, </span><span style=\"color:#005cc5\">writable</span><span style=\"color:#24292e\"> } </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">new</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">TransformStream</span><span style=\"color:#24292e\">();</span></span>\n<span class=\"line\"><span style=\"color:#6f42c1\">pipeToWritable</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#22863a\">App</span><span style=\"color:#24292e\"> /&gt;, writable);</span></span>\n<span class=\"line\"></span></code></pre><p>Para sua conveniência, <code>solid-js/web</code> exporta um sinalizador <code>isServer</code>. Isso é útil, pois a maioria dos empacotadores será capaz de fazer treeshake de qualquer coisa sob este sinalizador ou importações usadas apenas pelo código sob este sinalizador de seu pacote de cliente.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { isServer } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">if</span><span style=\"color:#24292e\"> (isServer) {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// só faça isso no servidor</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">} </span><span style=\"color:#d73a49\">else</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#6a737d\">// só faça isso no browser</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">}</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"script-de-hidrata%C3%A7%C3%A3o\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#script-de-hidrata%C3%A7%C3%A3o\">#</a> Script de Hidratação</h2><p>Para hidratar progressivamente antes mesmo do tempo de execução do Solid carregar, um script especial precisa ser inserido na página. Ele pode ser gerado e inserido via <code>generateHydrationScript</code> ou incluído como parte do JSX usando a tag <code>&lt;HydrationScript /&gt;</code>.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { generateHydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">app</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">renderToString</span><span style=\"color:#24292e\">(() </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> &lt;</span><span style=\"color:#e36209\">App</span><span style=\"color:#24292e\"> /&gt;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">`</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;html lang=&quot;en&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;title&gt;🔥 Solid SSR 🔥&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta charset=&quot;UTF-8&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      &lt;link rel=&quot;stylesheet&quot; href=&quot;/styles.css&quot; /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">      ${</span><span style=\"color:#6f42c1\">generateHydrationScript</span><span style=\"color:#032f62\">()</span><span style=\"color:#032f62\">}</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;/head&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">    &lt;body&gt;${</span><span style=\"color:#24292e\">app</span><span style=\"color:#032f62\">}&lt;/body&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">  &lt;/html&gt;</span></span>\n<span class=\"line\"><span style=\"color:#032f62\">`</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span></code></pre><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#d73a49\">import</span><span style=\"color:#24292e\"> { HydrationScript } </span><span style=\"color:#d73a49\">from</span><span style=\"color:#24292e\"> </span><span style=\"color:#032f62\">&quot;solid-js/web&quot;</span><span style=\"color:#24292e\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#d73a49\">const</span><span style=\"color:#24292e\"> </span><span style=\"color:#6f42c1\">App</span><span style=\"color:#24292e\"> </span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\"> () </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  </span><span style=\"color:#d73a49\">return</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">lang</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;en&quot;</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;🔥 Solid SSR 🔥&lt;/</span><span style=\"color:#22863a\">title</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">charset</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;UTF-8&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">meta</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">name</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;viewport&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">content</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;width=device-width, initial-scale=1.0&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;stylesheet&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;/styles.css&quot;</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">        &lt;</span><span style=\"color:#22863a\">HydrationScript</span><span style=\"color:#24292e\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;/</span><span style=\"color:#22863a\">head</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">      &lt;</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;{</span><span style=\"color:#6a737d\">/*... rest of App*/</span><span style=\"color:#24292e\">}&lt;/</span><span style=\"color:#22863a\">body</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;/</span><span style=\"color:#22863a\">html</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  );</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">};</span></span>\n<span class=\"line\"></span></code></pre><p>Ao se hidratar a partir do documento, inserir ativos que não estão disponíveis na execução do cliente também pode bagunçar as coisas. O Solid fornece um componente <code>&lt;NoHydration&gt;</code> cujos filhos funcionarão normalmente no servidor, mas não se hidratarão no navegador.</p><pre class=\"shiki\" style=\"background-color:#fff\"><code><span class=\"line\"><span style=\"color:#24292e\">&lt;</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  {manifest.</span><span style=\"color:#6f42c1\">map</span><span style=\"color:#24292e\">((</span><span style=\"color:#e36209\">m</span><span style=\"color:#24292e\">) </span><span style=\"color:#d73a49\">=&gt;</span><span style=\"color:#24292e\"> (</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">    &lt;</span><span style=\"color:#22863a\">link</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">rel</span><span style=\"color:#d73a49\">=</span><span style=\"color:#032f62\">&quot;modulepreload&quot;</span><span style=\"color:#24292e\"> </span><span style=\"color:#005cc5\">href</span><span style=\"color:#d73a49\">=</span><span style=\"color:#24292e\">{m.href} /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">  ))}</span></span>\n<span class=\"line\"><span style=\"color:#24292e\">&lt;/</span><span style=\"color:#22863a\">NoHydration</span><span style=\"color:#24292e\">&gt;</span></span>\n<span class=\"line\"></span></code></pre><h2 id=\"ssr-ass%C3%ADncrono-e-streaming\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ssr-ass%C3%ADncrono-e-streaming\">#</a> SSR Assíncrono e Streaming</h2><p>Esses mecanismos são construídos com base no conhecimento do Solid de como sua aplicação funciona. Ele faz isso usando Suspense e a API de recursos no servidor, em vez de buscar e renderizar. Solid busca à medida que são renderizadas no servidor, assim como no cliente. Seu código e padrões de execução são escritos exatamente da mesma maneira.</p><p>A renderização assíncrona espera até que todos os limites do Suspense sejam resolvidos e, em seguida, envia os resultados (ou os grava em um arquivo no caso de Geração de Site Estático - SSG).</p><p>O streaming começa a descarregar o conteúdo síncrono para o navegador, processando imediatamente seus Suspense Fallbacks no servidor. Então, quando os dados assíncronos terminam no servidor, ele os envia pelo mesmo fluxo para o cliente para resolver o Suspense onde o navegador termina o trabalho e substitui o fallback por conteúdo real.</p><p>A vantagem desta abordagem:</p><ul> <li>O servidor não precisa esperar a resposta dos dados Async. Assets podem começar a carregar mais cedo no navegador e o usuário pode começar a ver o conteúdo mais cedo.</li> <li>Em comparação com a busca do cliente, como JAMStack, o carregamento de dados começa no servidor imediatamente e não precisa esperar o carregamento do JavaScript do cliente.</li> <li>Todos os dados são serializados e transportados do servidor para o cliente automaticamente.</li> </ul><h2 id=\"ressalvas-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#ressalvas-ssr\">#</a> Ressalvas SSR</h2><p>A solução Isomorphic SSR da Solid é muito poderosa, pois você pode escrever seu código principalmente como uma única base de código que roda de maneira semelhante em ambos os ambientes. No entanto, há expectativas de que isso coloque a hidratação. Principalmente porque a visualização renderizada no cliente é a mesma que seria renderizada no servidor. Não precisa ser exato em termos de texto, mas estruturalmente a marcação deve ser a mesma.</p><p>Usamos marcadores renderizados no servidor para combinar elementos e locais de recursos no servidor. Por isso, o Cliente e o Servidor devem ter os mesmos componentes. Normalmente, isso não é um problema, visto que o Solid renderiza da mesma maneira no cliente e no servidor. Mas atualmente não há como renderizar algo no servidor que não seja hidratado no cliente. Atualmente, não há como hidratar parcialmente uma página inteira, e não gerar marcadores de hidratação para ela. É tudo ou nada. A hidratação parcial é algo que queremos explorar no futuro.</p><p>Finalmente, todos os recursos precisam ser definidos na árvore <code>render</code>. Eles são serializados automaticamente e selecionados no navegador, mas isso funciona porque os métodos <code>render</code> ou <code>pipeTo</code> rastreiam o progresso da renderização. Algo que não podemos fazer se eles forem criados em um contexto isolado. Da mesma forma, não há reatividade no servidor, portanto, não atualize os signals na renderização inicial e espere que eles reflitam na parte superior da árvore. Embora tenhamos limites de suspense, o SSR do Solid é basicamente de cima para baixo.</p><h2 id=\"come%C3%A7ando-com-ssr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#come%C3%A7ando-com-ssr\">#</a> Começando com SSR</h2><p>As configurações de SSR são complicadas. Temos alguns exemplos no pacote <a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a>.</p><p>No entanto, um novo iniciador está em desenvolvimento <a href=\"https://github.com/solidjs/solid-start\">SolidStart</a> que visa tornar essa experiência muito mais suave.</p><h2 id=\"come%C3%A7ando-com-static-site-generation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#come%C3%A7ando-com-static-site-generation\">#</a> Começando com Static Site Generation</h2><p><a href=\"https://github.com/solidjs/solid/blob/main/packages/solid-ssr\">solid-ssr</a> também vem com um utilitário simples para gerar sites estáticos ou pré-renderizados. Leia o README para obter mais informações.</p></section><section class=\"mt-10\"><h1 id=\"compara%C3%A7%C3%A3o-com-outras-bibliotecas\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#compara%C3%A7%C3%A3o-com-outras-bibliotecas\">#</a> Comparação com outras Bibliotecas</h1><p>Esta seção não pode escapar de alguns preconceitos, mas acho que é importante entender onde a solução do Solid fica em comparação com outras bibliotecas. Não se trata de desempenho. Para uma visão definitiva do desempenho, sinta-se à vontade para olhar para o <a href=\"https://github.com/krausest/js-framework-benchmark\">JS Framework Benchmark</a>.</p><h2 id=\"react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#react\">#</a> React</h2><p>React teve uma grande influência no Solid. Seu fluxo unidirecional e segregação explícita de leitura e gravação em sua API Hooks informaram a API de Solid. Mais do que o objetivo de ser apenas uma &quot;Biblioteca de Renderização&quot; ao invés de um framework. Solid tem opiniões fortes sobre como abordar o gerenciamento de dados no desenvolvimento de aplicativos, mas não busca restringir sua execução.</p><p>No entanto, por mais que Solid se alinhe com a filosofia de design do React, ele funciona de maneira fundamentalmente diferente. O React usa um DOM Virtual e o Solid não. A abstração do React é a partição de componente de cima para baixo, onde os métodos de renderização são chamados repetidamente e comparados. Solid, em vez disso, renderiza cada Template uma vez em sua totalidade, construindo seu gráfico reativo e só então executa as instruções relacionadas a alterações refinadas.</p><h4 id=\"conselhos-para-migrar%3A\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conselhos-para-migrar%3A\">#</a> Conselhos para migrar:</h4><p>O modelo de atualização do Solid não se parece em nada com o React, ou mesmo com o React + MobX. Em vez de pensar nos componentes da função como a função <code>render</code>, pense neles como um <code>construtor</code>. Cuidado com a desestruturação ou com a perda de reatividade do acesso inicial à propriedade. Os primitivos do Solid não têm restrições como as Regras de Hook, então você é livre para aninhá-los como achar melhor. Você não precisa de chaves explícitas nas linhas da lista para ter um comportamento de &quot;key&quot;. Finalmente, não há VDOM, então APIs VDOM obrigatórias como <code>React.Children</code> e <code>React.cloneElement</code> não fazem sentido. Eu encorajo encontrar maneiras diferentes de resolver problemas que usam isso declarativamente.</p><h2 id=\"vue\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#vue\">#</a> Vue</h2><p>Solid não é particularmente influenciado pelo design do Vue, mas eles são comparáveis na abordagem. Ambos usam Proxies em seu sistema reativo com rastreamento automático baseado em leitura. Mas é aí que as semelhanças terminam. A detecção de dependência de baixa granularidade do Vue apenas alimenta um Virtual DOM e sistema de componentes menos granular, enquanto o Solid mantém sua granularidade até suas atualizações diretas de DOM.</p><p>O Vue valoriza a facilidade, enquanto o Solid valoriza a transparência. Embora a nova direção do Vue com o Vue 3 se alinhe mais com a abordagem do Solid. Essas bibliotecas podem se alinhar mais com o tempo, dependendo de como continuam a evoluir.</p><h4 id=\"conselhos-para-migrar%3A-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conselhos-para-migrar%3A-1\">#</a> Conselhos para migrar:</h4><p>Como outra biblioteca reativa moderna, a migração do Vue 3 deve parecer familiar. Os componentes do Solid são muito parecidos com marcar o template no final da função <code>setup</code> do Vue. Desconfie de envolver derivações de estado com cálculos, tente uma função. A reatividade é generalizada. Os proxies do Solid são intencionalmente somente leitura. Não bata antes de tentar.</p><h2 id=\"svelte\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#svelte\">#</a> Svelte</h2><p>Svelte foi o pioneiro na estrutura de desaparecimento pré-compilada que o Solid também emprega até certo ponto. Ambas as bibliotecas são realmente reativas e podem produzir pacotes de código de execução realmente pequenos, embora Svelte seja o vencedor aqui para pequenas demonstrações. O Solid requer um pouco mais de clareza em suas declarações, confiando menos na análise implícita do compilador, mas isso é parte do que dá ao Solid um desempenho superior. O sólido também mantém mais no tempo de execução, o que é melhor escalonado em aplicativos maiores. A implementação de demonstração RealWorld do Solid é 25% menor que a do Svelte.</p><p>Ambas as bibliotecas têm como objetivo ajudar seus desenvolvedores a escrever menos código, mas abordá-lo de maneira completamente diferente. Svelte 3 foca na otimização da facilidade de lidar com mudanças localizadas com foco na interação de objeto simples e ligação bidirecional. Em contraste, o Solid se concentra no fluxo de dados ao adotar deliberadamente o CQRS e a interface imutável. Com a composição funcional do template, em muitos casos, o Solid permite que os desenvolvedores escrevam ainda menos código do que o Svelte, embora a sintaxe do template do Svelte seja definitivamente mais tersa.</p><h4 id=\"conselhos-para-migrar%3A-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conselhos-para-migrar%3A-2\">#</a> Conselhos para migrar:</h4><p>A experiência do desenvolvedor é diferente o suficiente para que, embora algumas coisas sejam análogas, é uma experiência muito diferente. Componentes em Solid são baratos, então não se intimide em ter mais deles.</p><h2 id=\"knockout.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#knockout.js\">#</a> Knockout.js</h2><p>Esta biblioteca deve sua existência a Knockout. Modernizar seu modelo para detecção de dependência de baixa granularidade foi a motivação para este projeto. O Knockout foi lançado em 2010 e oferece suporte ao Microsoft Explorer até o IE6, enquanto grande parte do Solid não oferece suporte ao IE de forma alguma.</p><p>As ligações do Knockout são apenas strings em HTML que são analisadas no tempo de execução. Eles dependem do contexto de clonagem ($parent etc...). Enquanto Solid usa JSX ou Tagged Template Literais para templates optando por uma API em JavaScript.</p><p>A maior diferença pode ser que a abordagem do Solid para alterações em lote, que garante a sincronicidade, enquanto o Knockout tem deferUpdates que usa uma fila de microtarefa adiada.</p><h4 id=\"conselhos-para-migrar%3A-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conselhos-para-migrar%3A-3\">#</a> Conselhos para migrar:</h4><p>Se você está acostumado com o Knockout, as primitivas do Solid podem parecer estranhas para você. A separação de leitura/escrita é intencional e não apenas para dificultar a vida. Procure adotar um modelo mental de estado/ação (Flux). Embora as bibliotecas pareçam semelhantes, elas promovem práticas recomendadas diferentes.</p><h2 id=\"lit-%26-lighterhtml\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#lit-%26-lighterhtml\">#</a> Lit &amp; LighterHTML</h2><p>Essas bibliotecas são incrivelmente semelhantes e tiveram alguma influência no Solid. Principalmente, o código compilado do Solid usa um método muito semelhante para renderizar inicialmente o DOM com desempenho. A clonagem de elementos do Template e o uso de marcadores de posição de comentário são algo que o Solid e essas bibliotecas compartilham.</p><p>A maior diferença é que, embora essas bibliotecas não usem o Virtual DOM, elas tratam a renderização da mesma forma, de cima para baixo, exigindo o particionamento de componentes para manter as coisas sãs. Por outro lado, Solid usa seu gráfico reativo de granulação fina para atualizar apenas o que foi alterado e, ao fazer isso, apenas compartilha esta técnica para sua renderização inicial. Essa abordagem aproveita a velocidade inicial disponível apenas para o DOM nativo e também tem a abordagem de melhor desempenho para atualizações.</p><h4 id=\"conselhos-para-migrar%3A-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#conselhos-para-migrar%3A-4\">#</a> Conselhos para migrar:</h4><p>Essas bibliotecas são mínimas e fáceis de construir. No entanto, tenha em mente que <code>&lt;MyComp/&gt;</code> não é apenas HTMLElement (array ou função). Tente manter suas coisas no modelo JSX. O hoisting funciona na maior parte, mas é melhor pensar nisso mentalmente ainda como uma biblioteca de renderização e não como uma fábrica HTMLElement.</p><h2 id=\"s.js\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#s.js\">#</a> S.js</h2><p>Esta biblioteca teve a maior influência no design reativo do Solid. O Solid usou S.js internamente por alguns anos até que o conjunto de recursos os colocasse em caminhos diferentes. S.js é uma das bibliotecas reativas mais eficientes até hoje. Ele modela tudo em etapas de tempo síncrono como um circuito digital e garante consistência sem ter que fazer muitos dos mecanismos mais complicados encontrados em bibliotecas como MobX. A reatividade do sólido no final é uma espécie de híbrido entre S e MobX. Isso dá a ele maior desempenho do que a maioria das bibliotecas reativas (Knockout, MobX, Vue) enquanto mantém a facilidade do modelo mental para o desenvolvedor. O S.js, em última análise, ainda é a biblioteca reativa com melhor desempenho, embora a diferença seja quase imperceptível em todos, exceto nos benchmarks sintéticos mais estafantes.</p><h2 id=\"rxjs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rxjs\">#</a> RxJS</h2><p>RxJS é uma biblioteca reativa. Embora o Solid tenha uma ideia semelhante de dados observáveis, ele usa uma aplicação muito diferente do padrão do observador. Embora os sinais sejam como uma versão simples de um observável (apenas o próximo), o padrão de detecção de dependência automática suplanta os cerca de cem operadores do RxJS. Solid poderia ter adotado essa abordagem e, de fato, versões anteriores da biblioteca incluíam operadores semelhantes, mas na maioria dos casos é mais simples escrever sua própria lógica de transformação em uma computação. Onde os observáveis são inicializados a frio, unicast e baseados em push, muitos problemas no cliente podem ser inicializados a quente e multicast, que é o comportamento padrão do Solid.</p><h2 id=\"outros\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#outros\">#</a> Outros</h2><p>O Angular e algumas outras bibliotecas populares estão ausentes nesta comparação. A falta de experiência com eles impede fazer comparações adequadas. Geralmente, Solid tem pouco em comum com Frameworks maiores e é muito mais difícil compará-los.</p></section><section class=\"mt-10\"><h1 id=\"faq\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#faq\">#</a> FAQ</h1><h3 id=\"1.-jsx-sem-vdom%3F-isso-%C3%A9-vaporware%3F-j%C3%A1-ouvi-vozes-proeminentes-como-os-autores-dos-outros-frameworks-dizerem-que-isso-n%C3%A3o-%C3%A9-poss%C3%ADvel.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#1.-jsx-sem-vdom%3F-isso-%C3%A9-vaporware%3F-j%C3%A1-ouvi-vozes-proeminentes-como-os-autores-dos-outros-frameworks-dizerem-que-isso-n%C3%A3o-%C3%A9-poss%C3%ADvel.\">#</a> 1. JSX sem VDOM? Isso é vaporware? Já ouvi vozes proeminentes como os autores dos outros frameworks dizerem que isso não é possível.</h3><p>É possível quando você não tem o modelo de atualização do React. JSX é um Template DSL como qualquer outro. Apenas aquele que é mais flexível em certos aspectos. Inserir JavaScript arbitrário pode ser desafiador às vezes, mas não é diferente do suporte a operadores de propagação. Portanto, não, este não é um vaporware, mas uma abordagem comprovada como uma das mais eficazes.</p><p>O verdadeiro benefício vem em como ele é extensível. Você tem o compilador trabalhando para você, fornecendo atualizações DOM nativas ideais, mas tem toda a liberdade de uma biblioteca como React para escrever componentes usando técnicas como Render Props e Componentes de ordem superior ao lado de seus &quot;hooks&quot; reativos. Não gosta de como funciona o fluxo de controle do Solid? Escreva o seu próprio.</p><h3 id=\"2.-como-o-solid-tem-um-desempenho-t%C3%A3o-bom%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#2.-como-o-solid-tem-um-desempenho-t%C3%A3o-bom%3F\">#</a> 2. Como o Solid tem um desempenho tão bom?</h3><p>Gostaríamos de apontar para uma única coisa, mas realmente é a combinação de muitas decisões de design importantes:</p><ol> <li>Reatividade explícita para que apenas as coisas que deveriam ser reativas sejam rastreadas.</li> <li>Compile com a criação inicial em mente. O Solid usa heurística para afrouxar a granularidade e reduzir o número de cálculos feitos, mas mantém as atualizações principais granulares e de alto desempenho.</li> <li>Expressões reativas são apenas funções. Isso habilita &quot;Vanishing Components&quot; com avaliação preguiçosa da propriedade, removendo invólucros desnecessários e sobrecarga de sincronização.</li> </ol><p>Atualmente, essas são técnicas únicas em uma combinação que dá a Solid uma vantagem sobre a concorrência.</p><h3 id=\"3.-existe-react-compat%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#3.-existe-react-compat%3F\">#</a> 3. Existe React-Compat?</h3><p>Não. E provavelmente nunca haverá. Embora as APIs sejam semelhantes e os componentes muitas vezes possam ser movidos com pequenas edições, o modelo de atualização é fundamentalmente diferente. Os componentes React são renderizados continuamente, de forma que o código fora dos Hooks funcione de maneira muito diferente. As closures e regras de hook não são apenas desnecessários, mas podem ser usados de maneiras que não funcionam aqui.</p><p>Vue-compat, por outro lado, seria possível. Embora não haja planos de implementação atualmente.</p><h3 id=\"4.-por-que-a-desestrutura%C3%A7%C3%A3o-n%C3%A3o-funciona%3F-percebi-que-posso-consert%C3%A1-lo-envolvendo-todo-o-meu-componente-em-uma-fun%C3%A7%C3%A3o.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#4.-por-que-a-desestrutura%C3%A7%C3%A3o-n%C3%A3o-funciona%3F-percebi-que-posso-consert%C3%A1-lo-envolvendo-todo-o-meu-componente-em-uma-fun%C3%A7%C3%A3o.\">#</a> 4. Por que a desestruturação não funciona? Percebi que posso consertá-lo envolvendo todo o meu componente em uma função.</h3><p>A reatividade ocorre no acesso à propriedade em objetos Prop e Store. Referenciá-los fora de uma computação reativa ou vinculativa não será rastreado. A desestruturação está perfeitamente bem dentro deles.</p><p>No entanto, envolver todo o seu componente em uma função não é o que você deseja fazer de forma irresponsável. Solid não possui um VDOM. Portanto, qualquer alteração controlada executará toda a função novamente, recriando tudo. Não faça isso.</p><h3 id=\"5.-voc%C3%AA-pode-adicionar-suporte-para-componentes-de-classe%3F-acho-que-os-ciclos-de-vida-s%C3%A3o-mais-f%C3%A1ceis-de-raciocinar.\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#5.-voc%C3%AA-pode-adicionar-suporte-para-componentes-de-classe%3F-acho-que-os-ciclos-de-vida-s%C3%A3o-mais-f%C3%A1ceis-de-raciocinar.\">#</a> 5. Você pode adicionar suporte para componentes de classe? Acho que os ciclos de vida são mais fáceis de raciocinar.</h3><p>Não é a intenção de oferecer suporte a componentes de classe. Os ciclos de vida do Solid estão ligados à programação do sistema reativo e são artificiais. Suponho que você poderia fazer uma classe disso, mas efetivamente todo o código do manipulador de não evento está basicamente sendo executado no construtor, incluindo a função de renderização. É apenas mais sintaxe como uma desculpa para tornar seus dados menos granulares.</p><p>Agrupe dados e seus comportamentos juntos, em vez de ciclos de vida. Esta é uma prática recomendada reativa que funcionou por décadas.</p><h3 id=\"6.-eu-realmente-n%C3%A3o-gosto-de-jsx%2C-alguma-chance-de-um-template-dsl%3F-oh%2C-vejo-que-voc%C3%AA-tem-tagged-template-literals%2Fhyperscript.-talvez-eu-use-aqueles-...\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#6.-eu-realmente-n%C3%A3o-gosto-de-jsx%2C-alguma-chance-de-um-template-dsl%3F-oh%2C-vejo-que-voc%C3%AA-tem-tagged-template-literals%2Fhyperscript.-talvez-eu-use-aqueles-...\">#</a> 6. Eu realmente não gosto de JSX, alguma chance de um Template DSL? Oh, vejo que você tem Tagged Template Literals/HyperScript. Talvez eu use aqueles ...</h3><p>Não. Pare você aí mesmo. Usamos JSX da mesma forma que o Svelte usa seus modelos, para criar instruções DOM otimizadas. As soluções Tagged Template Literal e HyperScript podem ser realmente impressionantes por si mesmas, mas a menos que você tenha um motivo real como um requisito de não construção, elas são inferiores em todos os sentidos. Pacotes maiores, desempenho mais lento e a necessidade de valores de agrupamento de solução alternativa manual.</p><p>É bom ter opções, mas o JSX do Solid é realmente a melhor solução aqui. Um modelo DSL também seria ótimo, embora mais restritivo, mas o JSX nos dá muito de graça. TypeScript, Parsers existentes, Realce de sintaxe, TypeScript, Prettier, Code Completion e, por último, e não menos importante, TypeScript.</p><p>Outras bibliotecas têm adicionado suporte para esses recursos, mas isso tem sido um esforço enorme e ainda é imperfeito e uma dor de cabeça de manutenção constante. Isso é realmente assumir uma postura pragmática.</p><h3 id=\"7.-quando-eu-uso-um-signal-vs-store%3F-por-que-s%C3%A3o-diferentes%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#7.-quando-eu-uso-um-signal-vs-store%3F-por-que-s%C3%A3o-diferentes%3F\">#</a> 7. Quando eu uso um Signal vs Store? Por que são diferentes?</h3><p>Os Stores agrupam automaticamente os valores aninhados, tornando-os ideais para estruturas de dados profundas e para coisas como modelos. Para a maioria das outras coisas, Signals são leves e fazem o trabalho maravilhosamente.</p><p>Por mais que adoraríamos agrupá-los como uma única coisa, você não pode proxy de primitivas. As funções são a interface mais simples e qualquer expressão reativa (incluindo acesso de estado) pode ser agrupada em uma no transporte, portanto, isso fornece uma API universal. Você pode nomear seus sinais e estado como você escolher e permanecerá mínimo. A última coisa que gostaríamos de fazer é forçar a digitação de <code>.get()</code> <code>.set()</code> no usuário final ou, pior ainda, <code>.value</code>. Pelo menos o primeiro pode ter um alias para brevidade, enquanto o último é apenas a maneira menos concisa de chamar uma função.</p><h3 id=\"8.-por-que-n%C3%A3o-posso-simplesmente-atribuir-um-valor-ao-solid's-store-como-fa%C3%A7o-no-vue.-svelte-ou-mobx%3F-onde-est%C3%A1-a-liga%C3%A7%C3%A3o-bidirecional%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#8.-por-que-n%C3%A3o-posso-simplesmente-atribuir-um-valor-ao-solid's-store-como-fa%C3%A7o-no-vue.-svelte-ou-mobx%3F-onde-est%C3%A1-a-liga%C3%A7%C3%A3o-bidirecional%3F\">#</a> 8. Por que não posso simplesmente atribuir um valor ao Solid's Store como faço no Vue. Svelte ou MobX? Onde está a ligação bidirecional?</h3><p>A reatividade é uma ferramenta poderosa, mas também perigosa. MobX sabe disso e introduziu o modo estrito e ações para limitar onde/quando as atualizações ocorrem. No Solid, que lida com árvores de componentes inteiras de dados, tornou-se aparente que podemos aprender algo com o React aqui. Você não precisa ser realmente imutável, desde que forneça os meios para ter o mesmo contrato.</p><p>Ser capaz de aprovar a capacidade de atualizar o estado é indiscutivelmente ainda mais importante do que decidir aprovar o estado. Portanto, ser capaz de separá-lo é importante e só é possível se a leitura for imutável. Também não precisamos pagar o custo da imutabilidade se ainda pudermos fazer uma atualização granular. Felizmente, existem toneladas de arte anterior aqui entre ImmutableJS e Immer. Ironicamente, Solid atua principalmente como um Immer reverso com seus internos mutáveis e interface imutável.</p><h3 id=\"9.-posso-usar-a-reatividade-do-solid-por-conta-pr%C3%B3pria%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#9.-posso-usar-a-reatividade-do-solid-por-conta-pr%C3%B3pria%3F\">#</a> 9. Posso usar a reatividade do Solid por conta própria?</h3><p>É claro. Embora não tenhamos exportado um pacote autônomo, é fácil instalar o Solid sem o compilador e apenas usar os primitivos reativos. Um dos benefícios da reatividade granular é que ela é agnóstica para a biblioteca. Por falar nisso, quase todas as bibliotecas reativas funcionam dessa maneira. Isso é o que inspirou <a href=\"https://github.com/solidjs/solid\">Solid</a> e sua <a href=\"https://github.com/ryansolid/dom-expressions\">biblioteca de expressões DOM</a> subjacente em primeiro lugar para fazer um renderizador puramente do sistema reativo.</p><p>Para listar alguns para tentar: <a href=\"https://github.com/solidjs/solid\">Solid</a>, <a href=\"https://github.com/mobxjs/mobx\">MobX</a>, <a href=\"https://github.com/knockout/knockout\">Knockout</a>, <a href=\"https://github.com/sveltejs/svelte\">Svelte</a>, <a href=\"https://github.com/adamhaile/S\">S.js</a>, <a href=\"https://github.com/Riim/cellx\">CellX</a>, <a href=\"https://github.com/ds300/derivablejs\">Derivable</a>, <a href=\"https://github.com/luwes/sinuous\">Sinuous</a> e até recentemente <a href=\"https://github.com/vuejs/vue\">Vue</a>. Muito mais é necessário para fazer uma biblioteca reativa do que marcá-la em um renderizador como <a href=\"https://github.com/Polymer/lit-html\">lit-html</a> por exemplo, mas é uma boa maneira de ter uma ideia.</p><h3 id=\"10.-o-solid-tem-um-next.js-ou-uma-biblioteca-de-componentes-de-material-que-eu-possa-usar%3F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#10.-o-solid-tem-um-next.js-ou-uma-biblioteca-de-componentes-de-material-que-eu-possa-usar%3F\">#</a> 10. O Solid tem um Next.js ou uma biblioteca de componentes de material que eu possa usar?</h3><p>Não é do nosso conhecimento. Se você estiver interessado em construir um, estamos prontamente disponíveis em nosso <a href=\"https://discord.com/invite/solidjs\">Discord</a> para ajudar a construí-los. Temos os fundamentos e apenas precisamos desenvolvê-los.</p></section>"
}