{
  "files": [
    {
      "name": "main",
      "content": "import { render } from \"solid-js/web\";\nimport { createState } from \"solid-js\";\nimport { useForm } from \"./Validation\";\n\nconst EMAILS = [\"johnsmith@outlook.com\", \"mary@gmail.com\", \"djacobs@move.org\"];\n\nfunction fetchUserName(name) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(EMAILS.indexOf(name) > -1), 200);\n  });\n}\n\nconst ErrorMessage = ({ error }) => <span class=\"error-message\">{error}</span>;\n\nconst App = () => {\n  const { validate, handleSubmit, errors } = useForm({\n      errorClass: \"error-input\"\n    }),\n    [fields, setFields] = createState(),\n    fn = (form) => {\n      // form.submit()\n      console.log(\"Done\");\n    },\n    userNameExists = async ({ value }) => {\n      const exists = await fetchUserName(value);\n      return exists && `${value} is already being used`;\n    },\n    matchesPassword = ({ value }) =>\n      value === fields.password ? false : \"Passwords must Match\";\n\n  return (\n    <form ref={handleSubmit(fn)}>\n      <h1>Sign Up</h1>\n      <div class=\"field-block\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          ref={validate([userNameExists])}\n        />\n        {errors.email && <ErrorMessage error={errors.email} />}\n      </div>\n      <div class=\"field-block\">\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          required\n          minlength=\"8\"\n          onInput={(e) => setFields(\"password\", e.target.value)}\n          ref={validate()}\n        />\n        {errors.password && <ErrorMessage error={errors.password} />}\n      </div>\n      <div class=\"field-block\">\n        <input\n          type=\"password\"\n          name=\"confirmpassword\"\n          placeholder=\"Confirm Password\"\n          required\n          ref={validate([matchesPassword])}\n        />\n        {errors.confirmpassword && (\n          <ErrorMessage error={errors.confirmpassword} />\n        )}\n      </div>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nrender(App, document.getElementById(\"app\"));"
    },
    {
      "name": "Validation",
      "content": "import { createState } from \"solid-js\";\n\nfunction checkValid({ element, validators = [] }, setErrors, errorClass) {\n  return async () => {\n    element.setCustomValidity(\"\");\n    element.checkValidity();\n    let message = element.validationMessage;\n    if (!message) {\n      for (const validator of validators) {\n        const text = await validator(element);\n        if (text) {\n          element.setCustomValidity(text);\n          break;\n        }\n      }\n      message = element.validationMessage;\n    }\n    if (message) {\n      errorClass && element.classList.toggle(errorClass, true);\n      setErrors({ [element.name]: message });\n    }\n  };\n}\n\nexport function useForm({ errorClass }) {\n  const [errors, setErrors] = createState({}),\n    fields = {};\n\n  const validate = (validators = []) => {\n    return ref => {\n      let config;\n      fields[ref.name] = config = { element: ref, validators };\n      ref.onblur = checkValid(config, setErrors, errorClass);\n      ref.oninput = () => {\n        if (!errors[ref.name]) return;\n        setErrors({ [ref.name]: undefined });\n        errorClass && ref.classList.toggle(errorClass, false);\n      };\n    };\n  };\n\n  const handleSubmit = (callback = () => {}) => {\n    return ref => {\n      ref.setAttribute(\"novalidate\", \"\");\n      ref.onsubmit = async e => {\n        e.preventDefault();\n        let errored = false;\n\n        for (const k in fields) {\n          const field = fields[k];\n          await checkValid(field, setErrors, errorClass)();\n          if (!errored && field.element.validationMessage) {\n            field.element.focus();\n            errored = true;\n          }\n        }\n        !errored && callback(ref);\n      };\n    };\n  };\n\n  return { validate, handleSubmit, errors };\n}\n"
    }
  ]
}
